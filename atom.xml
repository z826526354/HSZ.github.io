<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hsiliver个人博客</title>
  
  <subtitle>桃李不言，下自成蹊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hsiliver.space/"/>
  <updated>2019-07-09T03:02:59.463Z</updated>
  <id>http://www.hsiliver.space/</id>
  
  <author>
    <name>hsiliver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>css2</title>
    <link href="http://www.hsiliver.space/2019/07/09/css/"/>
    <id>http://www.hsiliver.space/2019/07/09/css/</id>
    <published>2019-07-09T04:10:58.000Z</published>
    <updated>2019-07-09T03:02:59.463Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS层叠样式表-cascating-style-sheet"><a href="#CSS层叠样式表-cascating-style-sheet" class="headerlink" title="CSS层叠样式表(cascating style sheet)"></a>CSS层叠样式表(cascating style sheet)</h2><h4 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h4><p>选择器类型                权重</p><p>important                  infinity</p><p>行间样式                    1000</p><p>id                                100</p><p>class|属性|伪类       10</p><p>标签|伪元素              1</p><p>通配符                        0</p><p>父子选择器            div span</p><p>直接子元素选择器 div&gt;span</p><p>并列选择器            div.demo</p><p>分组选择器            div, span{}</p><p><code>margin: 0 auto;</code>    自适应</p><p><code>background-color:</code>背景颜色</p><p><code>background-repeat: no repeat / repeat-x / repeat-y;</code></p><p>背景重复            不重复    x方向重复    y方向重复</p><p><code>background-size:</code>也可以是百分比</p><table><thead><tr><th>cover</th><th>把背景图像扩展至足够大，以使背景图像完全覆盖背景区域。背景图像的某些部分也许无法显示在背景定位区域中。</th></tr></thead><tbody><tr><td>contain</td><td>把图像图像扩展至最大尺寸，以使其宽度和高度完全适应内容区域。</td></tr></tbody></table><p><code>background-position : x  y ;</code>——背景图片的定位</p><p>x-x方向</p><p>y-y方向</p><ul><li><p>border:外部框</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 三角形制作</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">35px</span> solid transparent;</span><br><span class="line"><span class="attribute">border-left</span>: <span class="number">35px</span> solid </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="/2019/07/09/css/QQ%E6%88%AA%E5%9B%BE20181130173804.png" alt="img"></p><p><code>outline:</code> 外部轮廓线</p><p><code>font-size:</code> 文字高度（默认16px）</p><p>1em = 1font-size</p><p><code>line-height:</code> 单行文本高度</p><p><code>text-indent: x em;</code> 缩进x文本的单位</p><p><code>text-decoration: line-throng / none / underline / overline;</code></p><p>中划线    无        下划线    上划线</p><p><code>font-family: arial;</code>( 字体种类 )</p><p><code>font-style: italic / oblique / normal;</code></p><p>字体样式    斜体    倾斜        标准（前面两个差不多）</p><p><code>text-align : center;</code> //文本居中</p><p><code>vertical-align: middle;</code> //文本类对齐线</p><p>一旦文本类或者文本类块级元素内有字了，设置了<code>vertical-align: middle;</code></p><p>的文字就会相对那个元素内的字体对齐 </p><p>单行文本高度 = 容器高度——普遍的居中方式 </p><p><code>cursor: pointer;</code> // 鼠标在某元素上锁呈现的样式为小手</p><p>小知识补充</p><p>rgb（0， 0， 0）</p><p>分别代表red， green， blue</p><p>rgba（0， 0， 0， 0.5）</p><p>分别代表red， green， blue， 透明度</p><p>box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.3);</p><p><img src="http://note.youdao.com/yws/public/resource/47b94a7f61d4e4c1c4fbfad5cdf1ed0c/xmlnote/31D1E5B90D284D0092C50933DD2A7A7E/491" alt="img"></p><p>盒模型= margin + padding + border + element / content</p><p>块级元素 : div p ul li ol form（独占一行，可以通过css改变宽高）</p><p>行级元素 : span strong em a del（内容决定元素所占位置，不可通过css改变宽高）</p><p>行级块元素 : img（两者优点的结合）</p><p>padding :  上         右        下      左；</p><p>  :  上        左右      下</p><p>  :  上下     左右 </p><p>left / top / right / bottom / z-index——只适用于有定位的元素</p><p>position:absolute / relative / fixed;</p><p>定位         </p><p>absolute——脱离原来位置相对于有定位的父级定位，没有则相对于窗口定位</p><p>relative——相对于自身初始位置定位</p><p>fixed—— 相对于窗口定位</p><p>编程思想——先写html / 先写css</p><h5 id="行级元素只能嵌套行级元素，块级元素可以嵌套任何元素"><a href="#行级元素只能嵌套行级元素，块级元素可以嵌套任何元素" class="headerlink" title="行级元素只能嵌套行级元素，块级元素可以嵌套任何元素"></a>行级元素只能嵌套行级元素，块级元素可以嵌套任何元素</h5><h5 id="关于margin塌陷问题"><a href="#关于margin塌陷问题" class="headerlink" title="关于margin塌陷问题"></a>关于margin塌陷问题</h5><p>垂直之间塌陷的原则是以两盒子最大的外边距为准</p><p>解决办法: 触发盒子的bfc</p><ol><li><p>position: absolute;</p></li><li><p>display: inline-block;</p></li><li><p>float: left / right;</p></li><li><p>overflow: hidden;</p></li></ol><p>(原理: 改变渲染规则)</p><p>关于浮动流: 文本以及文本类块级元素可以看到浮动流</p><p>清除浮动 : 利用伪元素、</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">""</span>;<span class="comment">/*——让伪元素生效*/</span></span><br><span class="line"><span class="attribute">clear</span>: both;<span class="comment">/*——清除浮动*/</span></span><br><span class="line"><span class="attribute">display</span>: block;<span class="comment">/*——让clear生效*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>凡是设置了position和float，元素会自动变成inline-block</p><p>伪元素:</p><p><code>::after</code></p><p><code>::before</code></p><ul><li>单行文本溢出打点:</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">overflow-hidden;</span><br><span class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>淘宝logo制作方法</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding-top</span>: <span class="number">90px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>标准盒模型变IE盒模型</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="描述一下盒模型"><a href="#描述一下盒模型" class="headerlink" title="描述一下盒模型"></a>描述一下盒模型</h4><p>margin：设置一个元素所有外边距的宽度</p><p>border： 围绕元素内容和内边距的一条或多条线</p><p>padding： 属性定义元素的内边距。padding 属性接受长度值或百分比值，但不允许使用负值</p><p>content：内容区</p><p><strong>W3C 盒子模型的范围包括 margin、border、padding、content，并且 content 部分不包含其他部分。</strong></p><p><strong>IE 盒子模型的 content 部分包含了 border 和 pading</strong></p><h3 id="简述display常用的的属性"><a href="#简述display常用的的属性" class="headerlink" title="简述display常用的的属性"></a>简述display常用的的属性</h3><table><thead><tr><th align="left">值</th><th>描述</th></tr></thead><tbody><tr><td align="left">none</td><td>此元素不会被显示。</td></tr><tr><td align="left">block</td><td>此元素将显示为块级元素，此元素前后会带有换行符。</td></tr><tr><td align="left">inline</td><td>默认。此元素会被显示为内联元素，元素前后没有换行符。</td></tr><tr><td align="left">inline-block</td><td>行内块元素。（CSS2.1 新增的值）</td></tr><tr><td align="left">list-item</td><td>此元素会作为列表显示。</td></tr><tr><td align="left">run-in</td><td>此元素会根据上下文作为块级元素或内联元素显示。</td></tr><tr><td align="left">flex</td><td>此元素将作为css3弹性盒模型</td></tr></tbody></table><h3 id="CSS3可用的伪类有哪些？"><a href="#CSS3可用的伪类有哪些？" class="headerlink" title="CSS3可用的伪类有哪些？"></a>CSS3可用的伪类有哪些？</h3><ol><li><p><strong>:first-child</strong>选择某个元素的第一个子元素；</p></li><li><p><strong>:last-child</strong>选择某个元素的最后一个子元素；</p></li><li><p><strong>:nth-child()</strong>选择某个元素的一个或多个特定的子元素；</p></li><li><p><strong>:nth-last-child()</strong>选择某个元素的一个或多个特定的子元素，从这个元素的最后一个子元素开始算；</p></li><li><p><strong>:nth-of-type()</strong>选择指定的元素；</p></li><li><p><strong>:nth-last-of-type()</strong>选择指定的元素，从元素的最后一个开始计算；</p></li><li><p><strong>:first-of-type</strong>选择一个上级元素下的第一个同类子元素；</p></li><li><p><strong>:last-of-type</strong>选择一个上级元素的最后一个同类子元素；</p></li><li><p><strong>:only-child</strong>选择的元素是它的父元素的唯一一个了元素；</p></li><li><p><strong>:only-of-type</strong>选择一个元素是它的上级元素的唯一一个相同类型的子元素；</p></li><li><p><strong>:empty</strong>选择的元素里面没有任何内容。</p></li></ol><h3 id="position有哪些值，-有什么区别？"><a href="#position有哪些值，-有什么区别？" class="headerlink" title="position有哪些值， 有什么区别？"></a>position有哪些值， 有什么区别？</h3><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">absolute</td><td align="left">生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。</td></tr><tr><td align="left">fixed</td><td align="left">生成绝对定位的元素，相对于浏览器窗口进行定位。</td></tr><tr><td align="left">relative</td><td align="left">生成相对定位的元素，相对于其正常位置进行定位。</td></tr><tr><td align="left">static</td><td align="left">默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。</td></tr><tr><td align="left">inherit</td><td align="left">规定应该从父元素继承 position 属性的值。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS层叠样式表-cascating-style-sheet&quot;&gt;&lt;a href=&quot;#CSS层叠样式表-cascating-style-sheet&quot; class=&quot;headerlink&quot; title=&quot;CSS层叠样式表(cascating style sheet)&quot;
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="css" scheme="http://www.hsiliver.space/tags/css/"/>
    
      <category term="css2" scheme="http://www.hsiliver.space/tags/css2/"/>
    
  </entry>
  
  <entry>
    <title>细说meta标签</title>
    <link href="http://www.hsiliver.space/2019/07/09/meta/"/>
    <id>http://www.hsiliver.space/2019/07/09/meta/</id>
    <published>2019-07-09T04:06:58.000Z</published>
    <updated>2019-07-09T03:00:46.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="细说meta标签"><a href="#细说meta标签" class="headerlink" title="细说meta标签"></a>细说meta标签</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">以上代码告诉IE浏览器，IE8/9及以后的版本都会以最高版本IE来渲染页面。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=7"</span>&gt;</span></span><br><span class="line">以上代码告诉IE浏览器，无论是否用DTD声明文档标准，IE8/9都会以IE7引擎来渲染页面。</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=8"</span>&gt;</span></span><br><span class="line">以上代码告诉IE浏览器，IE8/9都会以IE8引擎来渲染页面。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=Edge, chrome=1&quot;&gt;</span><br><span class="line"></span><br><span class="line">以上代码IE=edge告诉IE使用最新的引擎渲染网页，chrome=1将允许站点在使用了谷歌浏览器</span><br><span class="line">内嵌框架（Chrome Frame）的客户端渲染，对于没有使用的，则没有任何影响。</span><br><span class="line">目前绝大多数网站都用&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=EmulateIE7&quot;&gt;</span><br><span class="line">来作为IE8的兼容方法。为了避免制作出的页面在IE8下面出现错误</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>device-width：设备宽度<br>device-height：设备高度<br>width: 视口的宽度<br>hieght: 视口的高度<br>user-scalable：是否允许用户缩放yes / no<br>initial-scale：页面初始缩放值（可以带小数）<br>minimum-scale：页面最小缩放比（可以带小数）<br>maximum-scale：页面最大缩放比（可以带小数）</p><h4 id="有时大家会见到同时写了不允许缩放，又写了最小缩放比，那这不是冲突了？"><a href="#有时大家会见到同时写了不允许缩放，又写了最小缩放比，那这不是冲突了？" class="headerlink" title="有时大家会见到同时写了不允许缩放，又写了最小缩放比，那这不是冲突了？"></a><strong>有时大家会见到同时写了不允许缩放，又写了最小缩放比，那这不是冲突了？</strong></h4><h4 id="为什么都已经写了不允许缩放还有写那些？"><a href="#为什么都已经写了不允许缩放还有写那些？" class="headerlink" title="为什么都已经写了不允许缩放还有写那些？"></a>为什么都已经写了不允许缩放还有写那些？</h4><ol><li>有一些第三方工具能够破坏user-scalable, 比方说一些给父母的手机把蚊子放大的工具，就会有可能，<br>不过一般没可能</li><li>像iPhone5下会有黑边</li><li>所以写全了，可以避免一些bug</li></ol><p>ios10不支持user-scalable=no<br>initial-scaleble有值的情况下算页面的公式<br>缩放比 = css像素 / viewport宽度</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"format-detection"</span> <span class="attr">content</span>=<span class="string">"telephone=no, email=no"</span>&gt;</span></span><br><span class="line">禁止识别电话与邮箱(但是邮箱没效果)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-title"</span> <span class="attr">content</span>=<span class="string">"标题"</span>&gt;</span></span><br><span class="line">添加到主屏后的标题(ios)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"apple-mobile-web-app-capable"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">添加到主屏后, 全屏显示, 删除苹果默认的工具栏和菜单栏(无用)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"app-touch-icon-precomposed"</span> <span class="attr">href</span>=<span class="string">"./demo/lihong.jpg"</span>&gt;</span></span><br><span class="line">放在桌面上的logo</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"app-touch-startup-img"</span> <span class="attr">href</span>=<span class="string">"./demo/lihong.jpg"</span>&gt;</span></span><br><span class="line">启动时的动画(无用)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">设置x5内核浏览器只能竖屏浏览 (只有UC有效)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"x5-fullscreen"</span> <span class="attr">content</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">设置x5内核浏览器全屏浏览</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"screen-orientation"</span> <span class="attr">content</span>=<span class="string">"portrait"</span>&gt;</span></span><br><span class="line">设置UC浏览器只能竖屏浏览</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"full-screen"</span> <span class="attr">content</span>=<span class="string">"yes"</span>&gt;</span></span><br><span class="line">设置UC浏览器全屏浏览</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;细说meta标签&quot;&gt;&lt;a href=&quot;#细说meta标签&quot; class=&quot;headerlink&quot; title=&quot;细说meta标签&quot;&gt;&lt;/a&gt;细说meta标签&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="html5" scheme="http://www.hsiliver.space/tags/html5/"/>
    
      <category term="meta标签" scheme="http://www.hsiliver.space/tags/meta%E6%A0%87%E7%AD%BE/"/>
    
      <category term="混合app" scheme="http://www.hsiliver.space/tags/%E6%B7%B7%E5%90%88app/"/>
    
  </entry>
  
  <entry>
    <title>html总述</title>
    <link href="http://www.hsiliver.space/2019/07/09/html/"/>
    <id>http://www.hsiliver.space/2019/07/09/html/</id>
    <published>2019-07-09T04:03:58.000Z</published>
    <updated>2019-07-09T02:59:19.178Z</updated>
    
    <content type="html"><![CDATA[<h3 id="html4的以及html5-的一些新增初始标签"><a href="#html4的以及html5-的一些新增初始标签" class="headerlink" title="html4的以及html5 的一些新增初始标签"></a>html4的以及html5 的一些新增初始标签</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span>   </span><br><span class="line"><span class="comment">&lt;!-- 声明文档的解析类型(document.compatMode)，避免浏览器的怪异模式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- document.compatMode：</span></span><br><span class="line"><span class="comment">BackCompat：怪异模式，浏览器使用自己的怪异模式解析渲染页面。</span></span><br><span class="line"><span class="comment">CSS1Compat：标准模式，浏览器使用W3C的标准解析渲染页面。--&gt;</span></span><br></pre></td></tr></table></figure><p>这个属性会被浏览器识别并使用，但是如果你的页面没有DOCTYPE的声明，那么compatMode默认就是BackCompat,</p><p>这也就是恶魔的开始————浏览器按照自己的方式解析渲染页面，那么，在不同的浏览器就会显示不同的样式。（向后兼容）</p><p>如果你的页面添加了<!DOCTYPE html>那么，那么就等同于开启了标准模式，那么浏览器就得老老实实的按照W3C的标准解析渲染页面，这样一来，你的页面在所有的浏览器里显示的就都是一个样子了。<br>​        <strong>这就是<!DOCTYPE html>的作用 –&gt;</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 向搜索引擎表示该页面是html语言，并且语言为英文网站，其”lang”的意思就是language，语言的意思，</p><p>而“en”即表示english，当然你也可以写zh——代表中文，不过建议还是写en，毕竟这个主要是给搜索引擎看的，</p><p>搜索引擎不会去判断该站点是中文站还是英文站，所以这句话就是让搜索引擎知道，你的站点是中文站，对html页面本身不会有影响</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span> <span class="comment">&lt;!--这是被&lt;html&gt;包含的头文件头--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 如果你的网页里面出现了中文，在头部没有这一句 的话，将会导致中文乱码。</span></span><br><span class="line"><span class="comment">  因此这是编码格式，告诉给浏览器用什么方式来读这页代码。 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0 user-scalable=no"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- name="viewport"—— 视口 </span></span><br><span class="line"><span class="comment">  content="width=device-width —— 设备宽度（针对安卓）window Phone IE浏览器，上横竖屏的宽度 = 竖屏宽度 </span></span><br><span class="line"><span class="comment">  initial-scale=1.0 —— 缩放比例（针对iPhone/iPad）iPhone/iPad ，上横竖屏的宽度 = 竖屏宽度</span></span><br><span class="line"><span class="comment">  （因为兼容性的问题要写两个）            </span></span><br><span class="line"><span class="comment">  user-scalable=no —— 不允许用户放大</span></span><br><span class="line"><span class="comment">  作用：将页面大小根据分辨率不同进行相应的调节，减少手机端跟PC端上图像呈现的差异 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;meta http-equiv="X-UA-Compatible" content="IE=7"&gt;</span></span><br><span class="line"><span class="comment">  #以上代码告诉IE浏览器，无论是否用DTD声明文档标准，IE8/9都会以IE7引擎来渲染页面。</span></span><br><span class="line"><span class="comment">  &lt;meta http-equiv="X-UA-Compatible" content="IE=8"&gt;</span></span><br><span class="line"><span class="comment">  #以上代码告诉IE浏览器，IE8/9都会以IE8引擎来渲染页面。</span></span><br><span class="line"><span class="comment">  &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; </span></span><br><span class="line"><span class="comment">  #以上代码告诉IE浏览器，IE8/9及以后的版本都会以最高版本IE来渲染页面。</span></span><br><span class="line"><span class="comment">  &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"&gt;</span></span><br><span class="line"><span class="comment">  #以上代码IE=edge告诉IE使用最新的引擎渲染网页，chrome=1将允许站点在使用了谷歌浏览器</span></span><br><span class="line"><span class="comment">  内嵌框架（Chrome Frame）的客户端渲染，对于没有使用的，则没有任何影响。</span></span><br><span class="line"><span class="comment">  目前绝大多数网站都用&lt;meta http-equiv=”X-UA-Compatible” content=”IE=EmulateIE7″ &gt;</span></span><br><span class="line"><span class="comment">  来作为IE8的兼容方法。为了避免制作出的页面在IE8下面出现错误。 --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span> <span class="comment">&lt;!-- 这是网站的名字 --&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"../css/index.css"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外部引入css文件 ， 如果需要在内部写的话，直接&lt;style&gt;写在里面即可&lt;/style&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- head代表头部，那肯定是一些重要的预备工作，那么真正的编写 html 就在body标签里面了，</span></span><br><span class="line"><span class="comment">  body顾名思义 —— 身体，代表着控制一个人的神经系统，那么在html中也是如此--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;div class="wrapper"&gt;hello&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"../image/lin.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- script标签是可以引入外部标签的 —— 通过 src=“” 引入 </span></span><br><span class="line"><span class="comment">  如果在内部写的话，直接&lt;script&gt;编写在此处即可&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Html内容标签以及应用"><a href="#Html内容标签以及应用" class="headerlink" title="Html内容标签以及应用"></a>Html内容标签以及应用</h3><p>html —— hyperText markup language</p><p>  超文本        标记        语言</p><p><code>&amp;nbsp</code> —— 空格</p><p><code>&amp;lt</code> (less than) —— 小于</p><p><code>&amp;gt</code> （great than）—— 大于</p><p><code>&lt;br&gt;</code>——回车（单标签）</p><p><code>&lt;hr&gt;</code>—— 单横线（单标签）</p><p><code>&lt;meta&gt;</code>——（单标签）</p><p><code>&lt;link&gt;</code> ——引入标签（单标签）</p><p><img src="http://note.youdao.com/yws/public/resource/47b94a7f61d4e4c1c4fbfad5cdf1ed0c/xmlnote/84D9721ADDEC47D790801C3E2359B726/239" alt="img"></p><p>SEO搜索引擎优化技术</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"keywords"</span>&gt;</span> //关键字</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">""</span> <span class="attr">name</span>=<span class="string">"description"</span>&gt;</span> //描述</span><br></pre></td></tr></table></figure><p>有序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">reversed</span>=<span class="string">"reversed"</span>&gt;</span> // 倒着排序</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">start</span>=<span class="string">"2"</span>&gt;</span> // 从第二开始排序</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">"a/A/1/I/i"</span>&gt;</span> // 按照不同的顺序来排</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>无序列表</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">type</span>=<span class="string">"disc"</span>&gt;</span> // 默认实心圆 还有circle（圈）square（方块）</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">title</span>=<span class="string">""</span>&gt;</span> // ——图片标签（单标签）</span><br></pre></td></tr></table></figure><p>src——图片地址</p><p>alt——图片占位符（当图片报错是展示的文字）</p><p>title——图片提示符</p><h5 id="超文本-lt-a-href-quot-quot-gt-lt-a-gt"><a href="#超文本-lt-a-href-quot-quot-gt-lt-a-gt" class="headerlink" title="超文本&lt;a href=&quot;&quot;&gt;&lt;/a&gt;"></a>超文本<code>&lt;a href=&quot;&quot;&gt;&lt;/a&gt;</code></h5><p>1.<code>&lt;a href=&quot;&quot; target=&quot;_black&quot;&gt;&lt;/a&gt;</code></p><p>herf——链接地址</p><p>target=”_black”——一个属性表示新的页面打开</p><p>2.锚点</p><p><code>&lt;a href=&quot;#demo&quot;&gt;&lt;/a&gt;</code>——寻找并跳转到ID为demo的位置</p><p>3.打电话和发邮件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel：159xxxx3725"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto：8265xxxx4@qq.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.协议限定符（运行javascript代码）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:void(false);"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('a');"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>新闻标题（已经设置好css的文字格式）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span><span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure><p>各种字体标签</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>50<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>50<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>50<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>50<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>50<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>50<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器中就是这样了</p><p><em>50</em><br><span>50</span><br><del>50</del></p><address>50</address><strong>50</strong><p>50</p><p>form表单</p><p>最基础的用户名密码输入框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">username:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"uesrname"</span> <span class="attr">value</span>=<span class="string">"请输入用户名"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">password:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>单选题<code>type=&quot;radio&quot;</code></p><p>多选题<code>type=&quot;checkbox&quot;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>你最喜欢的水果是（  ）？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">A. 橘子<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"最喜欢的水果"</span> <span class="attr">value</span>=<span class="string">"oringe"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span> // 默认选中</span><br><span class="line">b. 苹果<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"最喜欢的水果"</span> <span class="attr">value</span>=<span class="string">"apple"</span>&gt;</span></span><br><span class="line">c. 香蕉<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"最喜欢的水果"</span> <span class="attr">value</span>=<span class="string">"banana"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> //提交按钮</span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>name——为了使他们变成同一道题</p><p>下拉菜单选项</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"get"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"guojia"</span> <span class="attr">id</span>=<span class="string">"position"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"China"</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"amrician"</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"japan"</span>&gt;</span>日本<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="HTML与浏览器"><a href="#HTML与浏览器" class="headerlink" title="HTML与浏览器"></a>HTML与浏览器</h3><p><strong>Doctype 作用？标准模式与兼容模式各有什么区别?</strong></p><p>DOCTYPE是用来声明文档类型和DTD规范的。<!DOCTYPE html>声明位于HTML文档中的第一行，不是一个HTML标签，处于 html 标签之前。告知浏览器的解析器用什么文档标准解析这个文档。DOCTYPE不存在或格式不正确会导致文档以兼容模式呈现。</p><p>标准模式的排版 和 JS 运作模式都是以该浏览器支持的最高标准运行。在兼容模式中，页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作。</p><p>在HTML4.01中&lt;!doctype&gt;声明指向一个DTD，由于HTML4.01基于SGML，所以DTD指定了标记规则以保证浏览器正确渲染内容 HTML5不基于SGML，所以不用指定DTD</p><p>HTML 全局属性</p><p>全局属性是所有HTML元素共有的属性; 它们可以用于所有元素，即使属性可能对某些元素不起作用。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes" target="_blank" rel="noopener">全局属性 | MDN</a></p><p><strong>canvas和svg的区别</strong></p><p>canvas是html5提供的新元素，而svg存在的历史要比canvas久远，已经有十几年了。svg并不是html5专有的标签，最初svg是用xml技术（超文本扩展语言，可以自定义标签或属性）描述二维图形的语言。在H5中看似canvas与svg很像，但是，他们有巨大的差别。</p><p>首先，从它们的功能上来讲，canvas可以看做是一个画布。，其绘制出来的图形为标量图，因此，可以在canvas中引入jpg或png这类格式的图片，在实际开发中，大型的网络游戏都是用canvas画布做出来的，并且canvas的技术现在已经相当的成熟。另外，我们喜欢用canvas来做一些统计用的图表，如柱状图曲线图或饼状图等。 而svg，所绘制的图形为矢量图，所以其用法上受到了限制。因为只能绘制矢量图，所以svg中不能引入普通的图片，因为矢量图的不会失真的效果，在项目中我们会用来做小图标。但是由于其本质为矢量图，可以被无限放大而不会失真，这很适合被用来做地图，而百度地图就是用svg技术做出来的。</p><p>另外从技术发面来讲canvas里面绘制的图形不能被引擎抓取，如我们要让canvas里面的一个图片跟随鼠标事件: canvas.onmouseover=function(){}。 而svg里面的图形可以被引擎抓取，支持事件的绑定。另外canvas中我们绘制图形通常是通过javascript来实现，svg更多的是通过标签来来实现，如在svg中绘制正矩形形就要用，这里我们不能用属性style=”width:XXX;height:XXX;”来定义。</p><p><strong>行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？</strong></p><p>定义：CSS 规范规定，每个元素都有 display 属性，确定该元素的类型，每个元素都有默认的 display 值，如 div 的 display 默认值为“block”，则为“块级”元素；span 默认 display 属性值为“inline”，是“行内”元素。</p><ul><li><p>行内元素有：a b span img input select strong（强调的语气）</p></li><li><p>块级元素有：div ul ol li dl dt dd h1 h2 h3 h4…p</p></li><li><p>空元素：</p></li><li><ul><li>常见: br hr img input link meta</li><li>不常见: area base col command embed keygen param source track wbr</li></ul></li></ul><p>不同浏览器（版本）、HTML4（5）、CSS2 等实际略有差异 参考: <a href="http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements" target="_blank" rel="noopener">http://stackoverflow.com/questions/6867254/browsers-default-css-for-html-elements</a></p><p><strong>页面导入样式时，使用 link 和@import 有什么区别？</strong></p><ul><li>link 属于 XHTML 标签，除了加载 CSS 外，还能用于定义 RSS, 定义 rel 连接属性等作用；而@import 是 CSS 提供的，只能用于加载 CSS;</li><li>页面被加载的时，link 会同时被加载，而@import 引用的 CSS 会等到页面被加载完再加载;</li><li>import 是 CSS2.1 提出的，只在 IE5 以上才能被识别，而 link 是 XHTML 标签，无兼容问题;</li><li>link 支持使用 js 控制 DOM 去改变样式，而@import 不支持;</li></ul><p><strong>介绍一下你对浏览器内核的理解？</strong></p><p>主要分成两部分：渲染引擎(layout engineer 或 Rendering Engine)和 JS 引擎。</p><p>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后渲染到用户的屏幕上。</p><p>JS 引擎则：解析和执行 javascript 来实现逻辑和控制 DOM 进行交互。</p><p>最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。</p><p><strong>HTML5变化</strong></p><ul><li><p><a href="http://www.w3school.com.cn/html/html5_new_elements.asp" target="_blank" rel="noopener">新的语义化元素</a></p></li><li><ul><li>header footer nav main article section</li><li>删除了一些纯样式的标签</li></ul></li><li><p><a href="http://caibaojian.com/html5/form.html" target="_blank" rel="noopener">表单增强</a></p></li><li><p>新API</p></li><li><ul><li>离线 （applicationCache ）</li><li>音视频 （audio, vidio）</li><li>图形 （canvans）</li><li>实时通信（websoket）</li><li>本地存储（localStorage, indexDB）</li><li>设备能力（地图定位，手机摇一摇）</li></ul></li></ul><p><strong>em 与 i 的区别</strong></p><ul><li>效果都是斜体</li><li>em 是语义化标签，表强调</li><li>i 是样式标签， 表斜体</li></ul><p><strong>哪些元素可以自闭合？</strong></p><ul><li>表单元素 input</li><li>img</li><li>br, hr</li><li>meta, link</li></ul><p><strong>HTML和DOM的关系</strong></p><ul><li>HTML只是一个字符串</li><li>DOM由HTML解析而来</li><li>JS可以维护DOM</li></ul><p><strong>property和attribute的区别</strong></p><p>例如一个input标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input value=<span class="string">"3"</span> /&gt;</span><br></pre></td></tr></table></figure><p> 他的attribute是3 但如果使用input.value =  4, 或 直接修改值为4，这时再去getAttribute得到的还是”3”</p><p>property 和 attribute非常容易混淆，两个单词的中文翻译也都非常相近（property：属性，attribute：特性），但实际上，二者是不同的东西，属于不同的范畴。</p><p>property是DOM中的属性，是JavaScript里的对象；</p><p>attribute是HTML标签上的特性，它的值只能够是字符串；</p><p><strong>form 作用</strong></p><ul><li><p>直接提交表单</p></li><li><p>使用submit / reset按钮</p></li><li><p>便于浏览器保存表单</p></li><li><p>第三方库可以整体取值</p></li><li><p>第三方库可以进行表单验证</p></li></ul><p><strong>主流浏览器机器内核</strong></p><table><thead><tr><th>浏览器</th><th>内核</th><th>备注</th></tr></thead><tbody><tr><td>IE</td><td>Trident</td><td>IE、猎豹安全、360 极速浏览器、百度浏览器</td></tr><tr><td>firefox</td><td>Gecko</td><td></td></tr><tr><td>Safari</td><td>webkit</td><td>从 Safari 推出之时起，它的渲染引擎就是 Webkit，一提到 webkit，首先想到的便是 chrome，Webkit 的鼻祖其实是 Safari。</td></tr><tr><td>chrome</td><td>Chromium/Blink</td><td>在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。大部分国产浏览器最新版都采用 Blink 内核。二次开发</td></tr><tr><td>Opera</td><td>blink</td><td>Opera内核原为：Presto，现在跟随 chrome 用 blink 内核。</td></tr></tbody></table><h5 id="简述一下你对-HTML-语义化的理解？"><a href="#简述一下你对-HTML-语义化的理解？" class="headerlink" title="简述一下你对 HTML 语义化的理解？"></a>简述一下你对 HTML 语义化的理解？</h5><ul><li>用正确的标签做正确的事情。</li><li>html 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析;</li><li>即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的;</li><li>搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;</li><li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</li></ul><h5 id="请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h5><ul><li><p>cookie 是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</p></li><li><p>cookie 数据始终在同源的 http 请求中携带（即使不需要），记会在浏览器和服务器间来回传递。</p></li><li><p>sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。</p></li><li><p>存储大小：</p></li><li><ul><li>cookie 数据大小不能超过 4k。</li><li>sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。</li></ul></li><li><p>有效期（生命周期）：</p></li><li><ul><li>localStorage: 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据；</li><li>sessionStorage: 数据在当前浏览器窗口关闭后自动删除。</li><li>cookie: 设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭</li></ul></li><li><p>共享</p></li><li><ul><li>sessionStorage不能共享，localStorage在同源文档之间共享，cookie在同源且符合path规则的文档之间共享</li></ul></li></ul><h5 id="html-中-title-属性和-alt-属性的区别？"><a href="#html-中-title-属性和-alt-属性的区别？" class="headerlink" title="html 中 title 属性和 alt 属性的区别？"></a>html 中 title 属性和 alt 属性的区别？</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"#"</span> alt=<span class="string">"alt信息"</span> /&gt;</span><br></pre></td></tr></table></figure><p>当图片不输出信息的时候，会显示 alt 信息 鼠标放上去没有信息，当图片正常读取，不会出现 alt 信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"#"</span> alt=<span class="string">"alt信息"</span> title=<span class="string">"title信息"</span> /&gt;</span><br></pre></td></tr></table></figure><ul><li>当图片不输出信息的时候，会显示 alt 信息 鼠标放上去会出现 title 信息；</li><li>当图片正常输出的时候，不会出现 alt 信息，鼠标放上去会出现 title 信息。</li><li>除了纯装饰图片外都必须设置有意义的值，搜索引擎会分析。</li></ul><p>另外还有一些关于 title 属性的知识：</p><ul><li>title 属性可以用在除了 base，basefont，head，html，meta，param，script 和 title 之外的所有标签。</li><li>title 属性的功能是提示。额外的说明信息和非本质的信息请使用 title 属性。title 属性值可以比 alt 属性值设置的更长。</li><li>title 属性有一个很好的用途，即为链接添加描述性文字，特别是当连接本身并不是十分清楚的表达了链接的目的。</li></ul><p><strong>为什么我们要弃用table标签？</strong></p><p>table的缺点在于服务器把代码加载到本地服务器的过程中，本来是加载一行执行一行，但是table标签是里面的东西全都下载完之后才会显示出来，那么 如果图片很多的话 就会导致网页一直加载不出来，除非所有的图片和内容都加载完。如果要等到所有的图片全都加载完之后才显示出来的话那也太慢了，所以table标签现在我们基本放弃使用了。</p><p><strong>head 元素</strong></p><p>head子元素大概分为三类，分别是：</p><ul><li>描述网页基本信息的</li><li>指向渲染网页需要其他文件链接的</li><li>各大厂商根据自己需要定制的</li></ul><p><strong>网页基本信息</strong></p><p>一个网页，首先得有个标题，就跟人有名字一样。除此之外，还可以根据实际需要补充一些基本信息。</p><ul><li>文档标题（浏览器标签中显示的文本）：<title>深入了解 head 元素</title></li><li>编码格式： 如果你的页面出现乱码，那一般就是编码格式不对</li><li>视窗设置：</li><li>搜索引擎优化相关内容： </li><li>IE浏览器版本渲染设置：</li></ul><p><strong>其他文件链接</strong></p><ul><li><p>CSS 文件：</p></li><li><p>JavaScript 文件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=“script.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>但是为了让页面的样子更早的让用户看到，一般把JS文件放到body的底部</p><p>同样分享页面到QQ的聊天窗口，有些页面直接就是一个链接，但是有些页面有标题，图片，还有文字介绍。为什么区别这么明显呢？其实就是看有没有设置下面这三个内容</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"name"</span> <span class="attr">content</span>=<span class="string">"这是分享的标题"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"image"</span> <span class="attr">content</span>=<span class="string">"http://imgcache.qq.com/qqshow/ac/v4/global/logo.png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">itemprop</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"这是要分享的内容"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>移动端项目需要注意的4个问题</strong></p><p>meta中设置viewport</p><p>阻止用户手滑放大或缩小页面，需要在 index.html中添加meta元素,设置viewport。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no"</span>&gt;</span></span><br><span class="line">这其实就算是很标准的一个meta标签了</span><br><span class="line">下一篇会细说meta标签的用处</span><br></pre></td></tr></table></figure><p><strong>CSS样式统一问题</strong></p><p>我们需要重置页面样式，因为在不同的手机浏览器上，默认的css样式不是统一的。 解决方法：使用reset.css重置所有元素的默认样式</p><p><strong>一像素边框问题</strong></p><p>有的手机分辨率比较高，是2倍屏或3倍屏，手机上的浏览器就会把CSS中的1像素值展示为2个或3个物理宽度 解决方法： 添加一个border.css库，将利用scroll缩放的原理将边框重置。当我们需要使用一像素边框时只需要在标签上添加对应类名，如设置底部一像素边框就在标签上加入”border-bottom”的class名</p><p><strong>300毫秒点击延迟问题</strong></p><p>在移动端开发中，某些机型上使用click事件会延迟300ms才执行，这样影响了用户体验。 解决方法： 引入<a href="https://www.jianshu.com/p/05b142d84780" target="_blank" rel="noopener">fastclick.js</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;html4的以及html5-的一些新增初始标签&quot;&gt;&lt;a href=&quot;#html4的以及html5-的一些新增初始标签&quot; class=&quot;headerlink&quot; title=&quot;html4的以及html5 的一些新增初始标签&quot;&gt;&lt;/a&gt;html4的以及html5 的一些
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="html5" scheme="http://www.hsiliver.space/tags/html5/"/>
    
  </entry>
  
  <entry>
    <title>VUE-Router</title>
    <link href="http://www.hsiliver.space/2019/07/08/vue-router/"/>
    <id>http://www.hsiliver.space/2019/07/08/vue-router/</id>
    <published>2019-07-08T14:56:58.000Z</published>
    <updated>2019-07-09T02:55:33.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><p>为我们创建单页面应用提供环境</p><p>等我想好怎么说再更新，这个比较复杂，但不难，就是难解释清除</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-router&quot;&gt;&lt;a href=&quot;#vue-router&quot; class=&quot;headerlink&quot; title=&quot;vue-router&quot;&gt;&lt;/a&gt;vue-router&lt;/h2&gt;&lt;p&gt;为我们创建单页面应用提供环境&lt;/p&gt;
&lt;p&gt;等我想好怎么说再更新，这个比较复
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE-router" scheme="http://www.hsiliver.space/tags/VUE-router/"/>
    
  </entry>
  
  <entry>
    <title>VUE组件</title>
    <link href="http://www.hsiliver.space/2019/07/08/vue-%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.hsiliver.space/2019/07/08/vue-组件/</id>
    <published>2019-07-08T14:54:58.000Z</published>
    <updated>2019-07-09T02:52:23.494Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vue-组件"><a href="#vue-组件" class="headerlink" title="vue-组件"></a>vue-组件</h2><p>定义：已经写好的，供我们修改使用，这些具备复用性高，易于修改、维护。比如 <a href="https://element.eleme.cn/#/zh-CN/component/installation" target="_blank" rel="noopener">element</a></p><p><a href="https://didi.github.io/" target="_blank" rel="noopener">滴滴开源组件库</a></p><ul><li><p>全局定义一个组件 / 指令</p><p><strong>一定要写在一个Vue实例下</strong></p><p>注意：这是一个html模板需要遵循html的规则，比如：span 标签不能嵌套 div，</p><p>但是字符串模板不一样，写成什么呀就是什么样</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">name</span>=<span class="string">"hsz"</span> <span class="attr">num</span>=<span class="string">"num"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 用户层可以通过操作name属性改变自己的昵称 相当于一个封闭的作用域</span></span><br><span class="line"><span class="comment">但是要注意避免直接操作name值, 例如操作num那样间接改变</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 参数：组件名, 组件设置</span></span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">"my-component"</span>, &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我是一个组件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count++"</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">        data : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 这里的data属性规定必须是个函数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                count : <span class="keyword">this</span>.num</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        props : &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 这里的属性相当于我们提供的接口</span></span></span><br><span class="line">        name : &#123;</span><br><span class="line"><span class="javascript">                type : <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">                <span class="comment">// 权限设置 String</span></span></span><br><span class="line"><span class="javascript">                <span class="built_in">require</span> : <span class="literal">true</span> <span class="comment">// 必须填写</span></span></span><br><span class="line">            &#125;,</span><br><span class="line">            num : &#123;</span><br><span class="line"><span class="javascript">                type : <span class="built_in">Number</span>,</span></span><br><span class="line"><span class="javascript">                <span class="keyword">default</span> : <span class="number">0</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript">    Vue.directive(<span class="string">"focus"</span>, &#123;</span></span><br><span class="line">        update() &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="number">333</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>, <span class="comment">// Vue实例</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>局部组件 / 指令</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>, <span class="comment">// Vue实例</span></span></span><br><span class="line">        components : &#123;</span><br><span class="line"><span class="javascript">        <span class="string">"hsz"</span> : &#123;</span></span><br><span class="line"><span class="xml">        template : `<span class="tag">&lt;<span class="name">div</span>&gt;</span>我是一个局部组件,只在#demo好使<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">        directives : &#123;</span><br><span class="line">            focus : &#123;</span><br><span class="line">                update() &#123;</span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="number">123</span>);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><a href="https://z826526354.github.io/myProject/vuejs/demo/shijian.html" target="_blank" rel="noopener">自定义事件</a>——类似 jQuery的 trigger</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">&#123;&#123;total&#125;&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">hsz</span> @<span class="attr">add_total</span>=<span class="string">"add"</span>&gt;</span><span class="tag">&lt;/<span class="name">hsz</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hsz</span> @<span class="attr">add_total</span>=<span class="string">"add"</span>&gt;</span><span class="tag">&lt;/<span class="name">hsz</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">Vue.component(<span class="string">"hsz"</span>, &#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 点击一次执行一次 addCount 函数，</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// 同时触发绑定的自定义事件 add_total</span></span></span><br><span class="line">template : `</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addCount"</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">`,</span><br><span class="line">data() &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">return</span> &#123;</span></span><br><span class="line">count : 0</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">addCount() &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.count ++;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 自定义事件</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.$emit(<span class="string">"add_total"</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">// 执行自定义事件</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">&#125;) <span class="comment">// 功能 点击按钮 就加1</span></span></span><br><span class="line">        </span><br><span class="line"><span class="javascript"><span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">el : <span class="string">".demo"</span>,</span></span><br><span class="line">data : &#123;</span><br><span class="line">total : 0</span><br><span class="line">&#125;,</span><br><span class="line">methods : &#123;</span><br><span class="line">add () &#123;</span><br><span class="line"><span class="javascript"><span class="keyword">this</span>.total ++;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="javascript">&#125;) <span class="comment">// 功能 获取总和</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="element组件示例"><a href="#element组件示例" class="headerlink" title="element组件示例"></a><a href="https://z826526354.github.io/myProject/vuejs/demo/element_tanchuang.html" target="_blank" rel="noopener">element组件示例</a></h3><h3 id="element组件示例代码"><a href="#element组件示例代码" class="headerlink" title="element组件示例代码"></a><a href="https://github.com/z826526354/myProject/blob/master/vuejs/demo/element_tanchuang.html" target="_blank" rel="noopener">element组件示例代码</a></h3></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;vue-组件&quot;&gt;&lt;a href=&quot;#vue-组件&quot; class=&quot;headerlink&quot; title=&quot;vue-组件&quot;&gt;&lt;/a&gt;vue-组件&lt;/h2&gt;&lt;p&gt;定义：已经写好的，供我们修改使用，这些具备复用性高，易于修改、维护。比如 &lt;a href=&quot;https://
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE-组件" scheme="http://www.hsiliver.space/tags/VUE-%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>VUE-cli</title>
    <link href="http://www.hsiliver.space/2019/07/08/vue-cli/"/>
    <id>http://www.hsiliver.space/2019/07/08/vue-cli/</id>
    <published>2019-07-08T14:44:58.000Z</published>
    <updated>2019-07-09T02:56:08.855Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-cli-构建工具——脚手架"><a href="#Vue-cli-构建工具——脚手架" class="headerlink" title="Vue-cli(构建工具——脚手架)"></a>Vue-cli(构建工具——脚手架)</h2><p>内部模板有已经给我们配置好了wepack的模板</p><ul><li><p>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cli -g</span><br><span class="line">下载到全局</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vue -V</span><br><span class="line">查看版本</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vue init &lt;template&gt; &lt;project-name&gt;</span><br><span class="line">&lt;项目模板&gt;&lt;项目名字&gt;</span><br><span class="line"></span><br><span class="line">vue init webpack myVue</span><br></pre></td></tr></table></figure><p>通常我们用官方的webpack模板</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">    "dev": "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js",</span><br><span class="line">    "start": "npm run dev",</span><br><span class="line">    "build": "node build/build.js"</span><br><span class="line">  &#125;</span><br><span class="line">/*</span><br><span class="line">这里我们配置的时候没有使用ESlint</span><br><span class="line">vue run dev == 执行dev脚本</span><br><span class="line">（开发环境下）</span><br><span class="line"></span><br><span class="line">vue run build(开发完的环境下)</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "vue": "^2.5.2",</span><br><span class="line">    "vue-router": "^3.0.1"</span><br><span class="line">  &#125;</span><br><span class="line">// 运行时所需要的包</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    "autoprefixer": "^7.1.2",</span><br><span class="line">    "babel-core": "^6.22.1",</span><br><span class="line">    "babel-helper-vue-jsx-merge-props": "^2.0.3",</span><br><span class="line">    "babel-loader": "^7.1.1",</span><br><span class="line">    "babel-plugin-syntax-jsx": "^6.18.0",</span><br><span class="line">    "babel-plugin-transform-runtime": "^6.22.0",</span><br><span class="line">    "babel-plugin-transform-vue-jsx": "^3.5.0",</span><br><span class="line">    "babel-preset-env": "^1.3.2",</span><br><span class="line">    "babel-preset-stage-2": "^6.22.0",</span><br><span class="line">    "chalk": "^2.0.1",</span><br><span class="line">    "copy-webpack-plugin": "^4.0.1",</span><br><span class="line">    "css-loader": "^0.28.0",</span><br><span class="line">    "extract-text-webpack-plugin": "^3.0.0",</span><br><span class="line">    "file-loader": "^1.1.4",</span><br><span class="line">    "friendly-errors-webpack-plugin": "^1.6.1",</span><br><span class="line">    "html-webpack-plugin": "^2.30.1",</span><br><span class="line">    "node-notifier": "^5.1.2",</span><br><span class="line">    "optimize-css-assets-webpack-plugin": "^3.2.0",</span><br><span class="line">    "ora": "^1.2.0",</span><br><span class="line">    "portfinder": "^1.0.13",</span><br><span class="line">    "postcss-import": "^11.0.0",</span><br><span class="line">    "postcss-loader": "^2.0.8",</span><br><span class="line">    "postcss-url": "^7.2.1",</span><br><span class="line">    "rimraf": "^2.6.0",</span><br><span class="line">    "semver": "^5.3.0",</span><br><span class="line">    "shelljs": "^0.7.6",</span><br><span class="line">    "uglifyjs-webpack-plugin": "^1.1.1",</span><br><span class="line">    "url-loader": "^0.5.8",</span><br><span class="line">    "vue-loader": "^13.3.0",</span><br><span class="line">    "vue-style-loader": "^3.0.1",</span><br><span class="line">    "vue-template-compiler": "^2.5.2",</span><br><span class="line">    "webpack": "^3.6.0",</span><br><span class="line">    "webpack-bundle-analyzer": "^2.9.0",</span><br><span class="line">    "webpack-dev-server": "^2.9.1",</span><br><span class="line">    "webpack-merge": "^4.1.0"</span><br><span class="line">  &#125;</span><br><span class="line">// 开发时所需要的包</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"engines": &#123;</span><br><span class="line">    "node": "&gt;= 6.0.0",</span><br><span class="line">    "npm": "&gt;= 3.0.0"</span><br><span class="line">  &#125;</span><br><span class="line">// 整个项目需要用到的引擎</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;: [</span><br><span class="line">    &quot;&gt; 1%&quot;, // 市场份额 &gt; 1%</span><br><span class="line">    &quot;last 2 versions&quot;, // 最近的两个版本好使</span><br><span class="line">    &quot;not ie &lt;= 8&quot; // ie不 &lt;= 8</span><br><span class="line">  ]</span><br><span class="line">// 浏览器的配置</span><br></pre></td></tr></table></figure><h4 id="babelrc文件-配置es6转es5的一些babel-loader"><a href="#babelrc文件-配置es6转es5的一些babel-loader" class="headerlink" title=".babelrc文件(配置es6转es5的一些babel-loader)"></a>.babelrc文件(配置es6转es5的一些babel-loader)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&quot;presets&quot;: [ // 预设</span><br><span class="line">    // env——支持es5-7</span><br><span class="line">    [&quot;env&quot;, &#123;</span><br><span class="line">      &quot;modules&quot;: false, // 模块化</span><br><span class="line">      &quot;targets&quot;: &#123;</span><br><span class="line">        &quot;browsers&quot;: [&quot;&gt; 1%&quot;, &quot;last 2 versions&quot;, &quot;not ie &lt;= 8&quot;]</span><br><span class="line">      &#125;,</span><br><span class="line">    &quot;stage-2&quot; // 可使用草案2阶段的语法</span><br><span class="line">    &#125;]</span><br></pre></td></tr></table></figure><h4 id="editorconfig-编辑器配置"><a href="#editorconfig-编辑器配置" class="headerlink" title=".editorconfig(编辑器配置)"></a>.editorconfig(编辑器配置)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root = true</span><br><span class="line"></span><br><span class="line">[*]</span><br><span class="line">charset = utf-8</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line">trim_trailing_whitespace = true</span><br></pre></td></tr></table></figure><h4 id="eslintignore"><a href="#eslintignore" class="headerlink" title=".eslintignore"></a>.eslintignore</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 如果我们配置了</span><br><span class="line">build/*.js</span><br><span class="line">config/*.js</span><br><span class="line">// ESlint忽略build和config下的js文件检测</span><br></pre></td></tr></table></figure><h4 id="eslintrc-js-ESlint配置"><a href="#eslintrc-js-ESlint配置" class="headerlink" title=".eslintrc.js(ESlint配置)"></a><a href="https://github.com/vuejs/vue-cli/tree/dev/packages/%40vue/cli-plugin-eslint" target="_blank" rel="noopener">.eslintrc.js(ESlint配置)</a></h4></li></ul><h4 id="gitignore-上传git时要忽略的文件配置"><a href="#gitignore-上传git时要忽略的文件配置" class="headerlink" title=".gitignore(上传git时要忽略的文件配置)"></a>.gitignore(上传git时要忽略的文件配置)</h4>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.DS_Store</span><br><span class="line">node_modules/</span><br><span class="line">/dist/</span><br><span class="line">npm-debug.log*</span><br><span class="line">yarn-debug.log*</span><br><span class="line">yarn-error.log*</span><br><span class="line"></span><br><span class="line"># Editor directories and files</span><br><span class="line">.idea</span><br><span class="line">.vscode</span><br><span class="line">*.suo</span><br><span class="line">*.ntvs*</span><br><span class="line">*.njsproj</span><br><span class="line">*.sln</span><br></pre></td></tr></table></figure><h4 id="src-下的-main-js"><a href="#src-下的-main-js" class="headerlink" title="src 下的 main.js"></a>src 下的 main.js</h4>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span> <span class="comment">// 引入vue</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span> <span class="comment">// 引入当前文件夹下的App.vue(自动识别.vue)</span></span><br><span class="line"><span class="comment">// 这里将匿名导出(export default)的对象命名为App, 这样就引入了App组件</span></span><br><span class="line"><span class="comment">// .vue文件会被vue-loader转换文.html文件, index.js已经帮我们配置好了路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span> </span><br><span class="line"><span class="comment">// 路由 —— 引入当前目录下的router下的index.js(自动识别index.js)</span></span><br><span class="line"><span class="comment">// 将这个匿名导出的路由命名为router</span></span><br><span class="line"><span class="comment">// 在build文件夹下的webpack.base.conf.js文件内部有详细说明</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el : <span class="string">'#app'</span>,</span><br><span class="line">  router : router, <span class="comment">// 注册一个叫router的路由, 将上面的router注入</span></span><br><span class="line">  components : &#123; App &#125;, <span class="comment">// &#123; App : App &#125;</span></span><br><span class="line">  <span class="comment">// 注册了一个局部组件，注入到App里面, 然后放到template模板里面进行覆盖</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    我是App组件&#123;&#123;msg&#125;&#125;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">    &lt;!-- </span><br><span class="line">这个&lt;router-view/&gt;就会被替换掉，如下面src/router/index.js中代码所述 </span><br><span class="line">--&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/'</span>,</span><br><span class="line">      name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="在App-vue文件中就是我们熟悉的-vue语法了"><a href="#在App-vue文件中就是我们熟悉的-vue语法了" class="headerlink" title="在App.vue文件中就是我们熟悉的 vue语法了"></a>在App.vue文件中就是我们熟悉的 vue语法了</h5><p>  后续更新中&gt;&gt;&gt;&gt;&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-cli-构建工具——脚手架&quot;&gt;&lt;a href=&quot;#Vue-cli-构建工具——脚手架&quot; class=&quot;headerlink&quot; title=&quot;Vue-cli(构建工具——脚手架)&quot;&gt;&lt;/a&gt;Vue-cli(构建工具——脚手架)&lt;/h2&gt;&lt;p&gt;内部模板有已经给
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE.js" scheme="http://www.hsiliver.space/tags/VUE-js/"/>
    
      <category term="vue-cli" scheme="http://www.hsiliver.space/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>VUE声明式渲染</title>
    <link href="http://www.hsiliver.space/2019/07/08/vue-process/"/>
    <id>http://www.hsiliver.space/2019/07/08/vue-process/</id>
    <published>2019-07-08T14:34:58.000Z</published>
    <updated>2019-07-09T02:50:42.368Z</updated>
    
    <content type="html"><![CDATA[<h3 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h3><ul><li><p>命令式编程</p><p>命令“机器”如何去做事情（how），这样不管你想要的是什么（what），它都会按照你的命令实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i ++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>声明式编程</p><p>高数“机器”你想要的是什么（what），让机器想如何去做（how）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>vue就是典型的声明式编程</p></li></ul><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><ul><li><p>html模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span> = <span class="string">"&#123;box:cla&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>,</span></span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="xml">            message : '<span class="tag">&lt;<span class="name">div</span>&gt;</span>hellow world&#123;&#123;cla&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 仅仅只能解析字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 如果我们要插入dom节点的话</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 必须要通过  v-html</span></span></span><br><span class="line"><span class="javascript">            cla : <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>字符串模板</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span> = <span class="string">"&#123;box:cla&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"x/template"</span> <span class="attr">id</span>=<span class="string">"template1"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hellow world&#123;&#123;cla&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>,</span></span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="xml">            message : '<span class="tag">&lt;<span class="name">div</span>&gt;</span>hellow world&#123;&#123;cla&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">            cla : <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        template : <span class="string">"#template1"</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 会替换掉我们上面所创建的 #demo</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// template: "#template1"</span></span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>render 函数</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span> = <span class="string">"&#123;box:cla&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"x/template"</span> <span class="attr">id</span>=<span class="string">"template1"</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>hellow world&#123;&#123;cla&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>,</span></span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="xml">            message : '<span class="tag">&lt;<span class="name">div</span>&gt;</span>hellow world<span class="tag">&lt;/<span class="name">div</span>&gt;</span>',</span></span><br><span class="line"><span class="javascript">            cla : <span class="literal">true</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="comment">// 使用render函数的时候就不可以在像以前一样使用： v-for等属性；但是有其他的解决方法</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 最接近底层的模板，会更加高效，</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 但是没有 html模板 方便</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 一般写高效组件的时候才用render方法</span></span></span><br><span class="line">        render(createElement) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> dom = createElement(<span class="string">"div"</span>, &#123;</span></span><br><span class="line">                attrs: &#123;</span><br><span class="line"><span class="javascript">                    id: <span class="string">"box"</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                class: &#123;</span><br><span class="line"><span class="javascript">                    vue1: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                    vue2: <span class="literal">false</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                <span class="comment">// domProps 优先级最高，会覆盖上面的</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// domProps: &#123;</span></span></span><br><span class="line"><span class="xml">                // innerHTML: "<span class="tag">&lt;<span class="name">div</span>&gt;</span>html<span class="tag">&lt;/<span class="name">div</span>&gt;</span>"</span></span><br><span class="line"><span class="javascript">                <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 接下来的子元素将会被完全覆盖</span></span></span><br><span class="line"><span class="javascript">            &#125;, [<span class="string">"hellow"</span>, createElement(<span class="string">"p"</span>, [<span class="string">"world"</span>])])</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> dom;<span class="comment">// 渲染到页面</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h4 id="简单vue示例"><a href="#简单vue示例" class="headerlink" title="简单vue示例"></a><a href="https://github.com/z826526354/myProject/blob/master/vuejs/demo/vue-example.html" target="_blank" rel="noopener">简单vue示例</a></h4></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;声明式渲染&quot;&gt;&lt;a href=&quot;#声明式渲染&quot; class=&quot;headerlink&quot; title=&quot;声明式渲染&quot;&gt;&lt;/a&gt;声明式渲染&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;命令式编程&lt;/p&gt;
&lt;p&gt;命令“机器”如何去做事情（how），这样不管你想要的是什么（what），
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE.js" scheme="http://www.hsiliver.space/tags/VUE-js/"/>
    
  </entry>
  
  <entry>
    <title>VUE.js</title>
    <link href="http://www.hsiliver.space/2019/07/08/vue-basic/"/>
    <id>http://www.hsiliver.space/2019/07/08/vue-basic/</id>
    <published>2019-07-08T14:33:58.000Z</published>
    <updated>2019-07-09T02:47:20.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><p>官方文档：<a href="https://vuejs.org/" target="_blank" rel="noopener">https://vuejs.org/</a></p><p>中文官方文档：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><p>vue是借鉴了Angularjs和reactjs的一些思想和优点的框架</p><p>渐进式框架——根据需求来实现功能</p><p><img src="/2019/07/08/vue-basic/04.png" alt></p><h3 id="VUE的两大核心"><a href="#VUE的两大核心" class="headerlink" title="VUE的两大核心"></a>VUE的两大核心</h3><ul><li><p>响应的数据绑定</p><p>当数据发生改变时，自动更新视图</p><p>利用<a href="https://github.com/z826526354/myProject/blob/master/es6/数据劫持.md" target="_blank" rel="noopener">Object.definedProperty</a>中的getter/setter代理数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"b"</span>, &#123;</span><br><span class="line">    value : <span class="number">10</span></span><br><span class="line">    writeable : <span class="literal">false</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.b); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>视图组件</p><p>UI页面映射组件树</p><p>组件可重用，可维护</p></li></ul><h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><ul><li><p>提供一种方便的工具，是的开发效率得到保证</p></li><li><p>保证最小化的DOM操作，是的执行效率得到保证</p><p>模仿实现 h 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vEvement</span>(<span class="params">tagName, prop, children</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(<span class="keyword">this</span> <span class="keyword">instanceof</span> vEvement)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> vEvement(tagName, prop, children)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(prop) === <span class="string">"[object Array]"</span>) &#123;</span><br><span class="line">        children = prop;</span><br><span class="line">        prop = &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.tagName = tagName; <span class="comment">// 标签名</span></span><br><span class="line">    <span class="keyword">this</span>.children = children; <span class="comment">// 子节点</span></span><br><span class="line">    <span class="keyword">this</span>.prop = prop; <span class="comment">// dom节点的一些属性</span></span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span>; <span class="comment">// 记录虚拟DOM节点有多少个</span></span><br><span class="line">    <span class="keyword">this</span>.children.forEach( <span class="function"><span class="keyword">function</span>(<span class="params">child, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> vEvement) &#123;</span><br><span class="line">            count += child.count;</span><br><span class="line">        &#125;</span><br><span class="line">        count++</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">this</span>.count = count;</span><br><span class="line">&#125;</span><br><span class="line">vEvement.prototype.render = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> el = <span class="built_in">document</span>.createElement(<span class="keyword">this</span>.tagName);</span><br><span class="line">    <span class="keyword">var</span> children = <span class="keyword">this</span>.children;</span><br><span class="line">    <span class="keyword">var</span> prop = <span class="keyword">this</span>.prop;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">in</span> prop) &#123;</span><br><span class="line">        <span class="keyword">var</span> curProp = prop[item];</span><br><span class="line">        el.setAttribute(item, curProp);</span><br><span class="line">    &#125;</span><br><span class="line">    children.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">child, index</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (child <span class="keyword">instanceof</span> vEvement) &#123;</span><br><span class="line">            <span class="keyword">var</span> childDom = child.render();</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> childDom = <span class="built_in">document</span>.createTextNode(child)</span><br><span class="line">        &#125;</span><br><span class="line">        el.appendChild(childDom);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> el;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dom = vEvement(<span class="string">"div"</span>,&#123;<span class="attr">class</span>: <span class="string">"demo"</span>, <span class="attr">id</span>: <span class="string">"demo1"</span>&#125;, [<span class="string">"hello world"</span>, vEvement(<span class="string">"p"</span>, &#123;<span class="attr">class</span>: <span class="string">"demo2"</span>&#125;, [<span class="string">"我是p标签"</span>])]);</span><br><span class="line"><span class="built_in">console</span>.log(dom);</span><br><span class="line"><span class="built_in">console</span>.log(dom.render());</span><br></pre></td></tr></table></figure></li></ul><h3 id="MVVM模式"><a href="#MVVM模式" class="headerlink" title="MVVM模式"></a>MVVM模式</h3><p>M : model 数据模型</p><p>V : View 视图模板</p><p>vm : View-model视图模型（vue主要实现的地方）</p><p>当然vue并不是用了严格的mvvm模式，只是借鉴了它的一些思想</p><h3 id="VUE的运用"><a href="#VUE的运用" class="headerlink" title="VUE的运用"></a>VUE的运用</h3><ul><li><p>cdn引入</p><p>生产环境</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>  开发环境</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>npm install vue</code> NPM下载到本地</li></ul><h4 id="基础演示："><a href="#基础演示：" class="headerlink" title="基础演示："></a>基础演示：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 类似微信小程序，进行数据绑定 --&gt;</span></span><br><span class="line">        &#123;&#123;changeName&#125;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 绑定id --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:id</span>=<span class="string">"id"</span>&gt;</span>&#123;&#123;name&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 动态绑定数据, 控制dom节点的显示和隐藏 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&#123;demo2:ifClass&#125;</span> <span class="attr">v-show</span>=<span class="string">"ifShow"</span> <span class="attr">v-if</span>=<span class="string">"fShow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 列表渲染, 循环遍历 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in message"</span>&gt;</span>&#123;&#123;item.title&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 点击事件v-on:click，键盘事件(v-on:keyup...) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"click"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>, <span class="comment">// 确定Vue的作用范围——demo</span></span></span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="javascript">        name : <span class="string">"hsz"</span>,</span></span><br><span class="line"><span class="javascript">            id : <span class="string">"demo1"</span>,</span></span><br><span class="line"><span class="javascript">            ifClass : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            ifShow : <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            fShow : <span class="literal">false</span>, <span class="comment">// 删除整个dom节点了</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 从性能上考虑的话v-show更加有优势</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当然我们不频繁隐藏显示的话v-if会更适合</span></span></span><br><span class="line">            message : [&#123;</span><br><span class="line">                title : 18</span><br><span class="line">            &#125;, &#123;</span><br><span class="line">                title : 10</span><br><span class="line">            &#125;]</span><br><span class="line">    &#125;,</span><br><span class="line">        computed : &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 计算属性</span></span></span><br><span class="line"><span class="javascript">            changeName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">this</span>.name + <span class="number">123</span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监听changeName</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods : &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理函数的字段</span></span></span><br><span class="line"><span class="javascript">            click : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="number">123</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="input事件"><a href="#input事件" class="headerlink" title="input事件"></a>input事件</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 键盘事件(v-on:keyup...), .enter——回车才触发 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">:id</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"keyup"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>, <span class="comment">// 确定Vue的作用范围——demo</span></span></span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="javascript">            id : <span class="string">"demo1"</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line">        computed : &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 计算属性</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods : &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理函数的字段</span></span></span><br><span class="line"><span class="javascript">            keyup : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="number">123</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表单处理，双向数据绑定 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">:id</span>=<span class="string">"id"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"value"</span> <span class="attr">v-on:keyup</span>=<span class="string">"keyup"</span>&gt;</span>click<span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.6.10/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el : <span class="string">"#demo"</span>, <span class="comment">// 确定Vue的作用范围——demo</span></span></span><br><span class="line">        data : &#123;</span><br><span class="line"><span class="javascript">            id : <span class="string">"demo1"</span>,</span></span><br><span class="line">            value : 123</span><br><span class="line">    &#125;,</span><br><span class="line">        computed : &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 计算属性</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        methods : &#123;</span><br><span class="line"><span class="javascript">            <span class="comment">// 处理函数的字段</span></span></span><br><span class="line"><span class="javascript">            keyup : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="生命周期图"><a href="#生命周期图" class="headerlink" title="生命周期图"></a>生命周期图</h4><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt></p><h3 id="VUE命令"><a href="#VUE命令" class="headerlink" title="VUE命令"></a>VUE命令</h3><ul><li><p><code>vue --version</code>   查看版本</p></li><li><p><code>vue init</code>  快速生成VUE项目</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Vue-js&quot;&gt;&lt;a href=&quot;#Vue-js&quot; class=&quot;headerlink&quot; title=&quot;Vue.js&quot;&gt;&lt;/a&gt;Vue.js&lt;/h2&gt;&lt;p&gt;官方文档：&lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="VUE.js" scheme="http://www.hsiliver.space/tags/VUE-js/"/>
    
  </entry>
  
  <entry>
    <title>VIDEO</title>
    <link href="http://www.hsiliver.space/2019/07/08/player/"/>
    <id>http://www.hsiliver.space/2019/07/08/player/</id>
    <published>2019-07-08T14:25:58.000Z</published>
    <updated>2019-07-09T02:36:21.640Z</updated>
    
    <content type="html"><![CDATA[<h2 id="video代码"><a href="#video代码" class="headerlink" title="video代码"></a><a href="./indexVideo.html">video代码</a></h2><h4 id="演示"><a href="#演示" class="headerlink" title="演示"></a><a href="https://z826526354.github.io/myProject/H5/indexVideo.html" target="_blank" rel="noopener">演示</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;video代码&quot;&gt;&lt;a href=&quot;#video代码&quot; class=&quot;headerlink&quot; title=&quot;video代码&quot;&gt;&lt;/a&gt;&lt;a href=&quot;./indexVideo.html&quot;&gt;video代码&lt;/a&gt;&lt;/h2&gt;&lt;h4 id=&quot;演示&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="HTML5" scheme="http://www.hsiliver.space/tags/HTML5/"/>
    
      <category term="播放器" scheme="http://www.hsiliver.space/tags/%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    
      <category term="video" scheme="http://www.hsiliver.space/tags/video/"/>
    
  </entry>
  
  <entry>
    <title>SVG</title>
    <link href="http://www.hsiliver.space/2019/07/08/svg/"/>
    <id>http://www.hsiliver.space/2019/07/08/svg/</id>
    <published>2019-07-08T14:25:58.000Z</published>
    <updated>2019-07-09T02:35:08.563Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SVG"><a href="#SVG" class="headerlink" title="SVG"></a>SVG</h2><p>svg：矢量图（放大不失真），适合大面积的贴图，通常动画少或者较简单，用标签和css作图</p><p>canvas：适用于小面积绘图，适合动画</p><h4 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        line &#123;</span><br><span class="line">            stroke: black;</span><br><span class="line">            stroke-width: 3px;</span><br><span class="line"><span class="css">            <span class="selector-tag">stroke-opacity</span>: 0<span class="selector-class">.5</span>;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">fill-opacity</span>: 0<span class="selector-class">.3</span>;</span></span><br><span class="line">            stroke-linecap: square;</span><br><span class="line">            stroke-linejoin: round;</span><br><span class="line"><span class="css">            <span class="comment">/*这跟canvas的stroke功能相同*/</span></span></span><br><span class="line">            stroke-dasharray: 10px;</span><br><span class="line">            stroke-dashoffset: 10px; </span><br><span class="line"><span class="css">            <span class="comment">/*虚线，虚线偏移量*/</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"100"</span> <span class="attr">y1</span>=<span class="string">"100"</span> <span class="attr">x2</span>=<span class="string">"200"</span> <span class="attr">y2</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"50"</span> <span class="attr">y</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">rx</span>=<span class="string">"10"</span> <span class="attr">ry</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 起始位置 大小  圆角（x, y方向） —— 这些可以闭合的标签默认自带填充--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="圆、椭圆"><a href="#圆、椭圆" class="headerlink" title="圆、椭圆"></a>圆、椭圆</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">circle</span> <span class="attr">r</span>=<span class="string">"50"</span> <span class="attr">cx</span>=<span class="string">"220"</span> <span class="attr">cy</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ellipse</span> <span class="attr">rx</span>=<span class="string">"100"</span> <span class="attr">ry</span>=<span class="string">"50"</span> <span class="attr">cx</span>=<span class="string">"400"</span> <span class="attr">cy</span>=<span class="string">"150"</span>&gt;</span><span class="tag">&lt;/<span class="name">ellipse</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="折线"><a href="#折线" class="headerlink" title="折线"></a>折线</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">polyline</span> <span class="attr">points</span>=<span class="string">"300 300, 400 50, 400 100, 500 50"</span> <span class="attr">style</span>=<span class="string">"fill:transparent;stroke:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">polyline</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 直线，默认闭合填充,配合css取消填充 --&gt;</span></span><br></pre></td></tr></table></figure><h4 id="多边形、文字"><a href="#多边形、文字" class="headerlink" title="多边形、文字"></a>多边形、文字</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">polygon</span> <span class="attr">points</span>=<span class="string">"300 300, 400 50, 400 100,500 50"</span>&gt;</span><span class="tag">&lt;/<span class="name">polygon</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 闭合多边形 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">x</span>=<span class="string">"405"</span> <span class="attr">y</span>=<span class="string">"220"</span>&gt;</span>hello,world<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="path"><a href="#path" class="headerlink" title="path"></a>path</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">"M 100 200 A 60 60 0 1 1 200 200"</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 起始点：x坐标 y坐标  圆弧：x半径 y半径 旋转角度 优(劣)弧 顺(逆)时针 圆心坐标--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 大写表示绝对位置，小写表示相对位置</span></span><br><span class="line"><span class="comment">H 横向移动  V（一个参数）纵向移动   z（不分大小写）闭合区间</span></span><br><span class="line"><span class="comment">L lineTo()   A arcTo()</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"bg1"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"0"</span> <span class="attr">y2</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"0%"</span> <span class="attr">style</span>=<span class="string">"stop-color: rgb(255, 255, 0);"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"100%"</span> <span class="attr">style</span>=<span class="string">"stop-color: rgb(25, 255, 2);"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 渐变必须写在defs里面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">style</span>=<span class="string">"fill: url(#bg1)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="高斯模糊"><a href="#高斯模糊" class="headerlink" title="高斯模糊"></a>高斯模糊</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">"bg1"</span> <span class="attr">x1</span>=<span class="string">"0"</span> <span class="attr">y1</span>=<span class="string">"0"</span> <span class="attr">x2</span>=<span class="string">"0"</span> <span class="attr">y2</span>=<span class="string">"100%"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"0%"</span> <span class="attr">style</span>=<span class="string">"stop-color: rgb(255, 255, 0);"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">"100%"</span> <span class="attr">style</span>=<span class="string">"stop-color: rgb(25, 255, 2);"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">id</span>=<span class="string">"Gaussian"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">feGaussianBlur</span> <span class="attr">in</span>=<span class="string">"SourceGraphic"</span> <span class="attr">stdDeviation</span>=<span class="string">"20"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">feGaussianBlur</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 渐变必须写在defs里面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"200"</span> <span class="attr">style</span>=<span class="string">"fill: url(#bg1);filter:url(#Gaussian)"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h4 id="虚线-进度条"><a href="#虚线-进度条" class="headerlink" title="虚线 进度条"></a>虚线 进度条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        line &#123;</span><br><span class="line"><span class="css">            <span class="selector-tag">stroke</span>: <span class="selector-id">#f40</span>;</span></span><br><span class="line">            stroke-width: 10px;</span><br><span class="line"><span class="css">            <span class="comment">/*这跟canvas的stroke功能相同*/</span></span></span><br><span class="line">            stroke-dasharray: 200px;</span><br><span class="line">            stroke-dashoffset: 200px; </span><br><span class="line"><span class="css">            <span class="comment">/*虚线，虚线偏移量*/</span></span></span><br><span class="line">            animation: move 1s ease infinite alternate-reverse;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        @<span class="keyword">keyframes</span> move&#123;</span></span><br><span class="line">from&#123;</span><br><span class="line">stroke-dashoffset: 200px;</span><br><span class="line">&#125;</span><br><span class="line">to&#123;</span><br><span class="line">stroke-dashoffset: 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">"100"</span> <span class="attr">y1</span>=<span class="string">"100"</span> <span class="attr">x2</span>=<span class="string">"300"</span> <span class="attr">y2</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="可视区（比例尺）"><a href="#可视区（比例尺）" class="headerlink" title="可视区（比例尺）"></a>可视区（比例尺）</h4><p>viewbox</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">width</span>=<span class="string">"500"</span> <span class="attr">height</span>=<span class="string">"500"</span> <span class="attr">viewBox</span>=<span class="string">"0, 0, 250, 250"</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 现在已经发大了2倍 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">rect</span> <span class="attr">height</span>=<span class="string">"50"</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">x</span>=<span class="string">"0"</span> <span class="attr">y</span>=<span class="string">"0"</span> <span class="attr">rx</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SVG&quot;&gt;&lt;a href=&quot;#SVG&quot; class=&quot;headerlink&quot; title=&quot;SVG&quot;&gt;&lt;/a&gt;SVG&lt;/h2&gt;&lt;p&gt;svg：矢量图（放大不失真），适合大面积的贴图，通常动画少或者较简单，用标签和css作图&lt;/p&gt;
&lt;p&gt;canvas：适用于小面积绘
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="HTML5" scheme="http://www.hsiliver.space/tags/HTML5/"/>
    
      <category term="svg" scheme="http://www.hsiliver.space/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>canvas</title>
    <link href="http://www.hsiliver.space/2019/07/08/canvas/"/>
    <id>http://www.hsiliver.space/2019/07/08/canvas/</id>
    <published>2019-07-08T14:23:58.000Z</published>
    <updated>2019-07-09T02:43:54.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h2><p>定义一个canvas的画布大小必须要在行间样式上定义，我们在<code>&lt;style&gt;&lt;/style&gt;</code>里面定义的只是canvas的一个科室范围并不是画布大小</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">#can &#123;</span><br><span class="line">/*定义canvas的可视范围*/</span><br><span class="line">width: 500px;</span><br><span class="line">height: 300px;</span><br><span class="line">border: 1px solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"can"</span> <span class="attr">width</span>=<span class="string">"500px"</span> <span class="attr">height</span>=<span class="string">"300px"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> can = <span class="built_in">document</span>.getElementById(<span class="string">'can'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript"><span class="comment">// 在canvas上建立2d坐标系</span></span></span><br><span class="line"><span class="javascript">ctx.beginPath(); <span class="comment">// 开始之前建议加上这个</span></span></span><br><span class="line"><span class="javascript">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>); <span class="comment">// 起点（落笔点）</span></span></span><br><span class="line"><span class="javascript">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>); <span class="comment">// 到200， 100坐标点</span></span></span><br><span class="line"><span class="javascript">        ctx.lineWidth = <span class="number">10</span>; <span class="comment">// 线宽（无论写在哪都相当于写在最前面）</span></span></span><br><span class="line"><span class="javascript">        ctx.closePath(); <span class="comment">// 闭合（针对一笔来说的）</span></span></span><br><span class="line"><span class="javascript">        ctx.fill();  <span class="comment">// 填充</span></span></span><br><span class="line"><span class="javascript">ctx.stroke(); <span class="comment">// 将画笔抬起来（结束，之后才开始渲染页面）</span></span></span><br><span class="line">        </span><br><span class="line"><span class="javascript">        ctx.beginPath(); <span class="comment">// 重新开启一个路径（重新落笔）</span></span></span><br><span class="line"><span class="javascript">        ctx.lineWidth = <span class="number">5</span>; <span class="comment">// 此时画笔粗细就可以改为5了</span></span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="矩形"><a href="#矩形" class="headerlink" title="矩形"></a>矩形</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> can = <span class="built_in">document</span>.getElementById(<span class="string">'can'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.rect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 起点坐标X，起点坐标Y，宽度，高度</span></span><br><span class="line">ctx.stroke();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以简写为这样</span></span><br><span class="line">ctx.strokeRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line">ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"><span class="comment">//橡皮檫（起点X，起点Y，宽， 高）</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> can = <span class="built_in">document</span>.getElementById(<span class="string">'can'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI / <span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// （圆心起点X， 圆心起点Y，半径，起始弧度，终止弧度，[顺]逆时针） </span></span><br><span class="line"><span class="comment">// 最后的 0 代表顺时针旋转，如果是 1 代表逆时针旋转； </span></span><br><span class="line">ctx.closePath();</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h4 id="圆角矩形"><a href="#圆角矩形" class="headerlink" title="圆角矩形"></a>圆角矩形</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> can = <span class="built_in">document</span>.getElementById(<span class="string">'can'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">"2d"</span>); </span><br><span class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">110</span>); </span><br><span class="line"><span class="comment">// 设置110是因为要让出圆角的位置</span></span><br><span class="line">ctx.arcTo(<span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">// B(x, y), C(x, y)[只是提供一个方向], 圆角大小</span></span><br><span class="line">ctx.arcTo(<span class="number">200</span>, <span class="number">200</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">ctx.arcTo(<span class="number">200</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">10</span>);</span><br><span class="line">ctx.arcTo(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">10</span>);</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h4 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h4><p>二次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> can = <span class="built_in">document</span>.getElementById(<span class="string">'can'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = can.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.beginPath()</span><br><span class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.quadraticCurveTo(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">100</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>三次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> can = <span class="built_in">document</span>.getElementById(<span class="string">'can'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = can.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">ctx.beginPath()</span><br><span class="line">ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">ctx.bezierCurveTo(<span class="number">200</span>, <span class="number">200</span>, <span class="number">300</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">200</span>)</span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><h4 id="小波浪"><a href="#小波浪" class="headerlink" title="小波浪"></a>小波浪</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> can = <span class="built_in">document</span>.getElementById(<span class="string">'can'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = can.getContext(<span class="string">"2d"</span>);</span><br><span class="line"><span class="comment">// 在canvas上建立2d坐标系</span></span><br><span class="line"><span class="keyword">var</span> width = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">var</span> height = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">var</span> offset = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">300</span>);</span><br><span class="line">    ctx.beginPath();</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(<span class="number">0</span> + offset - <span class="number">500</span>, height / <span class="number">2</span>);</span><br><span class="line">    ctx.quadraticCurveTo(width / <span class="number">4</span> + offset - <span class="number">500</span>, height / <span class="number">2</span> + <span class="built_in">Math</span>.sin(num) * <span class="number">120</span>, width / <span class="number">2</span> + offset - <span class="number">500</span>, height / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ctx.quadraticCurveTo(width / <span class="number">4</span> * <span class="number">3</span> + offset - <span class="number">500</span>, height / <span class="number">2</span> - <span class="built_in">Math</span>.sin(num) * <span class="number">120</span>, width + offset - <span class="number">500</span>, height / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ctx.moveTo(<span class="number">0</span> + offset, height / <span class="number">2</span>);</span><br><span class="line">    ctx.quadraticCurveTo(width / <span class="number">4</span> + offset, height / <span class="number">2</span> + <span class="built_in">Math</span>.sin(num) * <span class="number">120</span>, width / <span class="number">2</span> + offset, height / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    ctx.quadraticCurveTo(width / <span class="number">4</span> * <span class="number">3</span> + offset, height / <span class="number">2</span> - <span class="built_in">Math</span>.sin(num) * <span class="number">120</span>, width + offset, height / <span class="number">2</span>);</span><br><span class="line">    ctx.stroke();</span><br><span class="line">    offset += <span class="number">5</span>;</span><br><span class="line">    offset %= <span class="number">500</span>;</span><br><span class="line">    num += <span class="number">0.01</span>;</span><br><span class="line">&#125;, <span class="number">1000</span> / <span class="number">30</span>)</span><br></pre></td></tr></table></figure><p><a href="https://github.com/z826526354/myProject/blob/master/H5/demo2.html" target="_blank" rel="noopener">示例演示</a>：  </p><p><img src="/2019/07/08/canvas/GIF3.gif" alt></p><h4 id="旋转、缩放"><a href="#旋转、缩放" class="headerlink" title="旋转、缩放"></a>旋转、缩放</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.rotate(<span class="built_in">Math</span>.PI / <span class="number">6</span>);</span><br><span class="line"><span class="comment">// 以ctx坐标系为原点旋转（全局的）</span></span><br><span class="line"></span><br><span class="line">ctx.translate(<span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"><span class="comment">// 平移坐标系原点到100， 100（全局的）</span></span><br><span class="line"></span><br><span class="line">ctx.scale(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 整个画布横纵坐标都放大2倍</span></span><br></pre></td></tr></table></figure><h4 id="保存、还原"><a href="#保存、还原" class="headerlink" title="保存、还原"></a>保存、还原</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.save();</span><br><span class="line"><span class="comment">// 保存这个状态（一般用于要旋转或者改变原点坐标之前）</span></span><br><span class="line"></span><br><span class="line">ctx.restore();</span><br><span class="line"><span class="comment">// 还原上次保存点的状态</span></span><br></pre></td></tr></table></figure><h4 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">"./xxx.jpg"</span>; <span class="comment">// src异步加载</span></span><br><span class="line">img..onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.beginPath();</span><br><span class="line">    <span class="keyword">var</span> bg = ctx.createPattern(img, <span class="string">"no-repeat"</span>);</span><br><span class="line">    <span class="comment">// 创建纹理</span></span><br><span class="line">    <span class="comment">// ctx.fillStyle = "orange"; // 填充颜色</span></span><br><span class="line">    ctx.translate(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    ctx.fillStyle = bg; <span class="comment">// 从坐标系原点开始填充</span></span><br><span class="line">    ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath()</span><br><span class="line"><span class="keyword">var</span> bg = ctx.createLinearGradient(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">bg.addColorStop(<span class="number">0.1</span>, <span class="string">'red'</span>);</span><br><span class="line">bg.addColorStop(<span class="number">0.5</span>, <span class="string">'green'</span>);</span><br><span class="line">bg.addColorStop(<span class="number">1</span>, <span class="string">'yellow'</span>);</span><br><span class="line">ctx.fillStyle = bg; </span><br><span class="line"><span class="comment">// 渐变点也是从画布原点开始的</span></span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>)</span><br></pre></td></tr></table></figure><h4 id="辐射渐变"><a href="#辐射渐变" class="headerlink" title="辐射渐变"></a>辐射渐变</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bg = ctx.createRadialGradient(<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">bg.addColorStop(<span class="number">0.1</span>, <span class="string">'red'</span>);</span><br><span class="line">bg.addColorStop(<span class="number">0.5</span>, <span class="string">'green'</span>);</span><br><span class="line">bg.addColorStop(<span class="number">1</span>, <span class="string">'yellow'</span>);</span><br><span class="line">ctx.fillStyle = bg;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><h4 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.shadowColor = <span class="string">"black"</span>;</span><br><span class="line">ctx.shadowBlur = <span class="number">30</span>; <span class="comment">// 扩散值</span></span><br><span class="line">ctx.shadowOffsetX = <span class="number">15</span>; <span class="comment">// x轴的阴影偏移量</span></span><br><span class="line">ctx.strokeRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/canvas/1212.PNG" alt></p><h4 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line"></span><br><span class="line">ctx.font = <span class="string">'30px Arail'</span></span><br><span class="line">ctx.strokeText(<span class="string">'hsz'</span>, <span class="number">200</span>, <span class="number">200</span>); <span class="comment">// 文字描边（空心）</span></span><br><span class="line">ctx.fillText(<span class="string">'hahah'</span>, <span class="number">200</span>, <span class="number">400</span>); <span class="comment">// 文字填充（实心）</span></span><br></pre></td></tr></table></figure><h4 id="线两端样式"><a href="#线两端样式" class="headerlink" title="线两端样式"></a>线两端样式</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.lineCap = <span class="string">'butt'</span>; <span class="comment">// 默认butt，square两端加上小方块，round两端加小半圆</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ctx.beginPath();</span><br><span class="line">ctx.lineWidth = <span class="number">20</span>;</span><br><span class="line">ctx.lineCap = <span class="string">'round'</span></span><br><span class="line">ctx.moveTo(<span class="number">110</span>, <span class="number">30</span>);</span><br><span class="line">ctx.lineTo(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">ctx.lineTo(<span class="number">110</span>, <span class="number">180</span>);</span><br><span class="line">ctx.lineJoin = <span class="string">"round"</span>;</span><br><span class="line"><span class="comment">// 默认miter 但是角度很小的时候会呈现被砍断状态"bevel"</span></span><br><span class="line"><span class="comment">// 当为miter时，可以限制尖尖（miterLimit=xx 属性）</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/canvas/jian.PNG" alt></p><h4 id="获取图片转换为像素点"><a href="#获取图片转换为像素点" class="headerlink" title="获取图片转换为像素点"></a>获取图片转换为像素点</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">'./xx.jpg'</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    ctx.drawImage(img, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">    <span class="keyword">var</span> data = oCanvas.toDataURL();</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="comment">// 受同源策略的限制（要开启服务器）</span></span><br><span class="line">    <span class="keyword">var</span> info = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>);<span class="comment">// 获取像素点信息</span></span><br><span class="line">    <span class="built_in">console</span>.log(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="canvas-转为编码"><a href="#canvas-转为编码" class="headerlink" title="canvas 转为编码"></a>canvas 转为编码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">'./111.jpeg'</span>;</span><br><span class="line">img.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">ctx.drawImage(img, <span class="number">100</span>, <span class="number">100</span>, <span class="number">400</span>, <span class="number">400</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line"><span class="keyword">var</span> data = oCanvas.toDataURL();</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br><span class="line"><span class="comment">// 受同源策略的限制（要开启服务器）</span></span><br><span class="line"><span class="keyword">var</span> info = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, <span class="number">500</span>, <span class="number">500</span>);<span class="comment">// 获取像素点信息</span></span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Canvas&quot;&gt;&lt;a href=&quot;#Canvas&quot; class=&quot;headerlink&quot; title=&quot;Canvas&quot;&gt;&lt;/a&gt;Canvas&lt;/h2&gt;&lt;p&gt;定义一个canvas的画布大小必须要在行间样式上定义，我们在&lt;code&gt;&amp;lt;style&amp;gt;&amp;lt;/
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="HTML5" scheme="http://www.hsiliver.space/tags/HTML5/"/>
    
      <category term="canvas绘制" scheme="http://www.hsiliver.space/tags/canvas%E7%BB%98%E5%88%B6/"/>
    
      <category term="贝塞尔曲线" scheme="http://www.hsiliver.space/tags/%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 标签篇</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E6%A0%87%E7%AD%BE%E7%AF%87/"/>
    <id>http://www.hsiliver.space/2019/07/08/标签篇/</id>
    <published>2019-07-08T14:20:58.000Z</published>
    <updated>2019-07-09T02:28:27.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标签篇"><a href="#标签篇" class="headerlink" title="标签篇"></a>标签篇</h2><p>我们用div可以写一整个页面，但是我们可以语义化标签，让维护变得更高效</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    下面的这些标签本质上全是div，只是语义化了而已</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>尾部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>内容部<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    文章，可以被引用拿走的</span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>段落式的，但事实上这俩并不用分的那么清楚<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">一般用作管理页面的侧边栏</span><br><span class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>canvas  ( 画板 )</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span>详情在下一篇<span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标签篇&quot;&gt;&lt;a href=&quot;#标签篇&quot; class=&quot;headerlink&quot; title=&quot;标签篇&quot;&gt;&lt;/a&gt;标签篇&lt;/h2&gt;&lt;p&gt;我们用div可以写一整个页面，但是我们可以语义化标签，让维护变得更高效&lt;/p&gt;
&lt;figure class=&quot;highlight h
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="HTML5" scheme="http://www.hsiliver.space/tags/HTML5/"/>
    
      <category term="canvas" scheme="http://www.hsiliver.space/tags/canvas/"/>
    
      <category term="标签" scheme="http://www.hsiliver.space/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 属性篇</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E5%B1%9E%E6%80%A7%E7%AF%87/"/>
    <id>http://www.hsiliver.space/2019/07/08/属性篇/</id>
    <published>2019-07-08T14:19:58.000Z</published>
    <updated>2019-07-09T02:42:21.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="属性篇"><a href="#属性篇" class="headerlink" title="属性篇"></a>属性篇</h2><ul><li>placeholder</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">placeholder</span>=<span class="string">"用户名/手机/邮箱"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"请输入密码"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/属性篇/mi.PNG" alt="密码用户名"></p><ul><li>radio、check、file</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/属性篇/wen.PNG" alt="选择、文件"></p><ul><li>Calendar类( 需要form表单 )</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兼容性不好，目前只有Chrom支持，所以不常用 --&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/属性篇/39.png" alt="Calendar"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"time"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"week"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"datetime-local"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兼容性不好，目前只有Chrom支持，所以不常用 --&gt;</span></span><br></pre></td></tr></table></figure><p>time<img src="/2019/07/08/属性篇/time.PNG" alt></p><p>week<img src="/2019/07/08/属性篇/49.png" alt></p><p>datetime-local<img src="/2019/07/08/属性篇/23.png" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兼容性不好, Safari, IE 不支持 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 输入必须带 @ 兼容性不好, Safari, IE不支持， 谷歌火狐支持 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 颜色选择器 兼容性不好, Safari, IE不支持 谷歌支持--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"100"</span> <span class="attr">name</span>=<span class="string">range</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兼容性不好, 火狐, IE不支持 谷歌火狐支持 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 搜索记忆功能 兼容性不好, Safari支持一点, IE不支持 谷歌火狐支持 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 必须填完整网址 兼容性不好, Safari, IE不支持 谷歌火狐支持 --&gt;</span></span><br></pre></td></tr></table></figure><p>只能输入数字<img src="/2019/07/08/属性篇/26.png" alt></p><p>range <img src="/2019/07/08/属性篇/range.PNG" alt></p><ul><li><p>contenteditable</p><p>将文本内容转为可写，兼容性良好，并且可以继承，父级有子集也会有。</p><p>但是子集也可以设置为false（不可写），虽然内部不可以编辑，但是在父级内部，自己外部， 依然是可以编辑的</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">contenteditable</span>=<span class="string">"true"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/属性篇/314.png" alt></p><ul><li><p>Draggable  ( 可拖拽的 )</p><p>a、img标签默认可拖拽</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"able"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 兼容性不好  谷歌Safari支持 </span></span><br><span class="line"><span class="comment">拖拽的生命周期（拖拽的组成）</span></span><br><span class="line"><span class="comment">1. 拖拽开始，拖拽进行中，拖拽结束</span></span><br><span class="line"><span class="comment">2. 被拖拽的物体，目标区域</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oDragDiv = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'able'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> beginX = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> beginY = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    oDragDiv.ondragstart = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 按下物体的瞬间是不会触发ondragstart事件的，移动开始的瞬间才开始触发</span></span></span><br><span class="line">        beginX = e.clientX;</span><br><span class="line">        beginY = e.clientY;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    oDragDiv.ondrag = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 移动事件</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    oDragDiv.ondragend = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 结束事件</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> X = e.clientX - beginX;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> Y = e.clientY - beginY;</span></span><br><span class="line"><span class="javascript">        oDragDiv.style.left = oDragDiv.offsetLeft + X + <span class="string">'px'</span>;</span></span><br><span class="line"><span class="javascript">        oDragDiv.style.top = oDragDiv.offsetTop + Y + <span class="string">'px'</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// offsetLeft 获取的是相对于父对象的左边距</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// pageX、pageY跟clientX和clientY类似，是相对于浏览器文档的坐标；</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/属性篇/GIF.gif" alt></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css"><span class="selector-class">.abled</span>&#123;</span></span><br><span class="line">margin: 50px 0px 0px 100px;</span><br><span class="line">width: 140px;</span><br><span class="line">height: 170px;</span><br><span class="line">border: 2px solid black;</span><br><span class="line">border-radius: 3px;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line">ul&#123;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">li&#123;</span><br><span class="line">list-style: none;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 40px;</span><br><span class="line">margin: 10px auto;</span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-id">#2FBDDF</span>;</span></span><br><span class="line">border-radius: 5px;</span><br><span class="line"><span class="css"><span class="selector-tag">transition</span>: <span class="selector-tag">all</span> 0<span class="selector-class">.3s</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-tag">li</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="css"><span class="selector-tag">box-shadow</span>: 0<span class="selector-tag">px</span> 0<span class="selector-tag">px</span> 10<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.5</span>);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="css"><span class="selector-class">.target</span>&#123;</span></span><br><span class="line">margin-left: 100px;</span><br><span class="line">width: 140px;</span><br><span class="line">height: 170px;</span><br><span class="line">border: 2px solid black;</span><br><span class="line">border-radius: 3px;</span><br><span class="line">display: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"abled"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"target"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">1. 所有的标签元素，当拖拽结束时，默认事件是回到原处</span></span><br><span class="line"><span class="comment">2. 事件是由行为触发的，一个行为可以不止触发一个事件</span></span><br><span class="line"><span class="comment">3. ondragover ==&gt; 回到原处 ==&gt; 执行drop事件</span></span><br><span class="line"><span class="comment">   A-&gt;B(阻止默认事件)-&gt;c（才可以执行）</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> dragDom;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> liList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; liList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">        liList[i].setAttribute(<span class="string">'draggable'</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">        liList[i].ondragstart = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">            dragDom = e.target;</span><br><span class="line"><span class="javascript">            e.dataTransfer.effectAllowed = <span class="string">"move"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置拖拽时的鼠标样式 只能在ondragstart里面使用 不常用</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oTarget = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'target'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    oTarget.ondragover = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    oTarget.ondrop = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">        oTarget.appendChild(dragDom);</span><br><span class="line"><span class="javascript">        dragDom = <span class="literal">null</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> abled = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'abled'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    abled.ondragover = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    abled.ondrop = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span></span><br><span class="line">        abled.appendChild(dragDom);</span><br><span class="line"><span class="javascript">        dragDom = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">        e.dataTransfer.dropEffect = <span class="string">"copy"</span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 设置拖拽放下时的鼠标样式 只能在ondrop里面使用  不常用</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 释放目标时触发的事件:</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// ondragenter - 当被鼠标拖动的对象进入其容器范围内时触发此事件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// ondragover - 当某被拖动的对象在另一对象容器范围内拖动时触发此事件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// ondragleave - 当被鼠标拖动的对象离开其容器范围内时触发此事件</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// ondrop - 在一个拖动过程中，释放鼠标键时触发此事件</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/属性篇/GIF2.gif" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;属性篇&quot;&gt;&lt;a href=&quot;#属性篇&quot; class=&quot;headerlink&quot; title=&quot;属性篇&quot;&gt;&lt;/a&gt;属性篇&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;placeholder&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="HTML5" scheme="http://www.hsiliver.space/tags/HTML5/"/>
    
      <category term="属性" scheme="http://www.hsiliver.space/tags/%E5%B1%9E%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>HTML 5大纲目录</title>
    <link href="http://www.hsiliver.space/2019/07/08/h5%E7%9B%AE%E5%BD%95/"/>
    <id>http://www.hsiliver.space/2019/07/08/h5目录/</id>
    <published>2019-07-08T14:10:58.000Z</published>
    <updated>2019-07-09T02:24:35.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTML-5大纲目录"><a href="#HTML-5大纲目录" class="headerlink" title="HTML 5大纲目录"></a>HTML 5大纲目录</h2><ul><li><h4 id="1-新增的属性"><a href="#1-新增的属性" class="headerlink" title="1 新增的属性"></a>1 <a href="https://github.com/z826526354/myProject/blob/master/H5/属性篇.md" target="_blank" rel="noopener">新增的属性</a></h4><p>placeholder</p><p>Calendar， data， time， email， url， search</p><p>ContenEditable（标签内容是否可编辑）</p><p>Draggable（是否可拖拽）</p><p>Hidden（是否可隐藏）</p><p>Content-menu</p><p>Data-Val（自定义属性）</p></li></ul><ul><li><h4 id="2-新增的标签"><a href="#2-新增的标签" class="headerlink" title="2 新增的标签"></a>2 <a href="https://github.com/z826526354/myProject/blob/master/H5/标签篇.md" target="_blank" rel="noopener">新增的标签</a></h4><p>语义化标签（一群类似div的功能）</p><p><a href="https://github.com/z826526354/myProject/blob/master/H5/canvas.md" target="_blank" rel="noopener">canvas（画板）</a></p><p><a href="https://github.com/z826526354/myProject/blob/master/H5/svg.md" target="_blank" rel="noopener">svg（画板）</a></p><p>Audio（声音播放）</p><p><a href="https://github.com/z826526354/myProject/blob/master/H5/player.md" target="_blank" rel="noopener">Video（视频播放）</a></p></li></ul><ul><li><h4 id="3-API"><a href="#3-API" class="headerlink" title="3 API"></a><a href="https://github.com/z826526354/myProject/blob/master/H5/API篇.md" target="_blank" rel="noopener">3 API</a></h4><p>定位（需要地理位置的功能）</p><p>重力感应（陀螺仪）</p><p>request-animation-frame（动画优化）</p><p>History（控制当前页面的历史记录）</p><p>LocalStorage，SessionStorage（储存信息，比如历史最高纪录）</p><p>WebSocket（在线聊天，聊天室）</p><p>FileReader（文件读取，预览）</p><p>WebWorker（文件的异步，提升性能，提升交互体验）</p><p>Fetch（传说中要替代Ajax的东西）</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HTML-5大纲目录&quot;&gt;&lt;a href=&quot;#HTML-5大纲目录&quot; class=&quot;headerlink&quot; title=&quot;HTML 5大纲目录&quot;&gt;&lt;/a&gt;HTML 5大纲目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;1-新增的属性&quot;&gt;&lt;a href=&quot;#1-新增的
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="html" scheme="http://www.hsiliver.space/tags/html/"/>
    
      <category term="HTML5" scheme="http://www.hsiliver.space/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://www.hsiliver.space/2019/07/08/正则表达式/</id>
    <published>2019-07-08T14:05:58.000Z</published>
    <updated>2019-07-09T02:08:29.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择</p><ul><li><p>最基本用法：</p><p>转移字符 “ \ “ : 会把 \ 后面的字符转为文本</p><p>“ \n “ : 回车键</p><p>“ \r “ : 该文本行结束</p><p>“ \t “ : 一个tab（制表符缩进）</p></li><li><p>两种创建方式</p><p>直接量(常用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>;  <span class="comment">// 定义一个匹配abc的规则</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line">reg.test(str); <span class="comment">// 测试方法：是否符合上面的reg规则</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/i</span>; <span class="comment">// 忽视大小写（ignoreCase）</span></span><br></pre></td></tr></table></figure></li></ul><p>  <code>new RegExp();</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>, <span class="string">'i'</span>);第二个值填匹配规则</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ABCD'</span>;</span><br><span class="line">reg.test(str);</span><br><span class="line"><span class="comment">// 效果同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(reg)</span><br><span class="line"><span class="comment">// reg1跟reg内容相同，但本质上不是同一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="built_in">RegExp</span>(reg);</span><br><span class="line"><span class="comment">// reg跟reg2内容相同， 并且本质上是同一个人（当然也没什么人这么用）</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abbababab"</span>;</span><br><span class="line">str.match(reg); <span class="comment">// 返回["ab"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果全局匹配</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/g</span>;</span><br><span class="line"><span class="comment">// 返回的就是所有的匹配正确的 ["ab", "ab", "ab", "ab"]</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/g</span>; <span class="comment">// 匹配全局 以a开头 的所有符合要求的 ["a"]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abcde\na"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/gm</span>; <span class="comment">// m具有匹配多行的功能，["a", "a"]</span></span><br></pre></td></tr></table></figure><ul><li><p>两种常用的方法</p><p><code>reg.test()</code>：返回值只有true、false</p><p><code>str.match()</code> ： 返回具体匹配的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我们需要匹配多位的时候，就可以使用表达式“[]”了,里面填可以取到的范围</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[1234567890][1234567890][1234567890]/g</span>;</span><br><span class="line"><span class="comment">// 还可以偷懒写 [0-9A-z], 正则也是符合ASCLL码匹配的</span></span><br><span class="line"><span class="comment">// 全局匹配连着3位是数字0-9的符合要求的</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123adsdaf45730258afdgw"</span>;</span><br><span class="line"><span class="comment">// ["123", "457", "302"]</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(abc|bcd)/g</span>; <span class="comment">// 全局匹配abc或bcd，正则里的 “|” 代表或</span></span><br></pre></td></tr></table></figure><ul><li><p>元字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/g</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/\w === [0-9A-z_];</span></span><br><span class="line"><span class="comment">\W === [^\w]; ==&gt;[非\w]</span></span><br><span class="line"><span class="comment">\d === [0-9];</span></span><br><span class="line"><span class="comment">\D === [^\d];</span></span><br><span class="line"><span class="comment">同时表达式里面也是可以写元字符的 var reg = /[\w]/g</span></span><br><span class="line"><span class="comment">\s === [空白字符] ==&gt; </span></span><br><span class="line"><span class="comment">空格( )，回车(\r)， 制表(\t)，换行(\n)，垂直换行(\v)，换页(\f)</span></span><br><span class="line"><span class="comment">\S === [^\s];</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bcde\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc cde fgh"</span>;</span><br><span class="line"><span class="comment">// ["cde"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \b === 单词边界</span></span><br><span class="line"><span class="comment">// \B === 非单词边界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[\u0000-\uffff]/g</span>; <span class="comment">// 匹配所有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . === [^\r\n];</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+/g</span>;</span><br><span class="line"><span class="comment">// 全局匹配 \w "可以" 出现无数次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// n+ ==&gt; &#123;1, infinity&#125;</span></span><br><span class="line"><span class="comment">// n* ==&gt; &#123;0, infinity&#125;</span></span><br><span class="line"><span class="comment">// 贪婪匹配原则</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w*/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>; <span class="comment">// ["abc", ""]</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d*/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>; <span class="comment">// ["", "", "", ""]</span></span><br><span class="line"><span class="comment">// 不能识别的就用会空代表</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w?/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aaa"</span>;<span class="comment">// ["a", "a", "a", ""]</span></span><br><span class="line"><span class="comment">// n? ==&gt; &#123;0, 1&#125;</span></span><br><span class="line"><span class="comment">// n&#123;x, &#125; ==&gt; &#123;x, infinity&#125;</span></span><br><span class="line"><span class="comment">// 贪婪匹配原则</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w&#123;1, 3&#125;/g</span>; <span class="comment">// 全局匹配1-3个</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaa"</span>; <span class="comment">// ["aaa", "a"];</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^sd$/g</span>; <span class="comment">// 以sd开头，以sd结尾</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"sd"</span>; <span class="comment">// ["sd"]</span></span><br><span class="line"><span class="comment">// n$ ==&gt; 以什么结尾</span></span><br><span class="line"><span class="comment">// ^n ==&gt; 以什么开头</span></span><br></pre></td></tr></table></figure><p>  检验一个字符串，首尾是否含有数字的 正则表达式</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d|\d$/</span>;</span><br><span class="line"><span class="comment">// 首尾都有数字 var reg = /^\d[\s\S]*\d$/</span></span><br></pre></td></tr></table></figure><ul><li><p><code>reg.exec()</code>和<code>reg.lastIndex</code>(鼠标游标位置)，两者是相互配合使用的</p><p>如果不加 <code>g</code> 的话，lastIndex不会变，不动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abababab"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 2 ["ab", index: 0, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 4 ["ab", index: 2, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 6 ["ab", index: 4, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 8 ["ab", index: 6, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 0 null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 2 ["ab", index: 0, input: "abababab", groups: undefined]</span></span><br></pre></td></tr></table></figure></li><li><p><code>()</code>的记录功能</p><p>加上括号后括号就会记录里面的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> str = <span class="string">'aaaa'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1/g</span>;</span><br><span class="line">  <span class="comment">// 全局匹配 \w\w , \1（反向引用）类似复制一个与第一个子表达式一样的匹配表达式</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// ["aabb", "a", "b", index: 0, input: "aaaa", groups: undefined]</span></span><br><span class="line"><span class="comment">// 多出来的两位就是 第一个子表达式和第二个子表达式匹配的内容，而且这两位是正式的数据位</span></span><br></pre></td></tr></table></figure><p>  <code>str.match()</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ["aabb", "a", "b", index: 0, input: "aaaa", groups: undefined]</span></span><br><span class="line"><span class="comment">// 不加 全局g 的情况下， 返回的结果跟reg的exec方法类似</span></span><br><span class="line"><span class="comment">// 一旦加了g 返回 ["aabb"];</span></span><br></pre></td></tr></table></figure><p>  <code>str.search()</code>返回匹配到的位置</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^bcd$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(reg)); </span><br><span class="line"><span class="comment">// 一旦匹配不到就返回 -1；</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/bb$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(reg1)); <span class="comment">// 2 "0 a 1 a 2 b 3 b 4",第二位匹配到</span></span><br></pre></td></tr></table></figure><p>  <code>str.split()</code>拆开，这个我们很熟悉，不过多解释</p><p>  <code>str.replace()</code> 替换</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常的replace:</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aa"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">"a"</span>, <span class="string">"b"</span>)); <span class="comment">// ba, 这就是非正则的缺陷，只能匹配1个</span></span><br><span class="line"><span class="comment">// 再来换成正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg));  <span class="comment">// ba ，因为没有写 g（全局）</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg1)); <span class="comment">// bb</span></span><br></pre></td></tr></table></figure><p>  eg : 形如 aabb 的都倒过来</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="string">"$2$2$1$1"</span>)); <span class="comment">// 方法1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span>, $<span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个参数是正则表达式匹配的结果,</span></span><br><span class="line">    <span class="comment">// 第二个参数是第一个子表达式匹配的内容，</span></span><br><span class="line">    <span class="comment">// 第三个参数是第二个子表达式匹配的内容，</span></span><br><span class="line">    <span class="keyword">return</span> $<span class="number">2</span> + $<span class="number">2</span> + $<span class="number">1</span> + $<span class="number">1</span>;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// str.toUpperCase(),变大写</span></span><br><span class="line"><span class="comment">// str.toLowerCase(),变小写</span></span><br></pre></td></tr></table></figure><p>  eg : the-first-name ===&gt; theFirstName</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/-(\w)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"the-first-name"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">1.</span>toUpperCase();</span><br><span class="line">    <span class="comment">// 里面的function是多次执行的</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 可以制作在线翻译功能</span></span><br></pre></td></tr></table></figure><h5 id="正向预查，-正向断言"><a href="#正向预查，-正向断言" class="headerlink" title="正向预查， 正向断言"></a>正向预查， 正向断言</h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abaaaaa"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a(?=b)/g</span>; <span class="comment">// 全局匹配后面有 b 的 a</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)); <span class="comment">// a</span></span><br><span class="line"><span class="comment">// 意思是这个b参与匹配限定，但是不参与返回结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a(?!b)/g</span>; <span class="comment">// 全局匹配后面没有 b 的 a ==&gt; 非正向预查</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">// ["a", "a", "a", "a", "a"];</span></span><br></pre></td></tr></table></figure><p>  非贪婪匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaa"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a+/g</span>; <span class="comment">// 贪婪</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/a+?/g</span> <span class="comment">// 非贪婪</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/a&#123;1, 3&#125;?/g</span>;  <span class="comment">// 有1绝对不取3，？可以打破任何规则</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/a??/g</span>; <span class="comment">// 能取0就不会取1， a? 匹配 0 ~ 1 位a</span></span><br></pre></td></tr></table></figure><p>百度2014最后一道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"10000000000"</span>; <span class="comment">// 转换为形如 1,000,000,000</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ ==&gt; 从后往前查</span></span><br><span class="line"><span class="comment">n+ ==&gt; &#123;1, infinity&#125;</span></span><br><span class="line"><span class="comment">\d ==&gt; &#123;0-9&#125;</span></span><br><span class="line"><span class="comment">\B ==&gt; 非单词边界</span></span><br><span class="line"><span class="comment">？= ==&gt; 参与匹配限定，但是不参与返回结果</span></span><br><span class="line"><span class="comment">()前面什么也不填 ==&gt; 匹配空</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">str.replace(reg, <span class="string">"."</span>);</span><br><span class="line"><span class="comment">// 空替换为 "."</span></span><br></pre></td></tr></table></figure><p>去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaaabbbbbccccc"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1*/g</span>;</span><br><span class="line"><span class="comment">// n* ==&gt; &#123;0~infinity&#125;;</span></span><br><span class="line"><span class="comment">// 匹配所有 0到多个 ： ["aaaaa", "bbbbb", "ccccc"]</span></span><br><span class="line">str.replace(reg, <span class="string">"$1"</span>);</span><br><span class="line"><span class="comment">// 将匹配到的替换成第一个子表达式</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最基本用法：&lt;/p&gt;
&lt;p&gt;转移
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="正则表达式" scheme="http://www.hsiliver.space/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://www.hsiliver.space/2019/07/08/JSON/"/>
    <id>http://www.hsiliver.space/2019/07/08/JSON/</id>
    <published>2019-07-08T14:04:58.000Z</published>
    <updated>2019-07-09T02:07:31.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li><p>JSON是一种数据传输的格式（以对象喂养版，本质上就是对象，但用途有区别，对象就是本地用的，JSON是用来传输的）</p></li><li><p>格式</p><p>属性名必须加双引号，属性值最好加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span> : <span class="string">"hsz"</span>,</span><br><span class="line"><span class="attr">"age"</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们传输给后台的是字符串，后台传输给咱们的也是字符串，只不过是JSON格式的字符串<code>&#39;{&quot;name&quot; : &quot;hsz&quot;, &quot;age&quot; : 123}&#39;</code>, 下面这两种方法就是用来转化的</p></li><li><p><code>JSON.parse();</code>       string ——&gt; json</p></li><li><p><code>JSON.stringify();</code>       json ——&gt; string</p></li></ul><h3 id="renderTree"><a href="#renderTree" class="headerlink" title="renderTree"></a>renderTree</h3><h5 id="一-DOM树的完成（2步）"><a href="#一-DOM树的完成（2步）" class="headerlink" title="一. DOM树的完成（2步）"></a>一. DOM树的完成（2步）</h5><p>1 dom树的解析完成，</p><p>2 dom树的加载完成</p><ul><li><p>dom树的解析</p><p>1 ） html解析原则：深度优先原则，一条道走到底</p><p>2 ） 识别到了就丢到dom树上去, 比如<code>&lt;img src=&quot;&quot;&gt;</code>, dom树不会去管src的内容，认识<code>&lt;img&gt;</code>就完事了</p></li></ul><h5 id="二-CSS树（跟DOM树类似）"><a href="#二-CSS树（跟DOM树类似）" class="headerlink" title="二. CSS树（跟DOM树类似）"></a>二. CSS树（跟DOM树类似）</h5><h5 id="renderTree-DOMTree-CSSTree"><a href="#renderTree-DOMTree-CSSTree" class="headerlink" title="renderTree = DOMTree + CSSTree"></a>renderTree = DOMTree + CSSTree</h5><p><strong>当renderTree形成完成后，JavaScript引擎才会开始真正开始绘制页面，按照renderTree里面的每一条规则去绘制页面</strong></p><h5 id="三-renderTree的重排（reflow）和重绘（repaint）"><a href="#三-renderTree的重排（reflow）和重绘（repaint）" class="headerlink" title="三 .renderTree的重排（reflow）和重绘（repaint）"></a>三 .renderTree的重排（reflow）和重绘（repaint）</h5><p>renderTree的重排会降低代码运行的效率</p><p>1）dom节点的删除，增加</p><p>2） dom节点的宽高变化，位置变化</p><p>3） offsetLeft offsetWidth（因为要求实时获取，所以要不断重排）</p><p>renderTree重绘会极少的降低效率（可以接受）</p><p>dom节点的颜色改变</p><h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><p>为什么js的加载过程和运行过程不能和html、css并行去做呢？</p><p>因为js会修改html和css，要么绘制完了运行，要么运行完了继续绘制</p><p>为什么<code>&lt;script&gt;&lt;/script&gt;</code> 要放在最后呢？</p><p>因为如果放在head里面，但凡js里面有一个字节没加载过来，整个页面就废掉了</p><h4 id="异步加载三个方案"><a href="#异步加载三个方案" class="headerlink" title="异步加载三个方案"></a>异步加载三个方案</h4><p>1）defer 异步加载，但要等到dom文档全部解析完才会被执行。可以加载内部脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">defer</span>=<span class="string">"defer"</span>&gt;</span></span><br><span class="line">// 但是很遗憾，只有IE9以下可以用</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加上defer后就可以和html，css同时加载了</p><p>2） async 异步加载，加载完就执行，async只能加载外部脚本，不可以加载<code>&lt;script&gt;</code>的内部脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">async</span>=<span class="string">"async"</span>&gt;</span></span><br><span class="line">// W3C标准方法，只能加载外部脚本</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><u><strong>上面俩，执行时也不会阻塞页面</strong></u></p><p>3）动态创建script，插入到dom中，加载完毕后callback（最常用），还可以按需加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">script.src = <span class="string">"./xxx.js"</span>; <span class="comment">// 开始下载"xxx.js"</span></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 开始执行"xxx.js"</span></span><br></pre></td></tr></table></figure><p>如果我们想要执行xxx.js里面的方法的话，就需要等到xxx.js下载完成才可能执行</p><p>当然我们也有这样的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 就IE不好使</span></span><br><span class="line"></span><br><span class="line">script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(script.readState == <span class="string">"complete"</span> || script.readyState == <span class="string">"loaded"</span>)&#123;</span><br><span class="line">        <span class="comment">// ie独有</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以封装到一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScrpit</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="keyword">if</span> (script.readyState) &#123;</span><br><span class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(script.readState == <span class="string">"complete"</span> || script.readyState == <span class="string">"loaded"</span>)&#123;</span><br><span class="line">                <span class="comment">// 1 callback();// ie独有</span></span><br><span class="line">                <span class="comment">// 2 eval(callback);</span></span><br><span class="line">                tools[callback]();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1 callback();</span></span><br><span class="line">            tools[callback]();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = url;<span class="comment">// 开始下载"xxx.js"</span></span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 开始执行"xxx.js"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 loadScrpit('tools.js', function () &#123;test()&#125;)</span></span><br><span class="line"><span class="comment">// 2 loadScrpit('tools.js', "test()");</span></span><br><span class="line">loadScrpit(<span class="string">'tools.js'</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是第三种要求这样写函数体</span></span><br><span class="line"><span class="keyword">var</span> tools = &#123;</span><br><span class="line">    test : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'a'</span>);&#125;,</span><br><span class="line">    demo : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js-加载时间线"><a href="#js-加载时间线" class="headerlink" title="js 加载时间线"></a>js 加载时间线</h2><ul><li>1 创建<code>Document</code>对象，开始解析对象，开始解析web页面。解析HTML元素和他们的文本内容后，添加Element对象和Text节点到文档中，这个阶段<code>document.readyState = &#39;loading&#39;</code>.</li><li>2 遇到link外部css，创建线程加载，并继续解析文档。</li><li>3 遇到script外部js，并且没有设置async、defer。浏览器加载并阻塞，等待加载完成并执行该脚本，然后继续解析文档。</li><li>4 遇到script外部js，并且设置有async、defer。浏览器创建线程加载，并继续解析文档。对于async属性的脚本，<u>脚本加载完成后执行</u>。（异步禁止使用<code>document.write()</code>）</li><li>5 遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。</li><li>6 当文档解析完成，<code>document.readyState = &#39;interactive&#39;</code>。</li><li>7 文档解析完成后，所有设置有defer的脚本会按照顺序执行。（注意与async不同，但同样禁止<code>document.write()</code>）。</li><li>8 document对象触发DOMContentLoaded事件，这也标志着程序执行从 同步脚本执行阶段 转化为事件驱动阶段。(只在addEventListener()好用)</li><li>9 当所有async的脚本加载完成并执行后、img的加载完成后，<code>document.readyState = &#39;complete&#39;</code>，window对象触发load事件。</li><li>10 从此，以异步响应方式处理用户输入、网络事件等。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JSON是一种数据传输的格式（以对象喂养版，本质上就是对象，但用途有区别，对象就是本地用的，JSON是用来
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="js时间线" scheme="http://www.hsiliver.space/tags/js%E6%97%B6%E9%97%B4%E7%BA%BF/"/>
    
      <category term="异步加载" scheme="http://www.hsiliver.space/tags/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="JSON" scheme="http://www.hsiliver.space/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>事件 —— 交互体验的核心功能</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E4%BA%8B%E4%BB%B6/"/>
    <id>http://www.hsiliver.space/2019/07/08/事件/</id>
    <published>2019-07-08T14:04:58.000Z</published>
    <updated>2019-07-09T02:07:55.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件-——-交互体验的核心功能"><a href="#事件-——-交互体验的核心功能" class="headerlink" title="事件 —— 交互体验的核心功能"></a>事件 —— 交互体验的核心功能</h2><ul><li><p><code>ele.onxxx = function (event) {}</code></p><p>兼容性很好，但是一个元素的同一个事件上只能绑定一个处理程序</p><p>基本等同于写在HTML行间上（句柄绑定方式）</p></li><li><p><code>obj.addEventListener(type, fn, false);</code></p><p>IE9 以下不兼容，可以为一个事件绑定多个处理程序（地址不一样的fn）</p></li><li><p><code>obj.attachEvent(&#39;on&#39;+type, fn);</code></p><p>IE 独有，一个事件同样可以绑定多个处理程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击输出li的序号</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oLi.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">oLi[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(i);</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>封装兼容性事件监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">ele, type, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.addEventListener) &#123;</span><br><span class="line">        ele.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ele.attachEvent) &#123;</span><br><span class="line">        ele.attachEvent(<span class="string">'on'</span> + type, funciton () &#123;</span><br><span class="line">        handle.call(ele)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ele[<span class="string">'on'</span> + type] = handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解除事件</p><p><code>dom.removeEventListener(&#39;click&#39;, fn, false);</code></p><p><code>dom.detachEvent(&#39;on&#39; + type, fn);</code></p></li></ul><h2 id="事件处理模型——事件冒泡、捕获"><a href="#事件处理模型——事件冒泡、捕获" class="headerlink" title="事件处理模型——事件冒泡、捕获"></a>事件处理模型——事件冒泡、捕获</h2><ul><li><p>事件冒泡： </p><p>结构上（非视觉上）嵌套关系的元素， 会存在事件冒泡的功能，即同一时间，自子元素冒泡向父元素（自底向上）</p></li><li><p>事件捕获：</p><p>1 dom.addEventListener()第三个参数为true</p><p>2 dom.setCapture(); （仅在IE上好使）捕获页面上所有的事件捕获到自己身上</p><p>​    对应dom.releaseCapture(); （取消事件捕获）</p><p>结构上（非视觉上）嵌套关系的元素， 会存在事件捕获的功能，即同一时间，自父元素捕获至子元素（自顶向下）</p><p>IE没有捕获事件, 只有谷歌实现了</p><p>出发顺序， 先捕获，后冒泡</p><p><code>focus</code>、<code>blur</code>、<code>change</code>、<code>submit</code>、<code>reset</code>、<code>select</code>等事件不冒泡</p></li><li><p>阻止事件冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;<span class="comment">//在IE里(e)不好使</span></span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement;<span class="comment">//兼容事件源对象</span></span><br><span class="line">stopBubble(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.stopPropagation)&#123;</span><br><span class="line">event.stopPropagation();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>阻止默认事件</p><p>默认事件——表单提交，啊标签跳转，右键菜单等</p><p><code>return false</code> 以对象属性的方式注册的事件才生效（句柄绑定事件生效）</p><p><code>event。preventDefault()</code>   W3C 标注， IE9以下不兼容</p><p><code>event.returnValue = false</code> 兼容IE</p><p>封装阻止默认事件的函数 <code>cancelHandler(event)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">cancelHandler(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelHandler</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.preventDefault)&#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">event.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>事件对象</p><p>谷歌：<code>window.e || e</code></p><p>IE：<code>window.event || event</code></p></li></ul><p>  事件源对象</p><p>  火狐只有<code>event.target</code></p><p>  IE只有 <code>event.srcElement</code></p><p>  google :都有</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容性写法</span></span><br><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement;</span><br></pre></td></tr></table></figure><ul><li><p>事件委托</p><p>优点：</p><p>1 性能 ： 不需要循环所有元素一个个绑定</p><p>2 灵活 ： 当有新的子元素时不需要重新绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> * 100</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line">    oUl.onclick = funciton (e) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> target = event.target || event.srcElement;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(target.innerText);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>鼠标事件</p><p>click、mousedown、mousemove、mouseup、contextmenu、mouseover、mouseout、mouseenter、mouseleave</p><p>用button来区分鼠标按键 0 / 1 / 2</p><p>W3C标准规定：click事件只能监听左键，，只能通过<code>mousedown</code>和<code>mouseup</code>来判断鼠标键</p><p>div拖拽事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> disX,</span><br><span class="line">        disY;</span><br><span class="line">    div.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        disX = e.pageX - <span class="built_in">parseInt</span>(dom.style.left);</span><br><span class="line">        disY = e.pageY - <span class="built_in">parseInt</span>(dom.style.top);</span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            dom.style.left = e.pageX - disX + <span class="string">'px'</span>;</span><br><span class="line">            dom.style.top = e.pageY - disY + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        div.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">drag(div)</span><br></pre></td></tr></table></figure><p>判断鼠标左右键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e.button == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'右键'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'左键'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何解决<code>onmousedown</code>和<code>onmouseup</code>与<code>onclick</code>事件冲突</p><p>利用用户习惯的事件差设置就可以避免了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span> (lastTime - firstTime &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        key = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">        key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  移动端：<code>touchstart</code> 、<code>touchmove</code>、<code>touchend</code></p><ul><li><p>键盘类事件</p><p><code>onkeypress</code>  &gt;<code>onkeydown</code> &gt;  <code>onkeyup</code></p><p>keydown可以相应任意键盘按键，keypress止咳响应字符类键盘按键</p><p>keypress返回ASCLL码，可以转换成相应字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(e.charCode));</span><br><span class="line">    <span class="comment">// 将ASCLL码转换为键盘上对应的字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本类操作事件</p><p><code>input</code>输入触发、<code>focus</code>聚焦触发、<code>blur</code>失焦触发、<code>change</code>改变内容并且失焦触发</p></li><li><p>窗体操作类（window上的事件）</p><p><code>scroll</code>当滚动轮滚动触发 （懒加载）</p><p><code>load</code> （尽量少用）整个页面全部就绪的时候，才执行<code>window.onload</code>,虽然很飘逸，但是效率很低，影响用户体验，但是也有好处：比如广告要等到页面加载完才加上广告。也可以考究需要多久，页面能够正常使用</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事件-——-交互体验的核心功能&quot;&gt;&lt;a href=&quot;#事件-——-交互体验的核心功能&quot; class=&quot;headerlink&quot; title=&quot;事件 —— 交互体验的核心功能&quot;&gt;&lt;/a&gt;事件 —— 交互体验的核心功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ele
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="冒泡" scheme="http://www.hsiliver.space/tags/%E5%86%92%E6%B3%A1/"/>
    
      <category term="事件" scheme="http://www.hsiliver.space/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>日期对象Date()</title>
    <link href="http://www.hsiliver.space/2019/07/08/date%E5%AF%B9%E8%B1%A1%E3%80%81%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>http://www.hsiliver.space/2019/07/08/date对象、定时器/</id>
    <published>2019-07-08T14:03:58.000Z</published>
    <updated>2019-07-09T02:18:55.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日期对象Date"><a href="#日期对象Date" class="headerlink" title="日期对象Date()"></a>日期对象Date()</h2><p>日期对象：是系统提供好的</p><p>注意： 我们new出来的对象是记录的date出生的那一刻，并不是实时地</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">date.getDate();  <span class="comment">// 返回当前这个月的第几天。就是几号（1 ~ 31）</span></span><br><span class="line">date.getDay();   <span class="comment">// 返回当前周的第几天（0 ~ 6）</span></span><br><span class="line">date.getMonth(); <span class="comment">// 返回当前年的第几个月 （0 ~ 11）</span></span><br><span class="line">date.getFullYear(); <span class="comment">// 返回当前年份（四位数）</span></span><br><span class="line">date.getHours();    <span class="comment">// 返回当前小时（0 ~ 23）</span></span><br><span class="line">date.getMinutes();  <span class="comment">// 返回当前分钟（0 ~ 59）</span></span><br><span class="line">date.getSeconds();  <span class="comment">// 返回当前秒钟（0 ~ 59）</span></span><br><span class="line">date.getMilliseconds(); <span class="comment">// 返回当前毫秒（0 ~ 999）</span></span><br><span class="line">date.getTime();    <span class="comment">// *返回 1970 年 1 月 1 日至今的毫秒数（计算机的纪元时刻，也是最常用的）</span></span><br><span class="line"></span><br><span class="line">date.setDate();  <span class="comment">// 设置月的第几天。就是几号（1 ~ 31）</span></span><br><span class="line">date.setDay();   <span class="comment">// 设置周的第几天（0 ~ 6）</span></span><br><span class="line">date.setMonth(); <span class="comment">// 设置年的第几个月 （0 ~ 11）</span></span><br><span class="line">date.setFullYear(); <span class="comment">// 设置年份（四位数）</span></span><br><span class="line">date.setHours();    <span class="comment">// 设置小时（0 ~ 23）</span></span><br><span class="line">date.setMinutes();  <span class="comment">// 设置分钟（0 ~ 59）</span></span><br><span class="line">date.setSeconds();  <span class="comment">// 设置秒钟（0 ~ 59）</span></span><br><span class="line">date.setMilliseconds(); <span class="comment">// 设置毫秒（0 ~ 999）</span></span><br><span class="line">date.setTime();    <span class="comment">// 以毫秒设置date对象</span></span><br></pre></td></tr></table></figure><h4 id="定时循环器"><a href="#定时循环器" class="headerlink" title="定时循环器"></a>定时循环器</h4><p><code>setInterval(function () {}, time)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="number">1000</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, time);</span><br><span class="line">time =<span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 事实上这个 setInterval 里面的 time 只识别一次，即使在后面再次修改也是不好使的</span></span><br></pre></td></tr></table></figure><p>我们可以来验证定时器到底准不准</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">console</span>.log(lastTime - firstTime);</span><br><span class="line">firstTime = lastTime;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 结果是很不准的</span></span><br><span class="line"></span><br><span class="line">setInterval(<span class="string">"console.log('a')"</span>, <span class="number">1000</span>); <span class="comment">// 另一种写法每隔1000毫秒运行字符串里面的代码</span></span><br></pre></td></tr></table></figure><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><code>setTimeout(function () {}, 1000)</code></p><p>只运行一次，运行完成后结束，用法与setInterval相差无几</p><h4 id="清除定时、定时循环器"><a href="#清除定时、定时循环器" class="headerlink" title="清除定时、定时循环器"></a>清除定时、定时循环器</h4><p><code>clearInterval();</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(timer, timer2); <span class="comment">// 1 2</span></span><br><span class="line">clearInterval(timer);</span><br></pre></td></tr></table></figure><p>由于setInterval是window上的一个方法，而每生成一个setInterval，window就会给这个setInterval打上一个唯一标识；我们清除的就是这个标识；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日期对象Date&quot;&gt;&lt;a href=&quot;#日期对象Date&quot; class=&quot;headerlink&quot; title=&quot;日期对象Date()&quot;&gt;&lt;/a&gt;日期对象Date()&lt;/h2&gt;&lt;p&gt;日期对象：是系统提供好的&lt;/p&gt;
&lt;p&gt;注意： 我们new出来的对象是记录的date
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="Date" scheme="http://www.hsiliver.space/tags/Date/"/>
    
      <category term="定时器" scheme="http://www.hsiliver.space/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>获取视口属性，脚本化css</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E8%8E%B7%E5%8F%96%E8%A7%86%E5%8F%A3%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%84%9A%E6%9C%AC%E5%8C%96css/"/>
    <id>http://www.hsiliver.space/2019/07/08/获取视口属性，脚本化css/</id>
    <published>2019-07-08T14:03:58.000Z</published>
    <updated>2019-07-09T02:05:28.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><p>查看滚动条的滚动距离</p><ul><li><p><code>window.pageXOffset / pageYOffset</code></p><p>IE 8 及 iIE8以下不兼容</p></li><li><p><code>document.body / documentElement.scrollLeft / scrollTop</code></p><p>兼容性比较混乱呢，用时取俩值相加，因为不可能存在两个同时有值</p></li><li><p>封装兼容性方法，求滚动轮滚动距离 <code>getScrollOffset()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.pageXOffset) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">x : <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">y : <span class="built_in">window</span>.pageYOffset</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">x : <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">y : <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>让滚动条滚动</p><ul><li><p>window上有3个方法</p><p><code>scroll()</code>,<code>scrollTo()</code>,<code>scrollBy()</code></p><p>三个方法功能类似，用法都是x, y 坐标传入。即实现让滚动轮滚动到当前位置。</p><p>区别：<code>scrollBy()</code>会在之前的数据基础之上做累加</p></li><li><p>eg ： 可以利用scrollBy() 快速阅读的功能</p></li></ul><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p>查看视口尺寸</p><ul><li><p><code>window.innerWidth/innerHeight</code></p><p>IE8及IE8以下不兼容</p></li><li><p><code>document.documentElement.clientWidth / clientHeight</code></p><p>标准模式下，任意浏览器都兼容</p></li><li><p><code>document.body.clientWidth / clientHeight</code></p><p>适用于怪异模式下的浏览器</p></li><li><p>封装兼容性方法，返回浏览器视口尺寸<code>getViewportOffset()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.innerWidth) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">w : <span class="built_in">window</span>.innerWidth,</span><br><span class="line">h : <span class="built_in">window</span>.innerHeight</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">"BackCompat"</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">w : <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">h : <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">w : <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">h : <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="元素尺寸"><a href="#元素尺寸" class="headerlink" title="元素尺寸"></a>元素尺寸</h4><p>查看元素几何尺寸</p><ul><li><p><code>domEle.getBoundingClientRect()</code></p><p>兼容性很好</p><p>该方法返回一个对象，对象里面有<code>left、top、right、bottom</code>等属性。<code>left</code>和<code>top</code>代表该元素左上角的<code>X</code>坐标和<code>Y</code>坐标，<code>right</code>和<code>bottom</code>代表该元素右下角的<code>X</code>坐标和<code>Y</code>坐标。 </p><p><code>height</code>和<code>width</code>属性老IE并未实现</p><p>返回的结果并不是实时的</p></li></ul><p>查看元素尺寸  (  视觉上的尺寸  )</p><ul><li><code>dom.offsetWidth, dom.offsetHeight</code></li></ul><p><strong>查看元素位置</strong></p><ul><li><p><code>dom.offsetLeft, dom.offsetTop</code></p><p>对于无定位的父级元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。<u>无论自身有没有定位，但凡与父级或者文档有距离就返回这个距离</u></p></li><li><p><code>dom.offsetParent</code></p><p>返回最近的由定位的父级，如果没有，返回<code>body</code>，<code>body.offsetParent</code>返回<code>null</code>。</p></li><li><p>eg : 求元素相对于文档的坐标 <code>getElementPosition</code></p></li></ul><h2 id="脚本化css"><a href="#脚本化css" class="headerlink" title="脚本化css"></a>脚本化css</h2><p>dom.style（获取的是行间样式）</p><ul><li>可读可写</li><li>注意<code>background-color</code> 等，带 ‘-‘ 号的组合样式, 要小驼峰式命名<code>backgroundColor</code></li><li>碰到float这样的保留字属性，前面加css ——&gt; <code>dom.style.cssFloat =  left;</code></li><li>复合属性（一个样式包含多个属性，比如<code>border</code>）尽量拆开写</li></ul><p>查询计算样式（已经计算完了，比如 em —&gt; px）</p><ul><li><p><code>window.getComputedStyle(ele, null)[prop];</code></p></li><li><p>这个方法可以获取伪元素的样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.getComputedStyle(div, <span class="string">'after'</span>).width <span class="comment">// 这样就可以获取了</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>计算样式只读（视觉上展示给我们的样式会展示出来，包括默认值）</p></li><li><p>返回的计算样式的值都是绝对值，没有相对单位</p></li><li><p>IE8及IE8以下不兼容</p><p>IE：<code>dom.currentStyle[prop]</code>但是并非是计算后的属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装兼容的 查询计算样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>)[prop];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;滚动条&quot;&gt;&lt;a href=&quot;#滚动条&quot; class=&quot;headerlink&quot; title=&quot;滚动条&quot;&gt;&lt;/a&gt;滚动条&lt;/h2&gt;&lt;p&gt;查看滚动条的滚动距离&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;window.pageXOffset / pageYOffset&lt;
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="滚动条" scheme="http://www.hsiliver.space/tags/%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    
      <category term="视口" scheme="http://www.hsiliver.space/tags/%E8%A7%86%E5%8F%A3/"/>
    
      <category term="脚本化css" scheme="http://www.hsiliver.space/tags/%E8%84%9A%E6%9C%AC%E5%8C%96css/"/>
    
  </entry>
  
  <entry>
    <title>DOM详解</title>
    <link href="http://www.hsiliver.space/2019/07/08/DOM/"/>
    <id>http://www.hsiliver.space/2019/07/08/DOM/</id>
    <published>2019-07-08T14:00:58.000Z</published>
    <updated>2019-07-09T02:18:23.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h4 id="什么是DOM？"><a href="#什么是DOM？" class="headerlink" title="什么是DOM？"></a>什么是DOM？</h4><ul><li><p>DOM ——&gt; Document Object Model</p></li><li><p>DOM 定义了表示和修改文档所需的方法，DOM对象即为宿主对象，由浏览器厂商定义，用来操作html和xml功能的一类对象的集合。也有人称DOM是对Html以及xml的标准编程接口。</p><p>XML ——&gt; XHTML ——&gt; html, Xml里面的标签可以自定义</p></li><li><p>操作不了CSS，但是可以通过操作行间样式，间接操作CSS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    div.style.width = <span class="string">'100px'</span>;</span></span><br><span class="line"><span class="javascript">    div.style.height = <span class="string">'100px'</span>;</span></span><br><span class="line"><span class="javascript">    div.style.backgrounColor = <span class="string">'orange'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        count ++;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.style.backgrounColor = <span class="string">'yellow'</span>;</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.style.backgrounColor = <span class="string">'orange'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="DOM的基本操作"><a href="#DOM的基本操作" class="headerlink" title="DOM的基本操作"></a>DOM的基本操作</h3><h4 id="1-对节点的改查"><a href="#1-对节点的改查" class="headerlink" title="1) 对节点的改查"></a>1) 对节点的改查</h4><ul><li><p>查看元素节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span> <span class="comment">// 代表整个文档</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(); <span class="comment">// 元素ID在IE8以下的浏览器，不区分ID大小写，而且也返回匹配name属性的元素&lt;div name="div"&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(); <span class="comment">// 标签名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(); <span class="comment">// 需要注意，只有部分标签name可以生效（表单，表单元素，img，iframe）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(); <span class="comment">// 类名，-&gt; IE8和IE8以下的IE版本中没有，可以选中多个class</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySlector() <span class="comment">// css选择器，IE7和IE7以下的IE版本中没有,选一个</span></span><br><span class="line"><span class="built_in">document</span>.querySlector(<span class="string">'div &gt; span.demo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事实上这两个并不使用，因为是静态的，选中一次后，</span></span><br><span class="line"><span class="comment">// 后面再次选中依然以第一次选中的结果为主，是非实时的，镜像的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySlectorAll() <span class="comment">// css选择器，IE7和IE7以下的IE版本中没有</span></span><br><span class="line"><span class="built_in">document</span>.querySlector(<span class="string">'div &gt; span.demo'</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>遍历节点树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parentNode -&gt; 父节点（一个元素只有一个父节点）</span><br><span class="line"></span><br><span class="line">childNodes -&gt; 子节点们</span><br><span class="line"></span><br><span class="line">firstChild -&gt; 第一个子节点</span><br><span class="line"></span><br><span class="line">lastChild -&gt; 最后一个子节点</span><br><span class="line"></span><br><span class="line">nextSibling -&gt; 后一个兄弟节点</span><br><span class="line"></span><br><span class="line">previousSibling -&gt;前一个兄弟节点</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>基于元素节点树的遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parentElement -&gt; 返回当前元素的父元素节点（IE不兼容）</span><br><span class="line"></span><br><span class="line">children -&gt; 只返回当前元素的子元素节点（兼容性最好，最常用）</span><br><span class="line"></span><br><span class="line">node.childElementCount === node.children.length -&gt; 当前元素节点的子节点</span><br><span class="line"></span><br><span class="line">firstElementChild -&gt; 返回的是第一个元素节点（IE不兼容）</span><br><span class="line"></span><br><span class="line">lastElementChild -&gt; 返回的是最后一个元素节点（IE不兼容）</span><br><span class="line"></span><br><span class="line">nextElementSibling / previousElementSibling -&gt; 返回后一个/前一个兄弟元素节点</span><br></pre></td></tr></table></figure></li><li><p>节点的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nodeType —&gt; 获取节点的类型， 只读</span><br><span class="line"></span><br><span class="line">元素节点 ———— 1</span><br><span class="line">属性节点 ———— 2</span><br><span class="line">文本节点 ———— 3</span><br><span class="line">注释节点 ———— 8</span><br><span class="line">document ——  9</span><br><span class="line">DocumentFragment(文本碎片节点) ———— 11</span><br></pre></td></tr></table></figure></li><li><p>节点的四个属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nodeName -&gt; 元素的标签名，大写形式表示 ， 只读</span><br><span class="line"></span><br><span class="line">nodeValue -&gt; text节点或Comment节点的文本内容 ， 可读可写</span><br><span class="line"></span><br><span class="line">nodeType —&gt; 该节点的类型， 只读</span><br><span class="line"></span><br><span class="line">attributes -&gt; Element 节点的属性集合</span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">div.attributes[0].name; // id</span><br><span class="line">div.attributes.value;  // demo</span><br><span class="line">value值可读可写，name值只读</span><br><span class="line"></span><br><span class="line">节点的一个方法 node.hasChildNodes();返回true/false</span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/DOM/DOM.PNG" alt></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTMLDocument.prototype = &#123;</span><br><span class="line">__proto__ : Document.prototype</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所以继承关系是：document --&gt;(继承自) HTMLDocument.prototype --&gt; Document.prototype</span></span><br></pre></td></tr></table></figure><ol><li><p><code>getElementById</code>方法定义在<code>Document.prototype</code>上，即<code>Element</code>节点上不能使用。</p></li><li><p><code>getElementByName</code>方法是在<code>HTMLDocument.prototype</code>上， 即非<code>html</code>中的<code>document</code>不能使用（<code>xml、document、Element</code>）</p></li><li><p><code>getElementByTagName</code>方法定义在<code>Document.prototype</code>和<code>Element.prototype</code>上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElemmentsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> span = div.getElementsByTagName(<span class="string">'span'</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><code>HTMLDocument.prototype</code>定义了一些常用的属性，<code>body，head</code>分别指代<code>HTML</code>文档中的<code>&lt;body&gt;&lt;/body&gt;、&lt;head&gt;&lt;/head&gt;</code>标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body; <span class="comment">//&lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="built_in">document</span>.head; <span class="comment">//&lt;head&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p><code>Document.prototype</code>上定义了<code>document、Element</code>属性，指代文档的根元素，在<code>HTML</code>文档中，它总是指代<code>&lt;html&gt;&lt;/html&gt;</code>元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement; <span class="comment">// &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><code>getElementsByClassName、querySelector、querySelectorAll</code>在<code>Document.prototype、Element.prototype</code>类中均有定义</li></ol><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装函数，返回元素e的第n层祖先元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retParent</span>(<span class="params">elem, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (elem &amp;&amp; n) &#123;</span><br><span class="line">        elem = ele.parentElement;</span><br><span class="line">        n --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装函数，返回元素e的第n个元素节点，n为正，</span></span><br><span class="line"><span class="comment">//返回后面的元素节点，n为负，返回前面的，n为0返回自己</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retSibling</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (e &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.nextElementSibling;) &#123;</span><br><span class="line">                e = e.nextElementSibling;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.nextSibling; e &amp;&amp; e.nodeType ! = <span class="number">1</span>; e = e.nextSibling)</span><br><span class="line">                <span class="comment">// 为了兼容IE9以下</span></span><br><span class="line">            &#125;  </span><br><span class="line">            n --;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.previousElementSibling) &#123;</span><br><span class="line">                e = e.previousElementSibling;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType != <span class="number">1</span>; e = e.previousSibling);</span><br><span class="line">            &#125;</span><br><span class="line">            n ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编辑函数，封装myChildren功能，解决以前部分浏览器的兼容性问题</span></span><br><span class="line">Element.prototype.myChildren = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> child = <span class="keyword">this</span>.childNodes;</span><br><span class="line">    <span class="keyword">var</span> len = child.length;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chilid[i].nodeType == <span class="number">1</span>)</span><br><span class="line">        arr.push(child[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装hasChildren()方法，不可用children属性</span></span><br><span class="line">Element.prototype.hasChildren = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> child = <span class="keyword">this</span>.childNodes;</span><br><span class="line">    <span class="keyword">var</span> len = child.length;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chilid[i].nodeType == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装自己的chlidren函数，用nodeType</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retElementChild</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;</span><br><span class="line">        length : <span class="number">0</span>,</span><br><span class="line">        push : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        splice : <span class="built_in">Array</span>.prototype.splice;</span><br><span class="line">    &#125;,</span><br><span class="line">    child = node.childNodes,</span><br><span class="line">    len = child.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child[i].nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            temp.push(child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）-对节点的增、插、删、替换"><a href="#2）-对节点的增、插、删、替换" class="headerlink" title="2） 对节点的增、插、删、替换"></a>2） 对节点的增、插、删、替换</h4><ul><li><p>增</p><p><code>document.createElement()</code> 创建元素节点</p><p><code>document.createTextNode()</code> 创建文本节点</p><p><code>document.createComment()</code> 创建注释节点</p><p><code>document.createDocumentFragment()</code> 创建文档碎片节点</p></li><li><p>插</p><p><code>ParentNode.appendChild()</code> parentNode 里面 ，列表的最后插入子节点（剪切操作）</p></li></ul><p>  <code>ParentNode.insertBefore(a, b)</code> parentNode 里面 ，把 a 插入在 b 之前</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装insertAfter函数</span></span><br><span class="line"><span class="comment">// &lt;div&gt;</span></span><br><span class="line"><span class="comment">// &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//  &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;div&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Element.prototype.insertAfter = <span class="function"><span class="keyword">function</span> (<span class="params">targetNode, afterNode</span>) </span>&#123; <span class="comment">// &lt;i&gt; &lt;p&gt;</span></span><br><span class="line">    <span class="keyword">var</span> beforeNode = afterNode.nextElementSibling;</span><br><span class="line">    <span class="keyword">if</span> (beofreNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.appendChild(targetNode)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.insertBefore(targetNode,beforeNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>删</p><p><code>parent.removeChild()</code> 删除（剪切出来）自己的子节点（参数可以是某个节点）</p><p><code>child.remove()</code> 删除（销毁）自己</p></li><li><p>替换</p><p><code>parent.replaceChild(new, origin)</code>父级调用，拿新的元素替换老的元素</p></li></ul><h5 id="Element节点上的一些属性"><a href="#Element节点上的一些属性" class="headerlink" title="Element节点上的一些属性"></a>Element节点上的一些属性</h5><ul><li><p><code>innerHTML</code> —-&gt;读 / 写html结构，覆盖原有所有内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.innerHTML; <span class="comment">// 取值操作</span></span><br><span class="line">div.innerHTML = <span class="string">'&lt;p&gt;&lt;/p&gt;'</span>; <span class="comment">// 写入操作</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><code>innerText</code>(火狐不兼容) / <code>textContent</code>（老版本IE不好使） —&gt; 读 / 写文本内容，覆盖原有所有内容，包括标签结构，所以谨慎使用</li></ul><h5 id="Element-节点上的一些方法"><a href="#Element-节点上的一些方法" class="headerlink" title="Element 节点上的一些方法"></a>Element 节点上的一些方法</h5><ul><li><p><code>ele.setAttribute();</code> 设置行间属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">div.setsetAttribute(&apos;class&apos;, &apos;demo&apos;);</span><br><span class="line"></span><br><span class="line">===&gt; &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>ele.getAttribute();</code>获取行间属性，里面填一个参数即可</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;h4 id=&quot;什么是DOM？&quot;&gt;&lt;a href=&quot;#什么是DOM？&quot; class=&quot;headerlink&quot; title=&quot;什么是DOM？
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="DOM的基本操作" scheme="http://www.hsiliver.space/tags/DOM%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
      <category term="节点树" scheme="http://www.hsiliver.space/tags/%E8%8A%82%E7%82%B9%E6%A0%91/"/>
    
  </entry>
  
</feed>
