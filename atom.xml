<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hsiliver个人博客</title>
  
  
  <link href="/myblog/atom.xml" rel="self"/>
  
  <link href="https://hsiliver.space/"/>
  <updated>2019-07-08T14:02:39.185Z</updated>
  <id>https://hsiliver.space/</id>
  
  <author>
    <name>hsiliver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对象包装类</title>
    <link href="https://hsiliver.space/2019/07/08/%E5%AF%B9%E8%B1%A1%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>https://hsiliver.space/2019/07/08/对象包装类/</id>
    <published>2019-07-08T13:53:58.000Z</published>
    <updated>2019-07-08T14:02:39.185Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>函数_作用域链</title>
    <link href="https://hsiliver.space/2019/07/08/%E5%87%BD%E6%95%B0_%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>https://hsiliver.space/2019/07/08/函数_作用域链/</id>
    <published>2019-07-08T08:18:49.000Z</published>
    <updated>2019-07-08T14:10:29.448Z</updated>
    
    <content type="html"><![CDATA[<p>函数作用域链</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><pre><code>高内聚， 低耦合</code></pre><ul><li><h4 id="命名规范：小驼峰式命名"><a href="#命名规范：小驼峰式命名" class="headerlink" title="命名规范：小驼峰式命名"></a>命名规范：小驼峰式命名</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 命名函数表达式</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theFirstFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'abc'</span>);</span><br><span class="line">&#125;</span><br><span class="line">theFirstFun.name <span class="comment">// theFirstFun</span></span><br></pre></td></tr></table></figure><p>​        </p><ul><li><h4 id="表达式类函数，忽略函数名-此时-abc-被忽略"><a href="#表达式类函数，忽略函数名-此时-abc-被忽略" class="headerlink" title="表达式类函数，忽略函数名, 此时 abc 被忽略"></a>表达式类函数，忽略函数名, 此时 <strong><em>abc</em></strong> 被忽略</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 匿名函数表达式 ———— 后来叫做函数表达式</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">test.name <span class="comment">// abc</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形参  ———— delete 删除不了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sum.length) <span class="comment">// 2 形参长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length) <span class="comment">// 3 实参长度</span></span><br><span class="line">    <span class="comment">// 等同于在函数内部声明了 a, b</span></span><br><span class="line"><span class="keyword">var</span> c = a + b;</span><br><span class="line">coonsole.log(c)</span><br><span class="line">    <span class="comment">// 每个函数在出生的时候系统就会隐式地创建一个arguments（类数组）来装实参——实参列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实参</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum1</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 现在的情况是</span></span><br><span class="line">    <span class="comment">// var a = 1;</span></span><br><span class="line">    <span class="comment">// var b = 2; </span></span><br><span class="line">    <span class="comment">// var c; </span></span><br><span class="line">    <span class="comment">// arguments =&gt; [1, 2] 实参只有 2 位</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 然后我们改变规则</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);  <span class="comment">// 10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们再改变一次</span></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们会发现这中间存在映射规则 实参的每一位对应形参的每一位</span></span><br><span class="line">    c = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">2</span>]);   <span class="comment">// undifined;</span></span><br><span class="line">    <span class="comment">// 所以得出 实参出生的时候有几个 就是几个</span></span><br><span class="line">&#125;</span><br><span class="line">sum1(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li><h4 id="函数的-return-值"><a href="#函数的-return-值" class="headerlink" title="函数的 return 值"></a>函数的 return 值</h4><p>函数的结束条件 + 返回值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'123'</span>; <span class="comment">// 有中断 并且 返回值 结束的功能, 不会打印下面的20</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 123 倒叙且变中文</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">window</span>.prompt(<span class="string">'input'</span>);</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123; <span class="comment">// 倒着加 2 =》 1 =》 0</span></span><br><span class="line">        str += transfer(num[i]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (target) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"壹"</span>；</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"俩"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"仨"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阶乘</span></span><br><span class="line"><span class="comment">// 递归 —— 唯一好处，简洁代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jc</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 出口， 不然就在无穷死循环 </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> n * jc(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 找规律</span></span><br><span class="line"><span class="comment">// 2. 找出口</span></span><br><span class="line"><span class="comment">// 斐波那契数列 fn(n) == fb(n - 1) + fb(n -2)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fb(n - <span class="number">1</span>) + fb(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域初探"><a href="#作用域初探" class="headerlink" title="作用域初探"></a>作用域初探</h3><h4 id="JS运行分三步："><a href="#JS运行分三步：" class="headerlink" title="JS运行分三步："></a>JS运行分三步：</h4><p>语法分析（通篇扫描是否有语法错误），预编译（发生在函数执行的前一刻），解释执行（一行行执行）。</p><pre><code>全局变量：在函数外声明的变量局部变量：在一个区域内声明的变量</code></pre><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><ul><li><p>imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量归全局所有。</p><p> <code>a = 123;</code></p></li><li><p>一切声明的全局变量，全是window的属性。window就是全局的域</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line"><span class="built_in">window</span> &#123;<span class="attr">a</span> : <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数预编译四部曲</p></li></ul>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// ƒ a() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">123</span>;  <span class="comment">// 提升到第 2 位 覆盖第一个 a</span></span><br><span class="line">   <span class="built_in">console</span>.log(a);       <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;      <span class="comment">// 提升到第 1 位</span></span><br><span class="line">   <span class="built_in">console</span>.log(a);       <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;<span class="comment">// 提升到第 2 位</span></span><br><span class="line">   <span class="built_in">console</span>.log(b);  <span class="comment">// ƒ () &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;  <span class="comment">// 提升到第 1 位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建AO对象 (action object 由于这个函数而产生的存储空间库)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>找形参和变量声明，将变量和形参名作为AO的属性名，值为undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">    <span class="comment">// arguments : [1],</span></span><br><span class="line">    <span class="comment">// this : window,</span></span><br><span class="line">    <span class="comment">// 这里还有两步，这里为了方便，先注释，不考虑。</span></span><br><span class="line">    </span><br><span class="line">a : <span class="literal">undefined</span>,</span><br><span class="line">b : <span class="literal">undefined</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>将实参值和形参统一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// 形参没有对应的实参就不用管</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>在函数体里面找函数声明， 值赋予函数体 <strong>*（函数表达式提升不了，它是表达式）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">a: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">// 覆盖了形参的a</span></span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    d: <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">=====&gt;</span><br><span class="line">AO &#123;</span><br><span class="line">a: <span class="number">123</span>, <span class="comment">// 执行完第一个console.log后，a再度覆盖fn</span></span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    d: <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一句一句执行</span></span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. AO &#123;&#125;</span></span><br><span class="line"><span class="comment">2. AO &#123;</span></span><br><span class="line"><span class="comment">a: undefined,</span></span><br><span class="line"><span class="comment">b: undefined,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3. AO &#123;</span></span><br><span class="line"><span class="comment">a: 1,</span></span><br><span class="line"><span class="comment">b: undefined,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">4. AO &#123;</span></span><br><span class="line"><span class="comment">a: 1,</span></span><br><span class="line"><span class="comment">b: function b() &#123;&#125;,</span></span><br><span class="line"><span class="comment">d: function d() &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">所以第一个console.log(a) =&gt; 1</span></span><br><span class="line"><span class="comment">然后继续</span></span><br><span class="line"><span class="comment">AO &#123;</span></span><br><span class="line"><span class="comment">a: 3,</span></span><br><span class="line"><span class="comment">b: 2,</span></span><br><span class="line"><span class="comment">c: 0,</span></span><br><span class="line"><span class="comment">d: function d() &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">所以后面两个console.log(b) 都是 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">window</span>.foo || (<span class="built_in">window</span>.foo = <span class="string">'bar'</span>));</span><br><span class="line"><span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>全局：global object( GO )</p><p>GO === window</p></li></ol><h3 id="作用域，作用域链"><a href="#作用域，作用域链" class="headerlink" title="作用域，作用域链"></a>作用域，作用域链</h3><h4 id="函数作用域-scope"><a href="#函数作用域-scope" class="headerlink" title="函数作用域[[scope]]"></a>函数作用域[[scope]]</h4><ul><li><strong>[[scope]]</strong> : 每个javascript函数都是一个对象，对象中有的属性可以访问，有的不能，这些属性仅供javascript引擎存取，[[scope]] 就是其中一个。[[scope]] 指的就是函数的作用域，其中存储了执行期上下文的集合。</li></ul><ul><li><strong>执行期上下文</strong>： 当函数执行前一刻，会创建一个称为执行期上下文的内部对象（AO）。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行期上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行期上下文，当函数执行完毕，它所产生的执行上下文被销毁。</li></ul><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><ul><li><code>[[scope]]</code>中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们称这种链式链接为作用域链。查找变量时，要从作用域链的顶部开始查找。Activation Object（AO）到Global Object（GO）。</li><li>查找变量： 从作用域链的顶端依次向下查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> bb =<span class="number">234</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aa = <span class="number">123</span>;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> glob = <span class="number">100</span>;</span><br><span class="line">a();</span><br><span class="line"><span class="comment">// a defined(定义) a.[[scope]] --&gt; 0 : GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a doing(执行)   a.[[scope]] --&gt; 0 : a-AO</span></span><br><span class="line"><span class="comment">//   1 : GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b defined(定义) b.[[scope]] --&gt; 0 : a-AO</span></span><br><span class="line"><span class="comment">//   1 : GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b doing(执行)   b.[[scope]] --&gt; 0 : b-AO</span></span><br><span class="line"><span class="comment">//    1 : a-AO</span></span><br><span class="line"><span class="comment">//   2 : GO</span></span><br></pre></td></tr></table></figure><p><img src="/myblog/2019/07/08/函数_作用域链/a.scope.PNG" alt></p><p><img src="/myblog/2019/07/08/函数_作用域链/doing.PNG" alt></p><p><img src="/myblog/2019/07/08/函数_作用域链/b_defined.PNG" alt></p><p><img src="/myblog/2019/07/08/函数_作用域链/b_doing.PNG" alt></p><h3 id="闭包1"><a href="#闭包1" class="headerlink" title="闭包1"></a>闭包1</h3><ul><li><p>当内部函数被保存到外部时，将会生成闭包。生成闭包后，内部函数依旧可以访问其所在的外部函数的变量。</p></li><li><p>危害：闭包会导致原有作用于连不释放，造成内存泄漏（占的多了，剩的就少了）</p><p>闭包问题的解决方法：立即执行函数、let</p><ul><li><p>详细解释：</p><p>当函数执行时，会创建一个称为<strong>执行期上下文的内部对象（AO）</strong>，执行期上下文定义了一个函数执行时的环境。</p><p>函数还会获得它所在作用域的<strong>作用域链</strong>，是存储函数能够访问的所有执行期上下文对象的集合，即这个函数中能够访问到的东西都是沿着作用域链向上查找直到全局作用域。</p><p>函数每次执行时对应的执行期上下文都是独一无二的，当函数执行完毕，函数都会失去对这个作用域链的引用，JS的垃圾回收机制是采用引用计数策略，如果一块内存不再被引用了那么这块内存就会被释放。</p><p>但是，当闭包存在时，即内部函数保留了对外部变量的引用时，这个作用域链就不会被销毁，此时内部函数依旧可以访问其所在的外部函数的变量，这就是闭包。</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bbb = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(aaa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aaa = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> glob = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> demo = a();</span><br><span class="line">demo();        <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f b() &#123;&#125; 被保存出来了并且赋给了demo</span></span><br><span class="line"><span class="comment">虽然return后 a 的执行期上下文被销毁，但是b函数[[scope]]=&gt; aAO, bAO, GO</span></span><br><span class="line"><span class="comment">所以顺着链找就可以找到 ‘var aaa = 123;'</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包作用于累加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> demo = a();</span><br><span class="line">demo(); <span class="comment">// 101</span></span><br><span class="line">demo(); <span class="comment">// 102</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第二个为啥是102 呢？</span></span><br><span class="line"><span class="comment">第一次demo执行完了后，a的AO依然被销毁，但是b的[[scope]]里面存的是第一次demo();后的aAO，事实上就是a斩断了aAO的线，想要销毁，但是b的手里撰着aAO，所以第一次执行产生的aAO，GO被永远当成了基础来用了;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包作用于缓存（储存结构）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        cosole.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num --;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line">myArr[<span class="number">0</span>]();<span class="comment">// 101</span></span><br><span class="line">myArr[<span class="number">1</span>](); <span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 被保存出来的f a() &#123;&#125; 和 f b() &#123;&#125; 共用一个testAO</span></span><br></pre></td></tr></table></figure><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><ul><li><p>函数出生的时候都是等待被执行的，这个过程是很占内存的，尤其是那些只被执行一次就销毁的函数,</p></li><li><p>所以有了立即执行函数，执行完就被销毁，这是跟普通函数的唯一区别，其他一样，有执行期上下文，可以传参等等</p></li><li><p>针对初始化功能的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;()); <span class="comment">// W3C 建议第一种</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)();</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;();</span><br><span class="line">+ <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">- <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">! <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 陷阱</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c, d)</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 比报错也不执行</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="闭包2"><a href="#闭包2" class="headerlink" title="闭包2"></a>闭包2</h3><ul><li><p>针对for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10个10</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们只看第一个for循环， 因为第二个只是为了执行</span></span><br><span class="line"><span class="comment">在for循环中 i 是不停在变的，我们要知道，函数只有在执行的时候才会被读取语句，当return完的时候，test函数才执行结束，而此时所有return出来的函数用的都是 test的AO，并且这个testAO里面for循环出来的i已经变成 10 了，当我们执行 myArr 的时候，用的就是 i = 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>解决办法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (es6) let</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">            arr[j] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.write(j + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在for循环中：</span></span><br><span class="line"><span class="comment">(function (0) &#123;</span></span><br><span class="line"><span class="comment">// j = 0</span></span><br><span class="line"><span class="comment">    arr[0] = function () &#123;</span></span><br><span class="line"><span class="comment">        document.write(j + " ");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;(0)) </span></span><br><span class="line"><span class="comment">// ———— 马上执行，然后将arr[0]丢到test的arr里面，等待被return出去,</span></span><br><span class="line"><span class="comment">// 此时立即执行函数的AO依然被arr[0]这个函数保存在arr[0]的[[scope]]里</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(function (1) &#123;</span></span><br><span class="line"><span class="comment">// j = 1</span></span><br><span class="line"><span class="comment">    arr[1] = function () &#123;</span></span><br><span class="line"><span class="comment">        document.write(j + " ");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;(1)) // ———— 马上执行，然后将arr[1]丢到test的arr里面，等待被return出去</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> food = <span class="string">"apple"</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        eatFood : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (food != <span class="string">""</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"I am eating "</span> + food);</span><br><span class="line">                food = <span class="string">""</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"There is nothing!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        pushFood: <span class="function"><span class="keyword">function</span> (<span class="params">myFood</span>) </span>&#123;</span><br><span class="line">            food = myFood</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = test();</span><br><span class="line">person.eatFood(); <span class="comment">// I am eating apple</span></span><br><span class="line">person.eatFood(); <span class="comment">// There is nothing!</span></span><br><span class="line">person.pushFood(<span class="string">'banana'</span>); </span><br><span class="line">person.eatFood(); <span class="comment">// I am eating banana</span></span><br><span class="line"><span class="comment">// 大家保存的都是同一个域，所以公用food这个变量（缓存）</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里巴巴uc事业社招笔试题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用原生js，addEventListener，给每个li元素绑定一个click事件，输出他们的顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ulList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> liList = ulList.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; liList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                liList[j].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(j)</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;(i))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 同样可以用let解决</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 腾讯微店</span></span><br><span class="line"><span class="comment">写一个方法，求一个字符串的字节长度</span></span><br><span class="line"><span class="comment">提示： charCodeAt(); 一个中文占两个字节, 一个英文占两个字节, </span></span><br><span class="line"><span class="comment">charCodeAt()方法可返回置顶位置的字符得到Unicode编码，这个返回值是0-65535之间的整数</span></span><br><span class="line"><span class="comment">当返回值是 &lt;= 255时为英文（占1个字节）, 当返回值 &gt; 255 时为中文（占2个字节）</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retByteslen</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count,</span><br><span class="line">        len;</span><br><span class="line">    count = len = target.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.charCodeAt(i) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>逗号表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="number">1</span> - <span class="number">1</span>, <span class="number">1</span> + <span class="number">1</span>, <span class="number">2</span> + <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 一定要用括号括起来， 括号里面需要计算的先计算，，最后返回最后一个的计算结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(f))  <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// (function f() &#123;&#125;) ==&gt; 被括号变成了表达式，函数名被忽略了</span></span><br><span class="line">    x += <span class="keyword">typeof</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// "1undefined"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 阿里巴巴UC社招笔试题： body 插入 一个div（原生js）</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">body.appendChild(oDiv);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数作用域链&lt;/p&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://hsiliver.space/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>js简介</title>
    <link href="https://hsiliver.space/2019/07/08/js%E7%AE%80%E4%BB%8B/"/>
    <id>https://hsiliver.space/2019/07/08/js简介/</id>
    <published>2019-07-08T06:45:09.000Z</published>
    <updated>2019-07-08T14:02:17.147Z</updated>
    
    <content type="html"><![CDATA[<p>js —— Javascript：解释性语言</p><h2 id="js-——JavaScript：解释性语言"><a href="#js-——JavaScript：解释性语言" class="headerlink" title="js ——JavaScript：解释性语言"></a>js ——JavaScript：解释性语言</h2><p>同时也叫  ECMAScript</p><ul><li><p><strong>编译</strong>    C，C++等</p><p>​    优点：快</p><p>​    不足：移植性不好，(不跨平台)</p></li></ul><ul><li><strong>解释</strong>    javascrip， php等</li></ul><p>​        优点：跨平台（不需要编译成文件）</p><p>​        不足：稍慢</p><ul><li><strong>混合型</strong>    Java</li></ul><p>​        .java –&gt;javac –&gt; 编译 –&gt; .class —-&gt; jvm —-&gt; 解释执行（两个都不是）</p><p>生活中的异步就是js的同步</p><p>单线程，同一时间处理一件事</p><h4 id="那是怎么模拟成多线程呢？"><a href="#那是怎么模拟成多线程呢？" class="headerlink" title="那是怎么模拟成多线程呢？"></a>那是怎么模拟成多线程呢？</h4><p>处理事件足够快的情况下，就可以做到看起来同时在做同一时间在做多件事</p><p>专业术语： 轮转时间片（争抢时间）</p><ol><li><p><strong>主流浏览器</strong>：</p><p>​    IE —————— trident</p><p>​    Chrom ———— webkit / blink</p><p>​    Firefox ———— Gecko</p><p>​    Opera ————  presto</p><p>​    Safari ————   webkit</p></li><li><p><strong>引入js</strong></p><p>​    页面嵌入<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></p><p>​    外部js文件<code>&lt;script type=&quot;text/javascript&quot; src=&quot;./***.js&quot;&gt;&lt;/script&gt;</code></p><p>​    为符合W3C标准 结构(html)    行为(js)     样式(css)    相分离</p><p>​    编程语言特点： 有变量( variable )</p><p>​    html，css属于脚本语言，计算机语言( 依然不影响它们的强大 )</p></li><li><p><strong>变量声明</strong></p><p>​    <code>var a;</code>—— 向window申请一个地方叫a</p><p>​    多个变量时尽量单一 var</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,</span><br><span class="line">b,</span><br><span class="line">c;</span><br></pre></td></tr></table></figure></li><li><p><strong>变量赋值</strong></p><p>​    <code>a = 100;</code>—— 把100给a</p><p>​    再次赋值111给 a ，则原来100会被替换</p></li><li><p><strong>变量命名规则</strong></p><ul><li>变量名必须以包括 英文字母，_  ,  $ 开头 </li><li>变量名可以包括     英文字母， _  , $ 数字 </li><li>不可以用系统关键字(var new break else等)， 保留字作为变量名  (float int long class等)</li></ul></li><li><p><strong>运算优先级 &gt; 赋值</strong></p></li><li><p><strong>值的类型</strong></p><p>原始值 （stack）栈内存 first in, last out （不可改变性）</p><p>​    Number ———— 数字（1, 2, 3, 4）</p><p>​    Boolean ———— 布尔（true / false）</p><p>​    String ————— 字符串（’ 123 ‘， “ 123 “）</p><p>​    undefined ——— 没有定义的（undefined）</p><p>​    null —————— 空—–占位（null）</p><p>引用值（heap）堆内存</p><p>​    Array ————— 数组（[1, 2, 3, 4]）</p><p>​    Object ————  对象（{a: 1, b: 2}）</p><p>​    function ———   函数（function () {}）</p><p>​    Data ————— Data（）</p><p>​    RegExp ———— 正则（//）</p></li></ol><ul><li><p>Number、Stirng、Boolean、Null、Underfined这些基本数据类型，他们的值直接保存在栈中;</p><p><code>栈内存与栈内存之间是复制的关系var b = a;</code></p><p><img src="/myblog/2019/07/08/js简介/zhan2.PNG" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = num;</span><br><span class="line">num = <span class="number">200</span>；</span><br><span class="line"></span><br><span class="line">事实上 —— <span class="number">100</span> 依然存在，只是剪断了 num 与 <span class="number">100</span> 的关系</span><br><span class="line">然后重新在 <span class="built_in">window</span> 弄了个 num1 </span><br><span class="line">再然后将原来的 num值（<span class="number">100</span>）赋给 num1，</span><br><span class="line">最后又重新找<span class="built_in">window</span>要了个地方叫num，将原来的num地方抹去变量名，再把<span class="number">200</span>赋值给num</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Object、Function、Array、Date、RegExp这些引用类型，他们的引用变量（地址）储存在栈中，通过指针（这个地址）指向储存在堆中的实际对象</p><table><thead><tr><th align="left">对象</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left">Array</td><td align="left">将 Array 的元素转换为字符串。结果字符串由逗号分隔，且连接起来。</td></tr><tr><td align="left">Boolean</td><td align="left">如果 Boolean 值是 true，则返回 “true”。否则，返回 “false”。</td></tr><tr><td align="left">Date</td><td align="left">返回日期的文字表示法。</td></tr><tr><td align="left">Error</td><td align="left">返回一个包含相关错误信息的字符串。</td></tr><tr><td align="left">Function</td><td align="left">返回如下格式的字符串，其中 functionname 是被调用 toString 方法函数的名称：function functionname( ) { [native code] }</td></tr><tr><td align="left">Number</td><td align="left">返回数字的文字表示。</td></tr><tr><td align="left">String</td><td align="left">返回 String 对象的值。</td></tr><tr><td align="left">默认</td><td align="left">返回 “[object objectname]”，其中 objectname 是对象类型的名称。</td></tr></tbody></table></li></ul>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr;</span><br><span class="line">arr.push(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>   <img src="/myblog/2019/07/08/js简介/zhan.PNG" alt></p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr;</span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>   <img src="/myblog/2019/07/08/js简介/zhan3.PNG" alt></p><ul><li><h4 id="js语句基本规则"><a href="#js语句基本规则" class="headerlink" title="js语句基本规则"></a>js语句基本规则</h4><ul><li><p>语句后面加分号结束 “ ; “</p></li><li><p>js语法错误会引发后续代码终止，但不会影响其他<strong>js代码块</strong></p><p>低级错误：（语法解析错误）出现中文符号等</p><p>逻辑错误：（标准错误， 情有可原）没有定义变量等</p><p>一个<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;script/&gt;</code>就是一个js代码块</p></li><li><p>书写格式要规范， “ = + / - “ 两遍呢都应该有空格</p></li></ul></li><li><h4 id="运算操作符"><a href="#运算操作符" class="headerlink" title="运算操作符"></a>运算操作符</h4><ul><li><p>数学运算，字符串连接</p></li><li><p>任何数据类型加字符串都等于字符串</p></li><li><p>“ + “ , “ - “ , “ * “, “ / “ , “ % “ , “ () “</p></li><li><p>优先级 “ = “ 最弱， “ () “ 最强</p></li><li><p>“ ++ “ , “ – “ , “ += “ , “-=” , “ /=” , “ *= “, “ %= “</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a++  ——&gt; a = a + 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a++ ); <span class="comment">// 先打印a，再 ++   10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log( ++b ); <span class="comment">// 先 ++ ，再打印a  21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = ++num1 - <span class="number">1</span> + num1++; <span class="comment">// 但是工作这样写是不行的，要新人都可以看懂才好</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 + <span class="string">' '</span> + num1); <span class="comment">// 21 12 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// num += 10;  ——&gt; num = num + 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换 n 和 m 的值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">234</span>;</span><br><span class="line"><span class="number">1.</span> </span><br><span class="line"><span class="keyword">var</span> c = n;</span><br><span class="line">n = m;</span><br><span class="line">m = c;</span><br><span class="line"><span class="number">2.</span> </span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line"><span class="number">3.</span> </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="string">'a'</span>; <span class="comment">// 1a</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span> / <span class="number">0</span>;   <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span> / <span class="number">0</span>;   <span class="comment">// infinity</span></span><br><span class="line"><span class="number">4.</span> </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = ++a + <span class="number">1</span>; <span class="comment">// 3 '++'第一运算</span></span><br><span class="line"><span class="keyword">var</span> c = a++ + <span class="number">1</span>; <span class="comment">// 2 '++'最后才运算</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li><p>“ &lt; “ , “ &gt; “ , “ = “ , “ &gt;= “ , “ &lt;= “ , “==” , “ != “ , “ === “ </p></li><li><p>字符串比较的是 ASCLL 码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'10'</span> &gt; <span class="string">'8'</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#125; == &#123;&#125;; <span class="comment">// false</span></span><br><span class="line">[] == []; <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li><p>“ <code>&amp;&amp;</code> “ , “ <code>||</code> “ , “ <code>!</code>“ —— 运算的结果为真实值</p></li><li><p>“ <code>&amp;&amp;</code> “ —— 表达式转换成布尔值的结果，如果结果为真，那么它会看第二个表达式转换为布尔值的结果，然后如果只有两个表达式的话，只要看到第二个表达式，就返回表达式的值了，简单来说：<strong>遇到为<code>false</code>的值返回 这个值，遇到全为<code>true</code>的值就返回 最后一个值, 有中断的作用，所以可以作为”如果，那么”:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">document</span>.write(<span class="string">'aaa'</span>)</span><br></pre></td></tr></table></figure></li><li><p>“ <code>||</code> “ —— 遇到为<code>true</code>的值返回 这个值，遇到全为<code>false</code>的值就返回 最后一个值</p></li><li><p>“<code>!</code> “ —— 转换为布尔值再取反，   <code>!!NaN</code>转换为布尔值, 调用<code>Boolean()</code></p></li><li><p>undefined, null, NaN, “”, 0 —— 这五个值返回的布尔值都是FALSE</p></li></ul></li></ul><h3 id="条件语句循环语句"><a href="#条件语句循环语句" class="headerlink" title="条件语句循环语句"></a>条件语句循环语句</h3><ul><li><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p> —— 括号里的条件为true就运行 “{}” 里面的</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">0</span> &amp;&amp; <span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> () &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">     <span class="comment">// 类似排除法</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) &#123;</span><br><span class="line">    <span class="comment">// (1) —————（2）—————（3）</span></span><br><span class="line"><span class="comment">// 减少我们的重复</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>) <span class="comment">// 打印10个a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">for 循环执行顺序：</span></span><br><span class="line"><span class="comment">先执行一遍（1）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">直到（2）有一次条件不成立，立马停止</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. var i = 0;</span></span><br><span class="line"><span class="comment">2. if (i &lt; 10) &#123;</span></span><br><span class="line"><span class="comment">console.log('a')</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3. i++; ---&gt; i = 1;</span></span><br><span class="line"><span class="comment">4. if (i &lt; 10) &#123;</span></span><br><span class="line"><span class="comment">console.log('a')</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">5. …………</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="while循环（简化版的for循环）"><a href="#while循环（简化版的for循环）" class="headerlink" title="while循环（简化版的for循环）"></a>while循环（简化版的for循环）</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (;i &lt; 10;) &#123;</span></span><br><span class="line"><span class="comment">console.log(i);</span></span><br><span class="line"><span class="comment">i++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两个一样的效果</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><ol><li><p>计算2的n次幂，n可输入，n为自然数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    mul *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mul)</span><br><span class="line"><span class="comment">// 先找规律，在写</span></span><br></pre></td></tr></table></figure></li><li><p>计算n的阶乘，n可输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="comment">// parseInt() 函数可解析一个字符串，并返回一个整数。</span></span><br><span class="line"><span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">mul *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mul);</span><br></pre></td></tr></table></figure></li><li><p>著名的斐波那契数列， 输出第n项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="keyword">var</span> first = <span class="number">1</span>,</span><br><span class="line">    secend = <span class="number">2</span>,</span><br><span class="line">    third;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n<span class="number">-2</span>; i ++) &#123;</span><br><span class="line">        third = first + secend;</span><br><span class="line">        first = secend;</span><br><span class="line">        secend = third;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(third);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>编写程序， 输入一个三位数的正整数， 输出时反向输出。如：456 —&gt; 654</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>输入a, b, c三个数字，打印出最大的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; c) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(b)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印出100以内的质数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.sqrt(i); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i + <span class="string">"  "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><h4 id="switch-case，-break，-continue"><a href="#switch-case，-break，-continue" class="headerlink" title="switch case， break， continue"></a>switch case， break， continue</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="built_in">window</span>.prompt(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">switch</span> (data) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"monday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"wednesday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"thursday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"friday"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wroking'</span>);</span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"saturday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"sunday"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'relaxing'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>   <strong>break ———— 终止循环（只要是循环就可以用，而且要写在循环里面）</strong></p><p>   <strong>continue ——   终止本次循环，继续下次循环</strong></p><h2 id="typeof-类型转换"><a href="#typeof-类型转换" class="headerlink" title="typeof 类型转换"></a>typeof 类型转换</h2><ul><li><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">undefined</span>, [], &#123;&#125;];</span><br><span class="line"><span class="comment">// 里面可以放很多东西</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">lastname</span>: <span class="string">"huang"</span>, <span class="attr">male</span>: <span class="string">"male"</span>, <span class="attr">number</span>: <span class="number">123</span>&#125;</span><br><span class="line"><span class="comment">// 里面可以放很多东西</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="编程形式的区别"><a href="#编程形式的区别" class="headerlink" title="编程形式的区别"></a>编程形式的区别</h3><ul><li><h4 id="面向过程（分步骤，能不能做）"><a href="#面向过程（分步骤，能不能做）" class="headerlink" title="面向过程（分步骤，能不能做）"></a>面向过程（分步骤，能不能做）</h4></li><li><h4 id="面向对象（谁来做）"><a href="#面向对象（谁来做）" class="headerlink" title="面向对象（谁来做）"></a>面向对象（谁来做）</h4></li></ul><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof可以给我们返回6个值</p><p>*<em>Number  String   boolean  object  undefined  function *</em></p><p>两种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>); <span class="comment">// object—— 历史遗留问题</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'a'</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">/*那些看起来不是数字的，就转不了*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>() <span class="comment">// 函数可解析一个字符串，并返回一个整数。相当于Number的小弟</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">parseInt(’10‘, 16) ——&gt; 16  16为基底，转化为10进制的数</span></span><br><span class="line"><span class="comment">parseInt(string, radix) ---&gt; radio取值范围[2, 32]</span></span><br><span class="line"><span class="comment">parseInt(’10abc‘)  ————&gt; 返回数值10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="number">1222.22</span>); <span class="comment">// 1222.22 类似parseInt(), 但是只有一个参数，转化为浮点型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="number">123</span>) <span class="comment">// '123' String(mix)转换为字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(value); </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">转换为布尔类型如果省略 value 参数，或者设置为 0、-0、null、""、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 "false"）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">toString()</span><br><span class="line"><span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num = demo.toString(); <span class="comment">// undefined 和 NaN 用不了这个方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">demo.toString(redix); 把123转换为目标进制的数，跟 parseInt(string, radix) 配合用，可以转来转去</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"NaN"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(abc));   <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">123</span>));   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"abc"</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为啥会这样子呢？</span></span><br><span class="line"><span class="comment">因为调用 isNaN() 的时候会隐式调用 Number("abc"),然后再跟 NaN 比对</span></span><br><span class="line"><span class="comment">isNaN(null) ——&gt; Number(null) -&gt; 0 ——&gt; NaN 所以结果是false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ++ 、-- 、+/- 、* 、/ 、% 、|| 、&amp;&amp; 、! 、&gt; 、&lt; 、&gt;= 、&lt;= 、== 、!=</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>        <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> (+<span class="string">'abc'</span>)  <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>(a);         <span class="comment">// undefined  未定义的变量在typeof里面不报错</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a))  <span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIsNaN</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="built_in">Number</span>(num);</span><br><span class="line">    ret += <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="string">"NaN"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="literal">false</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="literal">false</span> == <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(demo);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (+<span class="literal">undefined</span>) + <span class="string">""</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"基础扎实"</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    typeof(a) == "undefined"</span></span><br><span class="line"><span class="comment">    -true == -1</span></span><br><span class="line"><span class="comment">    +undefined == NaN</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">11</span> + <span class="string">"11"</span> * <span class="number">2</span> == <span class="number">33</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"基础扎实"</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    "11" * 2 == 22, "11" - 2 == 9, "10" / 2 == 5, "11" + 2 = "112"</span></span><br><span class="line"><span class="comment">    "11" % 2 == 1, +"11" + 2 = 13</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!!<span class="string">" "</span> + !!<span class="string">""</span> - !!<span class="literal">false</span> || <span class="built_in">console</span>.log(<span class="string">'能打印，猪都能上树'</span>);</span><br><span class="line"><span class="comment">// true + false - false == 1</span></span><br></pre></td></tr></table></figure><h3 id="不发生类型转换的"><a href="#不发生类型转换的" class="headerlink" title="不发生类型转换的"></a>不发生类型转换的</h3><p><code>=== 、!==</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js —— Javascript：解释性语言&lt;/p&gt;
&lt;h2 id=&quot;js-——JavaScript：解释性语言&quot;&gt;&lt;a href=&quot;#js-——JavaScript：解释性语言&quot; class=&quot;headerlink&quot; title=&quot;js ——JavaScript：解释性语
      
    
    </summary>
    
    
      <category term="javascript" scheme="https://hsiliver.space/tags/javascript/"/>
    
  </entry>
  
</feed>
