<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hsiliver个人博客</title>
  
  <subtitle>桃李不言，下自成蹊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.hsiliver.space/"/>
  <updated>2019-06-01T11:32:38.140Z</updated>
  <id>http://www.hsiliver.space/</id>
  
  <author>
    <name>hsiliver</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.hsiliver.space/2019/07/09/README/"/>
    <id>http://www.hsiliver.space/2019/07/09/README/</id>
    <published>2019-07-09T01:43:48.932Z</published>
    <updated>2019-06-01T11:32:38.140Z</updated>
    
    <content type="html"><![CDATA[<h4 id="js简介"><a href="#js简介" class="headerlink" title="js简介"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/js简介.md" target="_blank" rel="noopener">js简介</a></h4><h4 id="函数-作用域链"><a href="#函数-作用域链" class="headerlink" title="函数_作用域链"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/函数_作用域链.md" target="_blank" rel="noopener">函数_作用域链</a></h4><h4 id="对象-包装类"><a href="#对象-包装类" class="headerlink" title="对象_包装类"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/对象_包装类.md" target="_blank" rel="noopener">对象_包装类</a></h4><h4 id="原型，原型链"><a href="#原型，原型链" class="headerlink" title="原型，原型链"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/原型，原型链.md" target="_blank" rel="noopener">原型，原型链</a></h4><h4 id="让call-apply原形毕露"><a href="#让call-apply原形毕露" class="headerlink" title="让call-apply原形毕露"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/call-apply.md" target="_blank" rel="noopener">让call-apply原形毕露</a></h4><h4 id="继承模式，命名空间"><a href="#继承模式，命名空间" class="headerlink" title="继承模式，命名空间"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/继承模式，命名空间.md" target="_blank" rel="noopener">继承模式，命名空间</a></h4><h4 id="this小知识"><a href="#this小知识" class="headerlink" title="this小知识"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/this.md" target="_blank" rel="noopener">this小知识</a></h4><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/数组.md" target="_blank" rel="noopener">数组</a></h4><h4 id="try…catch-es5严格模式"><a href="#try…catch-es5严格模式" class="headerlink" title="try…catch,es5严格模式"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/try...catch,es5严格模式.md" target="_blank" rel="noopener">try…catch,es5严格模式</a></h4><h4 id="DOM-知识点"><a href="#DOM-知识点" class="headerlink" title="DOM 知识点"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/DOM.md" target="_blank" rel="noopener">DOM 知识点</a></h4><h4 id="date对象、定时器"><a href="#date对象、定时器" class="headerlink" title="date对象、定时器"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/date对象、定时器.md" target="_blank" rel="noopener">date对象、定时器</a></h4><h4 id="获取视口属性，脚本化"><a href="#获取视口属性，脚本化" class="headerlink" title="获取视口属性，脚本化"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/获取视口属性，脚本化css.md" target="_blank" rel="noopener">获取视口属性，脚本化</a></h4><h4 id="事件"><a href="#事件" class="headerlink" title="事件"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/事件.md" target="_blank" rel="noopener">事件</a></h4><h4 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/JSON.md" target="_blank" rel="noopener">JSON</a></h4><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a><a href="https://github.com/z826526354/myProject/blob/master/js基础/正则表达式.md" target="_blank" rel="noopener">正则表达式</a></h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;js简介&quot;&gt;&lt;a href=&quot;#js简介&quot; class=&quot;headerlink&quot; title=&quot;js简介&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://github.com/z826526354/myProject/blob/master/js基础/js简介.md&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://www.hsiliver.space/2019/07/08/正则表达式/</id>
    <published>2019-07-08T14:05:58.000Z</published>
    <updated>2019-07-09T02:08:29.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择</p><ul><li><p>最基本用法：</p><p>转移字符 “ \ “ : 会把 \ 后面的字符转为文本</p><p>“ \n “ : 回车键</p><p>“ \r “ : 该文本行结束</p><p>“ \t “ : 一个tab（制表符缩进）</p></li><li><p>两种创建方式</p><p>直接量(常用)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/</span>;  <span class="comment">// 定义一个匹配abc的规则</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line">reg.test(str); <span class="comment">// 测试方法：是否符合上面的reg规则</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/abc/i</span>; <span class="comment">// 忽视大小写（ignoreCase）</span></span><br></pre></td></tr></table></figure></li></ul><p>  <code>new RegExp();</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"abc"</span>, <span class="string">'i'</span>);第二个值填匹配规则</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'ABCD'</span>;</span><br><span class="line">reg.test(str);</span><br><span class="line"><span class="comment">// 效果同上</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(reg)</span><br><span class="line"><span class="comment">// reg1跟reg内容相同，但本质上不是同一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="built_in">RegExp</span>(reg);</span><br><span class="line"><span class="comment">// reg跟reg2内容相同， 并且本质上是同一个人（当然也没什么人这么用）</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abbababab"</span>;</span><br><span class="line">str.match(reg); <span class="comment">// 返回["ab"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果全局匹配</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/g</span>;</span><br><span class="line"><span class="comment">// 返回的就是所有的匹配正确的 ["ab", "ab", "ab", "ab"]</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/g</span>; <span class="comment">// 匹配全局 以a开头 的所有符合要求的 ["a"]</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abcde\na"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^a/gm</span>; <span class="comment">// m具有匹配多行的功能，["a", "a"]</span></span><br></pre></td></tr></table></figure><ul><li><p>两种常用的方法</p><p><code>reg.test()</code>：返回值只有true、false</p><p><code>str.match()</code> ： 返回具体匹配的项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当我们需要匹配多位的时候，就可以使用表达式“[]”了,里面填可以取到的范围</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[1234567890][1234567890][1234567890]/g</span>;</span><br><span class="line"><span class="comment">// 还可以偷懒写 [0-9A-z], 正则也是符合ASCLL码匹配的</span></span><br><span class="line"><span class="comment">// 全局匹配连着3位是数字0-9的符合要求的</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"123adsdaf45730258afdgw"</span>;</span><br><span class="line"><span class="comment">// ["123", "457", "302"]</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(abc|bcd)/g</span>; <span class="comment">// 全局匹配abc或bcd，正则里的 “|” 代表或</span></span><br></pre></td></tr></table></figure><ul><li><p>元字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w/g</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">/\w === [0-9A-z_];</span></span><br><span class="line"><span class="comment">\W === [^\w]; ==&gt;[非\w]</span></span><br><span class="line"><span class="comment">\d === [0-9];</span></span><br><span class="line"><span class="comment">\D === [^\d];</span></span><br><span class="line"><span class="comment">同时表达式里面也是可以写元字符的 var reg = /[\w]/g</span></span><br><span class="line"><span class="comment">\s === [空白字符] ==&gt; </span></span><br><span class="line"><span class="comment">空格( )，回车(\r)， 制表(\t)，换行(\n)，垂直换行(\v)，换页(\f)</span></span><br><span class="line"><span class="comment">\S === [^\s];</span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\bcde\b/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc cde fgh"</span>;</span><br><span class="line"><span class="comment">// ["cde"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// \b === 单词边界</span></span><br><span class="line"><span class="comment">// \B === 非单词边界</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/[\u0000-\uffff]/g</span>; <span class="comment">// 匹配所有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// . === [^\r\n];</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w+/g</span>;</span><br><span class="line"><span class="comment">// 全局匹配 \w "可以" 出现无数次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// n+ ==&gt; &#123;1, infinity&#125;</span></span><br><span class="line"><span class="comment">// n* ==&gt; &#123;0, infinity&#125;</span></span><br><span class="line"><span class="comment">// 贪婪匹配原则</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w*/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>; <span class="comment">// ["abc", ""]</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\d*/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>; <span class="comment">// ["", "", "", ""]</span></span><br><span class="line"><span class="comment">// 不能识别的就用会空代表</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w?/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aaa"</span>;<span class="comment">// ["a", "a", "a", ""]</span></span><br><span class="line"><span class="comment">// n? ==&gt; &#123;0, 1&#125;</span></span><br><span class="line"><span class="comment">// n&#123;x, &#125; ==&gt; &#123;x, infinity&#125;</span></span><br><span class="line"><span class="comment">// 贪婪匹配原则</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/\w&#123;1, 3&#125;/g</span>; <span class="comment">// 全局匹配1-3个</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaa"</span>; <span class="comment">// ["aaa", "a"];</span></span><br></pre></td></tr></table></figure>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^sd$/g</span>; <span class="comment">// 以sd开头，以sd结尾</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"sd"</span>; <span class="comment">// ["sd"]</span></span><br><span class="line"><span class="comment">// n$ ==&gt; 以什么结尾</span></span><br><span class="line"><span class="comment">// ^n ==&gt; 以什么开头</span></span><br></pre></td></tr></table></figure><p>  检验一个字符串，首尾是否含有数字的 正则表达式</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^\d|\d$/</span>;</span><br><span class="line"><span class="comment">// 首尾都有数字 var reg = /^\d[\s\S]*\d$/</span></span><br></pre></td></tr></table></figure><ul><li><p><code>reg.exec()</code>和<code>reg.lastIndex</code>(鼠标游标位置)，两者是相互配合使用的</p><p>如果不加 <code>g</code> 的话，lastIndex不会变，不动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/ab/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"abababab"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 2 ["ab", index: 0, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 4 ["ab", index: 2, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 6 ["ab", index: 4, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 8 ["ab", index: 6, input: "abababab", groups: undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 0 null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex);</span><br><span class="line"><span class="comment">// 2 ["ab", index: 0, input: "abababab", groups: undefined]</span></span><br></pre></td></tr></table></figure></li><li><p><code>()</code>的记录功能</p><p>加上括号后括号就会记录里面的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> str = <span class="string">'aaaa'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1/g</span>;</span><br><span class="line">  <span class="comment">// 全局匹配 \w\w , \1（反向引用）类似复制一个与第一个子表达式一样的匹配表达式</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(reg.exec(str));</span><br><span class="line"><span class="comment">// ["aabb", "a", "b", index: 0, input: "aaaa", groups: undefined]</span></span><br><span class="line"><span class="comment">// 多出来的两位就是 第一个子表达式和第二个子表达式匹配的内容，而且这两位是正式的数据位</span></span><br></pre></td></tr></table></figure><p>  <code>str.match()</code></p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));</span><br><span class="line"><span class="comment">// ["aabb", "a", "b", index: 0, input: "aaaa", groups: undefined]</span></span><br><span class="line"><span class="comment">// 不加 全局g 的情况下， 返回的结果跟reg的exec方法类似</span></span><br><span class="line"><span class="comment">// 一旦加了g 返回 ["aabb"];</span></span><br></pre></td></tr></table></figure><p>  <code>str.search()</code>返回匹配到的位置</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^bcd$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(reg)); </span><br><span class="line"><span class="comment">// 一旦匹配不到就返回 -1；</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/bb$/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(reg1)); <span class="comment">// 2 "0 a 1 a 2 b 3 b 4",第二位匹配到</span></span><br></pre></td></tr></table></figure><p>  <code>str.split()</code>拆开，这个我们很熟悉，不过多解释</p><p>  <code>str.replace()</code> 替换</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正常的replace:</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aa"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="string">"a"</span>, <span class="string">"b"</span>)); <span class="comment">// ba, 这就是非正则的缺陷，只能匹配1个</span></span><br><span class="line"><span class="comment">// 再来换成正则表达式</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg));  <span class="comment">// ba ，因为没有写 g（全局）</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/a/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg1)); <span class="comment">// bb</span></span><br></pre></td></tr></table></figure><p>  eg : 形如 aabb 的都倒过来</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1(\w)\2/</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"aabb"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="string">"$2$2$1$1"</span>)); <span class="comment">// 方法1</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span>, $<span class="number">2</span></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 第一个参数是正则表达式匹配的结果,</span></span><br><span class="line">    <span class="comment">// 第二个参数是第一个子表达式匹配的内容，</span></span><br><span class="line">    <span class="comment">// 第三个参数是第二个子表达式匹配的内容，</span></span><br><span class="line">    <span class="keyword">return</span> $<span class="number">2</span> + $<span class="number">2</span> + $<span class="number">1</span> + $<span class="number">1</span>;</span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// str.toUpperCase(),变大写</span></span><br><span class="line"><span class="comment">// str.toLowerCase(),变小写</span></span><br></pre></td></tr></table></figure><p>  eg : the-first-name ===&gt; theFirstName</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/-(\w)/g</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"the-first-name"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">$, $<span class="number">1</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> $<span class="number">1.</span>toUpperCase();</span><br><span class="line">    <span class="comment">// 里面的function是多次执行的</span></span><br><span class="line">&#125;))</span><br><span class="line"><span class="comment">// 可以制作在线翻译功能</span></span><br></pre></td></tr></table></figure><h5 id="正向预查，-正向断言"><a href="#正向预查，-正向断言" class="headerlink" title="正向预查， 正向断言"></a>正向预查， 正向断言</h5>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abaaaaa"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a(?=b)/g</span>; <span class="comment">// 全局匹配后面有 b 的 a</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg)); <span class="comment">// a</span></span><br><span class="line"><span class="comment">// 意思是这个b参与匹配限定，但是不参与返回结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a(?!b)/g</span>; <span class="comment">// 全局匹配后面没有 b 的 a ==&gt; 非正向预查</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));<span class="comment">// ["a", "a", "a", "a", "a"];</span></span><br></pre></td></tr></table></figure><p>  非贪婪匹配</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaa"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a+/g</span>; <span class="comment">// 贪婪</span></span><br><span class="line"><span class="keyword">var</span> reg1 = <span class="regexp">/a+?/g</span> <span class="comment">// 非贪婪</span></span><br><span class="line"><span class="keyword">var</span> reg2 = <span class="regexp">/a&#123;1, 3&#125;?/g</span>;  <span class="comment">// 有1绝对不取3，？可以打破任何规则</span></span><br><span class="line"><span class="keyword">var</span> reg3 = <span class="regexp">/a??/g</span>; <span class="comment">// 能取0就不会取1， a? 匹配 0 ~ 1 位a</span></span><br></pre></td></tr></table></figure><p>百度2014最后一道</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"10000000000"</span>; <span class="comment">// 转换为形如 1,000,000,000</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(?=(\B)(\d&#123;3&#125;)+$)/g</span>; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">$ ==&gt; 从后往前查</span></span><br><span class="line"><span class="comment">n+ ==&gt; &#123;1, infinity&#125;</span></span><br><span class="line"><span class="comment">\d ==&gt; &#123;0-9&#125;</span></span><br><span class="line"><span class="comment">\B ==&gt; 非单词边界</span></span><br><span class="line"><span class="comment">？= ==&gt; 参与匹配限定，但是不参与返回结果</span></span><br><span class="line"><span class="comment">()前面什么也不填 ==&gt; 匹配空</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line">str.replace(reg, <span class="string">"."</span>);</span><br><span class="line"><span class="comment">// 空替换为 "."</span></span><br></pre></td></tr></table></figure><p>去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aaaaabbbbbccccc"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/(\w)\1*/g</span>;</span><br><span class="line"><span class="comment">// n* ==&gt; &#123;0~infinity&#125;;</span></span><br><span class="line"><span class="comment">// 匹配所有 0到多个 ： ["aaaaa", "bbbbb", "ccccc"]</span></span><br><span class="line">str.replace(reg, <span class="string">"$1"</span>);</span><br><span class="line"><span class="comment">// 将匹配到的替换成第一个子表达式</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h2&gt;&lt;p&gt;作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;最基本用法：&lt;/p&gt;
&lt;p&gt;转移
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="正则表达式" scheme="http://www.hsiliver.space/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://www.hsiliver.space/2019/07/08/JSON/"/>
    <id>http://www.hsiliver.space/2019/07/08/JSON/</id>
    <published>2019-07-08T14:04:58.000Z</published>
    <updated>2019-07-09T02:07:31.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><ul><li><p>JSON是一种数据传输的格式（以对象喂养版，本质上就是对象，但用途有区别，对象就是本地用的，JSON是用来传输的）</p></li><li><p>格式</p><p>属性名必须加双引号，属性值最好加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span> : <span class="string">"hsz"</span>,</span><br><span class="line"><span class="attr">"age"</span> : <span class="number">123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们传输给后台的是字符串，后台传输给咱们的也是字符串，只不过是JSON格式的字符串<code>&#39;{&quot;name&quot; : &quot;hsz&quot;, &quot;age&quot; : 123}&#39;</code>, 下面这两种方法就是用来转化的</p></li><li><p><code>JSON.parse();</code>       string ——&gt; json</p></li><li><p><code>JSON.stringify();</code>       json ——&gt; string</p></li></ul><h3 id="renderTree"><a href="#renderTree" class="headerlink" title="renderTree"></a>renderTree</h3><h5 id="一-DOM树的完成（2步）"><a href="#一-DOM树的完成（2步）" class="headerlink" title="一. DOM树的完成（2步）"></a>一. DOM树的完成（2步）</h5><p>1 dom树的解析完成，</p><p>2 dom树的加载完成</p><ul><li><p>dom树的解析</p><p>1 ） html解析原则：深度优先原则，一条道走到底</p><p>2 ） 识别到了就丢到dom树上去, 比如<code>&lt;img src=&quot;&quot;&gt;</code>, dom树不会去管src的内容，认识<code>&lt;img&gt;</code>就完事了</p></li></ul><h5 id="二-CSS树（跟DOM树类似）"><a href="#二-CSS树（跟DOM树类似）" class="headerlink" title="二. CSS树（跟DOM树类似）"></a>二. CSS树（跟DOM树类似）</h5><h5 id="renderTree-DOMTree-CSSTree"><a href="#renderTree-DOMTree-CSSTree" class="headerlink" title="renderTree = DOMTree + CSSTree"></a>renderTree = DOMTree + CSSTree</h5><p><strong>当renderTree形成完成后，JavaScript引擎才会开始真正开始绘制页面，按照renderTree里面的每一条规则去绘制页面</strong></p><h5 id="三-renderTree的重排（reflow）和重绘（repaint）"><a href="#三-renderTree的重排（reflow）和重绘（repaint）" class="headerlink" title="三 .renderTree的重排（reflow）和重绘（repaint）"></a>三 .renderTree的重排（reflow）和重绘（repaint）</h5><p>renderTree的重排会降低代码运行的效率</p><p>1）dom节点的删除，增加</p><p>2） dom节点的宽高变化，位置变化</p><p>3） offsetLeft offsetWidth（因为要求实时获取，所以要不断重排）</p><p>renderTree重绘会极少的降低效率（可以接受）</p><p>dom节点的颜色改变</p><h2 id="异步加载"><a href="#异步加载" class="headerlink" title="异步加载"></a>异步加载</h2><p>为什么js的加载过程和运行过程不能和html、css并行去做呢？</p><p>因为js会修改html和css，要么绘制完了运行，要么运行完了继续绘制</p><p>为什么<code>&lt;script&gt;&lt;/script&gt;</code> 要放在最后呢？</p><p>因为如果放在head里面，但凡js里面有一个字节没加载过来，整个页面就废掉了</p><h4 id="异步加载三个方案"><a href="#异步加载三个方案" class="headerlink" title="异步加载三个方案"></a>异步加载三个方案</h4><p>1）defer 异步加载，但要等到dom文档全部解析完才会被执行。可以加载内部脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">defer</span>=<span class="string">"defer"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// 但是很遗憾，只有IE9以下可以用</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加上defer后就可以和html，css同时加载了</p><p>2） async 异步加载，加载完就执行，async只能加载外部脚本，不可以加载<code>&lt;script&gt;</code>的内部脚本</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">async</span>=<span class="string">"async"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// W3C标准方法，只能加载外部脚本</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><u><strong>上面俩，执行时也不会阻塞页面</strong></u></p><p>3）动态创建script，插入到dom中，加载完毕后callback（最常用），还可以按需加载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">script.src = <span class="string">"./xxx.js"</span>; <span class="comment">// 开始下载"xxx.js"</span></span><br><span class="line"><span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 开始执行"xxx.js"</span></span><br></pre></td></tr></table></figure><p>如果我们想要执行xxx.js里面的方法的话，就需要等到xxx.js下载完成才可能执行</p><p>当然我们也有这样的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 就IE不好使</span></span><br><span class="line"></span><br><span class="line">script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(script.readState == <span class="string">"complete"</span> || script.readyState == <span class="string">"loaded"</span>)&#123;</span><br><span class="line">        <span class="comment">// ie独有</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以封装到一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScrpit</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    <span class="keyword">if</span> (script.readyState) &#123;</span><br><span class="line">        script.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(script.readState == <span class="string">"complete"</span> || script.readyState == <span class="string">"loaded"</span>)&#123;</span><br><span class="line">                <span class="comment">// 1 callback();// ie独有</span></span><br><span class="line">                <span class="comment">// 2 eval(callback);</span></span><br><span class="line">                tools[callback]();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        script.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 1 callback();</span></span><br><span class="line">            tools[callback]();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    script.src = url;<span class="comment">// 开始下载"xxx.js"</span></span><br><span class="line">    <span class="built_in">document</span>.head.appendChild(script); <span class="comment">// 开始执行"xxx.js"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 loadScrpit('tools.js', function () &#123;test()&#125;)</span></span><br><span class="line"><span class="comment">// 2 loadScrpit('tools.js', "test()");</span></span><br><span class="line">loadScrpit(<span class="string">'tools.js'</span>, <span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是第三种要求这样写函数体</span></span><br><span class="line"><span class="keyword">var</span> tools = &#123;</span><br><span class="line">    test : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'a'</span>);&#125;,</span><br><span class="line">    demo : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="js-加载时间线"><a href="#js-加载时间线" class="headerlink" title="js 加载时间线"></a>js 加载时间线</h2><ul><li>1 创建<code>Document</code>对象，开始解析对象，开始解析web页面。解析HTML元素和他们的文本内容后，添加Element对象和Text节点到文档中，这个阶段<code>document.readyState = &#39;loading&#39;</code>.</li><li>2 遇到link外部css，创建线程加载，并继续解析文档。</li><li>3 遇到script外部js，并且没有设置async、defer。浏览器加载并阻塞，等待加载完成并执行该脚本，然后继续解析文档。</li><li>4 遇到script外部js，并且设置有async、defer。浏览器创建线程加载，并继续解析文档。对于async属性的脚本，<u>脚本加载完成后执行</u>。（异步禁止使用<code>document.write()</code>）</li><li>5 遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。</li><li>6 当文档解析完成，<code>document.readyState = &#39;interactive&#39;</code>。</li><li>7 文档解析完成后，所有设置有defer的脚本会按照顺序执行。（注意与async不同，但同样禁止<code>document.write()</code>）。</li><li>8 document对象触发DOMContentLoaded事件，这也标志着程序执行从 同步脚本执行阶段 转化为事件驱动阶段。(只在addEventListener()好用)</li><li>9 当所有async的脚本加载完成并执行后、img的加载完成后，<code>document.readyState = &#39;complete&#39;</code>，window对象触发load事件。</li><li>10 从此，以异步响应方式处理用户输入、网络事件等。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;JSON是一种数据传输的格式（以对象喂养版，本质上就是对象，但用途有区别，对象就是本地用的，JSON是用来
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="js时间线" scheme="http://www.hsiliver.space/tags/js%E6%97%B6%E9%97%B4%E7%BA%BF/"/>
    
      <category term="异步加载" scheme="http://www.hsiliver.space/tags/%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/"/>
    
      <category term="JSON" scheme="http://www.hsiliver.space/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>事件 —— 交互体验的核心功能</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E4%BA%8B%E4%BB%B6/"/>
    <id>http://www.hsiliver.space/2019/07/08/事件/</id>
    <published>2019-07-08T14:04:58.000Z</published>
    <updated>2019-07-09T02:07:55.719Z</updated>
    
    <content type="html"><![CDATA[<h2 id="事件-——-交互体验的核心功能"><a href="#事件-——-交互体验的核心功能" class="headerlink" title="事件 —— 交互体验的核心功能"></a>事件 —— 交互体验的核心功能</h2><ul><li><p><code>ele.onxxx = function (event) {}</code></p><p>兼容性很好，但是一个元素的同一个事件上只能绑定一个处理程序</p><p>基本等同于写在HTML行间上（句柄绑定方式）</p></li><li><p><code>obj.addEventListener(type, fn, false);</code></p><p>IE9 以下不兼容，可以为一个事件绑定多个处理程序（地址不一样的fn）</p></li><li><p><code>obj.attachEvent(&#39;on&#39;+type, fn);</code></p><p>IE 独有，一个事件同样可以绑定多个处理程序</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 点击输出li的序号</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oLi = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; oLi.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">oLi[i].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(i);</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>封装兼容性事件监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">ele, type, handle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ele.addEventListener) &#123;</span><br><span class="line">        ele.addEventListener(type, handle, <span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ele.attachEvent) &#123;</span><br><span class="line">        ele.attachEvent(<span class="string">'on'</span> + type, funciton () &#123;</span><br><span class="line">        handle.call(ele)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        ele[<span class="string">'on'</span> + type] = handle;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>解除事件</p><p><code>dom.removeEventListener(&#39;click&#39;, fn, false);</code></p><p><code>dom.detachEvent(&#39;on&#39; + type, fn);</code></p></li></ul><h2 id="事件处理模型——事件冒泡、捕获"><a href="#事件处理模型——事件冒泡、捕获" class="headerlink" title="事件处理模型——事件冒泡、捕获"></a>事件处理模型——事件冒泡、捕获</h2><ul><li><p>事件冒泡： </p><p>结构上（非视觉上）嵌套关系的元素， 会存在事件冒泡的功能，即同一时间，自子元素冒泡向父元素（自底向上）</p></li><li><p>事件捕获：</p><p>1 dom.addEventListener()第三个参数为true</p><p>2 dom.setCapture(); （仅在IE上好使）捕获页面上所有的事件捕获到自己身上</p><p>​    对应dom.releaseCapture(); （取消事件捕获）</p><p>结构上（非视觉上）嵌套关系的元素， 会存在事件捕获的功能，即同一时间，自父元素捕获至子元素（自顶向下）</p><p>IE没有捕获事件, 只有谷歌实现了</p><p>出发顺序， 先捕获，后冒泡</p><p><code>focus</code>、<code>blur</code>、<code>change</code>、<code>submit</code>、<code>reset</code>、<code>select</code>等事件不冒泡</p></li><li><p>阻止事件冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;<span class="comment">//在IE里(e)不好使</span></span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement;<span class="comment">//兼容事件源对象</span></span><br><span class="line">stopBubble(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.stopPropagation)&#123;</span><br><span class="line">event.stopPropagation();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>阻止默认事件</p><p>默认事件——表单提交，啊标签跳转，右键菜单等</p><p><code>return false</code> 以对象属性的方式注册的事件才生效（句柄绑定事件生效）</p><p><code>event。preventDefault()</code>   W3C 标注， IE9以下不兼容</p><p><code>event.returnValue = false</code> 兼容IE</p><p>封装阻止默认事件的函数 <code>cancelHandler(event)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line">cancelHandler(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cancelHandler</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(event.preventDefault)&#123;</span><br><span class="line">event.preventDefault();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">event.returnValue = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>事件对象</p><p>谷歌：<code>window.e || e</code></p><p>IE：<code>window.event || event</code></p></li></ul><p>  事件源对象</p><p>  火狐只有<code>event.target</code></p><p>  IE只有 <code>event.srcElement</code></p><p>  google :都有</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 兼容性写法</span></span><br><span class="line"><span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span><br><span class="line"><span class="keyword">var</span> target = event.target || event.srcElement;</span><br></pre></td></tr></table></figure><ul><li><p>事件委托</p><p>优点：</p><p>1 性能 ： 不需要循环所有元素一个个绑定</p><p>2 灵活 ： 当有新的子元素时不需要重新绑定事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;$1&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span> * 100</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line">    oUl.onclick = funciton (e) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> event = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> target = event.target || event.srcElement;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(target.innerText);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>鼠标事件</p><p>click、mousedown、mousemove、mouseup、contextmenu、mouseover、mouseout、mouseenter、mouseleave</p><p>用button来区分鼠标按键 0 / 1 / 2</p><p>W3C标准规定：click事件只能监听左键，，只能通过<code>mousedown</code>和<code>mouseup</code>来判断鼠标键</p><p>div拖拽事件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drag</span>(<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> disX,</span><br><span class="line">        disY;</span><br><span class="line">    div.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        disX = e.pageX - <span class="built_in">parseInt</span>(dom.style.left);</span><br><span class="line">        disY = e.pageY - <span class="built_in">parseInt</span>(dom.style.top);</span><br><span class="line">        <span class="built_in">document</span>.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">            dom.style.left = e.pageX - disX + <span class="string">'px'</span>;</span><br><span class="line">            dom.style.top = e.pageY - disY + <span class="string">'px'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        div.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.onmousemove = <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">drag(div)</span><br></pre></td></tr></table></figure><p>判断鼠标左右键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (e.button == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'右键'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'左键'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何解决<code>onmousedown</code>和<code>onmouseup</code>与<code>onclick</code>事件冲突</p><p>利用用户习惯的事件差设置就可以避免了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> key = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">    <span class="keyword">if</span> (lastTime - firstTime &lt; <span class="number">300</span>) &#123;</span><br><span class="line">        key = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'click'</span>);</span><br><span class="line">        key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  移动端：<code>touchstart</code> 、<code>touchmove</code>、<code>touchend</code></p><ul><li><p>键盘类事件</p><p><code>onkeypress</code>  &gt;<code>onkeydown</code> &gt;  <code>onkeyup</code></p><p>keydown可以相应任意键盘按键，keypress止咳响应字符类键盘按键</p><p>keypress返回ASCLL码，可以转换成相应字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(e.charCode));</span><br><span class="line">    <span class="comment">// 将ASCLL码转换为键盘上对应的字符</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>文本类操作事件</p><p><code>input</code>输入触发、<code>focus</code>聚焦触发、<code>blur</code>失焦触发、<code>change</code>改变内容并且失焦触发</p></li><li><p>窗体操作类（window上的事件）</p><p><code>scroll</code>当滚动轮滚动触发 （懒加载）</p><p><code>load</code> （尽量少用）整个页面全部就绪的时候，才执行<code>window.onload</code>,虽然很飘逸，但是效率很低，影响用户体验，但是也有好处：比如广告要等到页面加载完才加上广告。也可以考究需要多久，页面能够正常使用</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;事件-——-交互体验的核心功能&quot;&gt;&lt;a href=&quot;#事件-——-交互体验的核心功能&quot; class=&quot;headerlink&quot; title=&quot;事件 —— 交互体验的核心功能&quot;&gt;&lt;/a&gt;事件 —— 交互体验的核心功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ele
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="冒泡" scheme="http://www.hsiliver.space/tags/%E5%86%92%E6%B3%A1/"/>
    
      <category term="事件" scheme="http://www.hsiliver.space/tags/%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>获取视口属性，脚本化css</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E8%8E%B7%E5%8F%96%E8%A7%86%E5%8F%A3%E5%B1%9E%E6%80%A7%EF%BC%8C%E8%84%9A%E6%9C%AC%E5%8C%96css/"/>
    <id>http://www.hsiliver.space/2019/07/08/获取视口属性，脚本化css/</id>
    <published>2019-07-08T14:03:58.000Z</published>
    <updated>2019-07-09T02:05:28.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="滚动条"><a href="#滚动条" class="headerlink" title="滚动条"></a>滚动条</h2><p>查看滚动条的滚动距离</p><ul><li><p><code>window.pageXOffset / pageYOffset</code></p><p>IE 8 及 iIE8以下不兼容</p></li><li><p><code>document.body / documentElement.scrollLeft / scrollTop</code></p><p>兼容性比较混乱呢，用时取俩值相加，因为不可能存在两个同时有值</p></li><li><p>封装兼容性方法，求滚动轮滚动距离 <code>getScrollOffset()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollOffset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.pageXOffset) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">x : <span class="built_in">window</span>.pageXOffset,</span><br><span class="line">y : <span class="built_in">window</span>.pageYOffset</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">x : <span class="built_in">document</span>.body.scrollLeft + <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">y : <span class="built_in">document</span>.body.scrollTop + <span class="built_in">document</span>.documentElement.scrollTop,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>让滚动条滚动</p><ul><li><p>window上有3个方法</p><p><code>scroll()</code>,<code>scrollTo()</code>,<code>scrollBy()</code></p><p>三个方法功能类似，用法都是x, y 坐标传入。即实现让滚动轮滚动到当前位置。</p><p>区别：<code>scrollBy()</code>会在之前的数据基础之上做累加</p></li><li><p>eg ： 可以利用scrollBy() 快速阅读的功能</p></li></ul><h2 id="视口"><a href="#视口" class="headerlink" title="视口"></a>视口</h2><p>查看视口尺寸</p><ul><li><p><code>window.innerWidth/innerHeight</code></p><p>IE8及IE8以下不兼容</p></li><li><p><code>document.documentElement.clientWidth / clientHeight</code></p><p>标准模式下，任意浏览器都兼容</p></li><li><p><code>document.body.clientWidth / clientHeight</code></p><p>适用于怪异模式下的浏览器</p></li><li><p>封装兼容性方法，返回浏览器视口尺寸<code>getViewportOffset()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewportOffset</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.innerWidth) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">w : <span class="built_in">window</span>.innerWidth,</span><br><span class="line">h : <span class="built_in">window</span>.innerHeight</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.compatMode === <span class="string">"BackCompat"</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">w : <span class="built_in">document</span>.body.clientWidth,</span><br><span class="line">h : <span class="built_in">document</span>.body.clientHeight</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">w : <span class="built_in">document</span>.documentElement.clientWidth,</span><br><span class="line">h : <span class="built_in">document</span>.documentElement.clientHeight</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="元素尺寸"><a href="#元素尺寸" class="headerlink" title="元素尺寸"></a>元素尺寸</h4><p>查看元素几何尺寸</p><ul><li><p><code>domEle.getBoundingClientRect()</code></p><p>兼容性很好</p><p>该方法返回一个对象，对象里面有<code>left、top、right、bottom</code>等属性。<code>left</code>和<code>top</code>代表该元素左上角的<code>X</code>坐标和<code>Y</code>坐标，<code>right</code>和<code>bottom</code>代表该元素右下角的<code>X</code>坐标和<code>Y</code>坐标。 </p><p><code>height</code>和<code>width</code>属性老IE并未实现</p><p>返回的结果并不是实时的</p></li></ul><p>查看元素尺寸  (  视觉上的尺寸  )</p><ul><li><code>dom.offsetWidth, dom.offsetHeight</code></li></ul><p><strong>查看元素位置</strong></p><ul><li><p><code>dom.offsetLeft, dom.offsetTop</code></p><p>对于无定位的父级元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。<u>无论自身有没有定位，但凡与父级或者文档有距离就返回这个距离</u></p></li><li><p><code>dom.offsetParent</code></p><p>返回最近的由定位的父级，如果没有，返回<code>body</code>，<code>body.offsetParent</code>返回<code>null</code>。</p></li><li><p>eg : 求元素相对于文档的坐标 <code>getElementPosition</code></p></li></ul><h2 id="脚本化css"><a href="#脚本化css" class="headerlink" title="脚本化css"></a>脚本化css</h2><p>dom.style（获取的是行间样式）</p><ul><li>可读可写</li><li>注意<code>background-color</code> 等，带 ‘-‘ 号的组合样式, 要小驼峰式命名<code>backgroundColor</code></li><li>碰到float这样的保留字属性，前面加css ——&gt; <code>dom.style.cssFloat =  left;</code></li><li>复合属性（一个样式包含多个属性，比如<code>border</code>）尽量拆开写</li></ul><p>查询计算样式（已经计算完了，比如 em —&gt; px）</p><ul><li><p><code>window.getComputedStyle(ele, null)[prop];</code></p></li><li><p>这个方法可以获取伪元素的样式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.getComputedStyle(div, <span class="string">'after'</span>).width <span class="comment">// 这样就可以获取了</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>计算样式只读（视觉上展示给我们的样式会展示出来，包括默认值）</p></li><li><p>返回的计算样式的值都是绝对值，没有相对单位</p></li><li><p>IE8及IE8以下不兼容</p><p>IE：<code>dom.currentStyle[prop]</code>但是并非是计算后的属性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装兼容的 查询计算样式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">elem, prop</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.getComputedStyle) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(elem, <span class="literal">null</span>)[prop];</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> elem.currentStyle[prop];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;滚动条&quot;&gt;&lt;a href=&quot;#滚动条&quot; class=&quot;headerlink&quot; title=&quot;滚动条&quot;&gt;&lt;/a&gt;滚动条&lt;/h2&gt;&lt;p&gt;查看滚动条的滚动距离&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;window.pageXOffset / pageYOffset&lt;
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="滚动条" scheme="http://www.hsiliver.space/tags/%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    
      <category term="视口" scheme="http://www.hsiliver.space/tags/%E8%A7%86%E5%8F%A3/"/>
    
      <category term="脚本化css" scheme="http://www.hsiliver.space/tags/%E8%84%9A%E6%9C%AC%E5%8C%96css/"/>
    
  </entry>
  
  <entry>
    <title>日期对象Date()</title>
    <link href="http://www.hsiliver.space/2019/07/08/date%E5%AF%B9%E8%B1%A1%E3%80%81%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    <id>http://www.hsiliver.space/2019/07/08/date对象、定时器/</id>
    <published>2019-07-08T14:03:58.000Z</published>
    <updated>2019-07-09T02:18:55.052Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日期对象Date"><a href="#日期对象Date" class="headerlink" title="日期对象Date()"></a>日期对象Date()</h2><p>日期对象：是系统提供好的</p><p>注意： 我们new出来的对象是记录的date出生的那一刻，并不是实时地</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">date.getDate();  <span class="comment">// 返回当前这个月的第几天。就是几号（1 ~ 31）</span></span><br><span class="line">date.getDay();   <span class="comment">// 返回当前周的第几天（0 ~ 6）</span></span><br><span class="line">date.getMonth(); <span class="comment">// 返回当前年的第几个月 （0 ~ 11）</span></span><br><span class="line">date.getFullYear(); <span class="comment">// 返回当前年份（四位数）</span></span><br><span class="line">date.getHours();    <span class="comment">// 返回当前小时（0 ~ 23）</span></span><br><span class="line">date.getMinutes();  <span class="comment">// 返回当前分钟（0 ~ 59）</span></span><br><span class="line">date.getSeconds();  <span class="comment">// 返回当前秒钟（0 ~ 59）</span></span><br><span class="line">date.getMilliseconds(); <span class="comment">// 返回当前毫秒（0 ~ 999）</span></span><br><span class="line">date.getTime();    <span class="comment">// *返回 1970 年 1 月 1 日至今的毫秒数（计算机的纪元时刻，也是最常用的）</span></span><br><span class="line"></span><br><span class="line">date.setDate();  <span class="comment">// 设置月的第几天。就是几号（1 ~ 31）</span></span><br><span class="line">date.setDay();   <span class="comment">// 设置周的第几天（0 ~ 6）</span></span><br><span class="line">date.setMonth(); <span class="comment">// 设置年的第几个月 （0 ~ 11）</span></span><br><span class="line">date.setFullYear(); <span class="comment">// 设置年份（四位数）</span></span><br><span class="line">date.setHours();    <span class="comment">// 设置小时（0 ~ 23）</span></span><br><span class="line">date.setMinutes();  <span class="comment">// 设置分钟（0 ~ 59）</span></span><br><span class="line">date.setSeconds();  <span class="comment">// 设置秒钟（0 ~ 59）</span></span><br><span class="line">date.setMilliseconds(); <span class="comment">// 设置毫秒（0 ~ 999）</span></span><br><span class="line">date.setTime();    <span class="comment">// 以毫秒设置date对象</span></span><br></pre></td></tr></table></figure><h4 id="定时循环器"><a href="#定时循环器" class="headerlink" title="定时循环器"></a>定时循环器</h4><p><code>setInterval(function () {}, time)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> time = <span class="number">1000</span>;</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, time);</span><br><span class="line">time =<span class="number">2000</span>;</span><br><span class="line"><span class="comment">// 事实上这个 setInterval 里面的 time 只识别一次，即使在后面再次修改也是不好使的</span></span><br></pre></td></tr></table></figure><p>我们可以来验证定时器到底准不准</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> firstTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> lastTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line"><span class="built_in">console</span>.log(lastTime - firstTime);</span><br><span class="line">firstTime = lastTime;</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"><span class="comment">// 结果是很不准的</span></span><br><span class="line"></span><br><span class="line">setInterval(<span class="string">"console.log('a')"</span>, <span class="number">1000</span>); <span class="comment">// 另一种写法每隔1000毫秒运行字符串里面的代码</span></span><br></pre></td></tr></table></figure><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><p><code>setTimeout(function () {}, 1000)</code></p><p>只运行一次，运行完成后结束，用法与setInterval相差无几</p><h4 id="清除定时、定时循环器"><a href="#清除定时、定时循环器" class="headerlink" title="清除定时、定时循环器"></a>清除定时、定时循环器</h4><p><code>clearInterval();</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">var</span> timer2 = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;, <span class="number">2000</span>);</span><br><span class="line"><span class="built_in">console</span>.log(timer, timer2); <span class="comment">// 1 2</span></span><br><span class="line">clearInterval(timer);</span><br></pre></td></tr></table></figure><p>由于setInterval是window上的一个方法，而每生成一个setInterval，window就会给这个setInterval打上一个唯一标识；我们清除的就是这个标识；</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;日期对象Date&quot;&gt;&lt;a href=&quot;#日期对象Date&quot; class=&quot;headerlink&quot; title=&quot;日期对象Date()&quot;&gt;&lt;/a&gt;日期对象Date()&lt;/h2&gt;&lt;p&gt;日期对象：是系统提供好的&lt;/p&gt;
&lt;p&gt;注意： 我们new出来的对象是记录的date
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="Date" scheme="http://www.hsiliver.space/tags/Date/"/>
    
      <category term="定时器" scheme="http://www.hsiliver.space/tags/%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>DOM详解</title>
    <link href="http://www.hsiliver.space/2019/07/08/DOM/"/>
    <id>http://www.hsiliver.space/2019/07/08/DOM/</id>
    <published>2019-07-08T14:00:58.000Z</published>
    <updated>2019-07-09T02:18:23.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h4 id="什么是DOM？"><a href="#什么是DOM？" class="headerlink" title="什么是DOM？"></a>什么是DOM？</h4><ul><li><p>DOM ——&gt; Document Object Model</p></li><li><p>DOM 定义了表示和修改文档所需的方法，DOM对象即为宿主对象，由浏览器厂商定义，用来操作html和xml功能的一类对象的集合。也有人称DOM是对Html以及xml的标准编程接口。</p><p>XML ——&gt; XHTML ——&gt; html, Xml里面的标签可以自定义</p></li><li><p>操作不了CSS，但是可以通过操作行间样式，间接操作CSS</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">    div.style.width = <span class="string">'100px'</span>;</span></span><br><span class="line"><span class="javascript">    div.style.height = <span class="string">'100px'</span>;</span></span><br><span class="line"><span class="javascript">    div.style.backgrounColor = <span class="string">'orange'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> count = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">    div.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        count ++;</span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (count % <span class="number">2</span> == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.style.backgrounColor = <span class="string">'yellow'</span>;</span></span><br><span class="line"><span class="javascript">        &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.style.backgrounColor = <span class="string">'orange'</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="DOM的基本操作"><a href="#DOM的基本操作" class="headerlink" title="DOM的基本操作"></a>DOM的基本操作</h3><h4 id="1-对节点的改查"><a href="#1-对节点的改查" class="headerlink" title="1) 对节点的改查"></a>1) 对节点的改查</h4><ul><li><p>查看元素节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span> <span class="comment">// 代表整个文档</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(); <span class="comment">// 元素ID在IE8以下的浏览器，不区分ID大小写，而且也返回匹配name属性的元素&lt;div name="div"&gt;&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(); <span class="comment">// 标签名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByName(); <span class="comment">// 需要注意，只有部分标签name可以生效（表单，表单元素，img，iframe）</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(); <span class="comment">// 类名，-&gt; IE8和IE8以下的IE版本中没有，可以选中多个class</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySlector() <span class="comment">// css选择器，IE7和IE7以下的IE版本中没有,选一个</span></span><br><span class="line"><span class="built_in">document</span>.querySlector(<span class="string">'div &gt; span.demo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事实上这两个并不使用，因为是静态的，选中一次后，</span></span><br><span class="line"><span class="comment">// 后面再次选中依然以第一次选中的结果为主，是非实时的，镜像的</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySlectorAll() <span class="comment">// css选择器，IE7和IE7以下的IE版本中没有</span></span><br><span class="line"><span class="built_in">document</span>.querySlector(<span class="string">'div &gt; span.demo'</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>遍历节点树</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parentNode -&gt; 父节点（一个元素只有一个父节点）</span><br><span class="line"></span><br><span class="line">childNodes -&gt; 子节点们</span><br><span class="line"></span><br><span class="line">firstChild -&gt; 第一个子节点</span><br><span class="line"></span><br><span class="line">lastChild -&gt; 最后一个子节点</span><br><span class="line"></span><br><span class="line">nextSibling -&gt; 后一个兄弟节点</span><br><span class="line"></span><br><span class="line">previousSibling -&gt;前一个兄弟节点</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>基于元素节点树的遍历</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">parentElement -&gt; 返回当前元素的父元素节点（IE不兼容）</span><br><span class="line"></span><br><span class="line">children -&gt; 只返回当前元素的子元素节点（兼容性最好，最常用）</span><br><span class="line"></span><br><span class="line">node.childElementCount === node.children.length -&gt; 当前元素节点的子节点</span><br><span class="line"></span><br><span class="line">firstElementChild -&gt; 返回的是第一个元素节点（IE不兼容）</span><br><span class="line"></span><br><span class="line">lastElementChild -&gt; 返回的是最后一个元素节点（IE不兼容）</span><br><span class="line"></span><br><span class="line">nextElementSibling / previousElementSibling -&gt; 返回后一个/前一个兄弟元素节点</span><br></pre></td></tr></table></figure></li><li><p>节点的类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">nodeType —&gt; 获取节点的类型， 只读</span><br><span class="line"></span><br><span class="line">元素节点 ———— 1</span><br><span class="line">属性节点 ———— 2</span><br><span class="line">文本节点 ———— 3</span><br><span class="line">注释节点 ———— 8</span><br><span class="line">document ——  9</span><br><span class="line">DocumentFragment(文本碎片节点) ———— 11</span><br></pre></td></tr></table></figure></li><li><p>节点的四个属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nodeName -&gt; 元素的标签名，大写形式表示 ， 只读</span><br><span class="line"></span><br><span class="line">nodeValue -&gt; text节点或Comment节点的文本内容 ， 可读可写</span><br><span class="line"></span><br><span class="line">nodeType —&gt; 该节点的类型， 只读</span><br><span class="line"></span><br><span class="line">attributes -&gt; Element 节点的属性集合</span><br><span class="line">&lt;div id=&quot;demo&quot;&gt;&lt;/div&gt;</span><br><span class="line">div.attributes[0].name; // id</span><br><span class="line">div.attributes.value;  // demo</span><br><span class="line">value值可读可写，name值只读</span><br><span class="line"></span><br><span class="line">节点的一个方法 node.hasChildNodes();返回true/false</span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/DOM/DOM.PNG" alt></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTMLDocument.prototype = &#123;</span><br><span class="line">__proto__ : Document.prototype</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 所以继承关系是：document --&gt;(继承自) HTMLDocument.prototype --&gt; Document.prototype</span></span><br></pre></td></tr></table></figure><ol><li><p><code>getElementById</code>方法定义在<code>Document.prototype</code>上，即<code>Element</code>节点上不能使用。</p></li><li><p><code>getElementByName</code>方法是在<code>HTMLDocument.prototype</code>上， 即非<code>html</code>中的<code>document</code>不能使用（<code>xml、document、Element</code>）</p></li><li><p><code>getElementByTagName</code>方法定义在<code>Document.prototype</code>和<code>Element.prototype</code>上</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElemmentsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> span = div.getElementsByTagName(<span class="string">'span'</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p><code>HTMLDocument.prototype</code>定义了一些常用的属性，<code>body，head</code>分别指代<code>HTML</code>文档中的<code>&lt;body&gt;&lt;/body&gt;、&lt;head&gt;&lt;/head&gt;</code>标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body; <span class="comment">//&lt;body&gt;&lt;/body&gt;</span></span><br><span class="line"><span class="built_in">document</span>.head; <span class="comment">//&lt;head&gt;&lt;/head&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p><code>Document.prototype</code>上定义了<code>document、Element</code>属性，指代文档的根元素，在<code>HTML</code>文档中，它总是指代<code>&lt;html&gt;&lt;/html&gt;</code>元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement; <span class="comment">// &lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ol start="6"><li><code>getElementsByClassName、querySelector、querySelectorAll</code>在<code>Document.prototype、Element.prototype</code>类中均有定义</li></ol><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装函数，返回元素e的第n层祖先元素节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retParent</span>(<span class="params">elem, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (elem &amp;&amp; n) &#123;</span><br><span class="line">        elem = ele.parentElement;</span><br><span class="line">        n --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> elem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装函数，返回元素e的第n个元素节点，n为正，</span></span><br><span class="line"><span class="comment">//返回后面的元素节点，n为负，返回前面的，n为0返回自己</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retSibling</span>(<span class="params">e, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (e &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.nextElementSibling;) &#123;</span><br><span class="line">                e = e.nextElementSibling;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.nextSibling; e &amp;&amp; e.nodeType ! = <span class="number">1</span>; e = e.nextSibling)</span><br><span class="line">                <span class="comment">// 为了兼容IE9以下</span></span><br><span class="line">            &#125;  </span><br><span class="line">            n --;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.previousElementSibling) &#123;</span><br><span class="line">                e = e.previousElementSibling;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">for</span> (e = e.previousSibling; e &amp;&amp; e.nodeType != <span class="number">1</span>; e = e.previousSibling);</span><br><span class="line">            &#125;</span><br><span class="line">            n ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编辑函数，封装myChildren功能，解决以前部分浏览器的兼容性问题</span></span><br><span class="line">Element.prototype.myChildren = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> child = <span class="keyword">this</span>.childNodes;</span><br><span class="line">    <span class="keyword">var</span> len = child.length;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chilid[i].nodeType == <span class="number">1</span>)</span><br><span class="line">        arr.push(child[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装hasChildren()方法，不可用children属性</span></span><br><span class="line">Element.prototype.hasChildren = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> child = <span class="keyword">this</span>.childNodes;</span><br><span class="line">    <span class="keyword">var</span> len = child.length;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chilid[i].nodeType == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装自己的chlidren函数，用nodeType</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retElementChild</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = &#123;</span><br><span class="line">        length : <span class="number">0</span>,</span><br><span class="line">        push : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">        splice : <span class="built_in">Array</span>.prototype.splice;</span><br><span class="line">    &#125;,</span><br><span class="line">    child = node.childNodes,</span><br><span class="line">    len = child.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (child[i].nodeType === <span class="number">1</span>) &#123;</span><br><span class="line">            temp.push(child[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）-对节点的增、插、删、替换"><a href="#2）-对节点的增、插、删、替换" class="headerlink" title="2） 对节点的增、插、删、替换"></a>2） 对节点的增、插、删、替换</h4><ul><li><p>增</p><p><code>document.createElement()</code> 创建元素节点</p><p><code>document.createTextNode()</code> 创建文本节点</p><p><code>document.createComment()</code> 创建注释节点</p><p><code>document.createDocumentFragment()</code> 创建文档碎片节点</p></li><li><p>插</p><p><code>ParentNode.appendChild()</code> parentNode 里面 ，列表的最后插入子节点（剪切操作）</p></li></ul><p>  <code>ParentNode.insertBefore(a, b)</code> parentNode 里面 ，把 a 插入在 b 之前</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装insertAfter函数</span></span><br><span class="line"><span class="comment">// &lt;div&gt;</span></span><br><span class="line"><span class="comment">// &lt;span&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="comment">//  &lt;p&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">// &lt;div&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Element.prototype.insertAfter = <span class="function"><span class="keyword">function</span> (<span class="params">targetNode, afterNode</span>) </span>&#123; <span class="comment">// &lt;i&gt; &lt;p&gt;</span></span><br><span class="line">    <span class="keyword">var</span> beforeNode = afterNode.nextElementSibling;</span><br><span class="line">    <span class="keyword">if</span> (beofreNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.appendChild(targetNode)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.insertBefore(targetNode,beforeNode);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>删</p><p><code>parent.removeChild()</code> 删除（剪切出来）自己的子节点（参数可以是某个节点）</p><p><code>child.remove()</code> 删除（销毁）自己</p></li><li><p>替换</p><p><code>parent.replaceChild(new, origin)</code>父级调用，拿新的元素替换老的元素</p></li></ul><h5 id="Element节点上的一些属性"><a href="#Element节点上的一些属性" class="headerlink" title="Element节点上的一些属性"></a>Element节点上的一些属性</h5><ul><li><p><code>innerHTML</code> —-&gt;读 / 写html结构，覆盖原有所有内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div.innerHTML; <span class="comment">// 取值操作</span></span><br><span class="line">div.innerHTML = <span class="string">'&lt;p&gt;&lt;/p&gt;'</span>; <span class="comment">// 写入操作</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><code>innerText</code>(火狐不兼容) / <code>textContent</code>（老版本IE不好使） —&gt; 读 / 写文本内容，覆盖原有所有内容，包括标签结构，所以谨慎使用</li></ul><h5 id="Element-节点上的一些方法"><a href="#Element-节点上的一些方法" class="headerlink" title="Element 节点上的一些方法"></a>Element 节点上的一些方法</h5><ul><li><p><code>ele.setAttribute();</code> 设置行间属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">div.setsetAttribute(&apos;class&apos;, &apos;demo&apos;);</span><br><span class="line"></span><br><span class="line">===&gt; &lt;div class=&quot;demo&quot;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><ul><li><code>ele.getAttribute();</code>获取行间属性，里面填一个参数即可</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;DOM&quot;&gt;&lt;a href=&quot;#DOM&quot; class=&quot;headerlink&quot; title=&quot;DOM&quot;&gt;&lt;/a&gt;DOM&lt;/h2&gt;&lt;h4 id=&quot;什么是DOM？&quot;&gt;&lt;a href=&quot;#什么是DOM？&quot; class=&quot;headerlink&quot; title=&quot;什么是DOM？
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="DOM的基本操作" scheme="http://www.hsiliver.space/tags/DOM%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    
      <category term="节点树" scheme="http://www.hsiliver.space/tags/%E8%8A%82%E7%82%B9%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>try {} catch (e) {}</title>
    <link href="http://www.hsiliver.space/2019/07/08/try...catch,es5%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    <id>http://www.hsiliver.space/2019/07/08/try...catch,es5严格模式/</id>
    <published>2019-07-08T13:59:58.000Z</published>
    <updated>2019-07-09T02:13:44.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="try-catch-e"><a href="#try-catch-e" class="headerlink" title="try {} catch (e) {}"></a>try {} catch (e) {}</h3><ul><li><p>防止部分的代码出错，影响后续代码的执行</p></li><li><p>try 里面的代码如果都正确，catch里面的代码就不执行，否则catch里面的代码执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">    <span class="comment">// 到第二个console 的时候; 不执行，但是try外边的 "h" 依然被执行 </span></span><br><span class="line">&#125;<span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="comment">// catch 的作用就是把try里面的错误捕捉到，</span></span><br><span class="line">    <span class="comment">// 然后把（error.message error.name）封</span></span><br><span class="line">    <span class="comment">// 装到一个error对象里面, 然后传给e，供我们使用</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'h'</span>);</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在不知道后台传来data数据是否有错误的时候，这个是非常方便</p></li><li><h4 id="Error-name-的六种值对应的信息"><a href="#Error-name-的六种值对应的信息" class="headerlink" title="Error.name　的六种值对应的信息"></a>Error.name　的六种值对应的信息</h4><p>1）EvalError : eval() 的使用与定义不一致</p><p>2）RangeError : 数值越界</p><p>3）ReferenceError : 非法或不能识别的引用数值 ***</p><p>​      例如：未经声明就使用</p><p>4）SyntaxError : 发生语法解析错误 ***</p><p>​      例如：出现中文符号</p><p>5）TypeError : 操作数据类型错误 **</p><p>6）URLError : URL处理函数使用不当</p></li></ul><h2 id="ES5严格模式"><a href="#ES5严格模式" class="headerlink" title="ES5严格模式"></a>ES5严格模式</h2><ul><li><p>目前我们使用的浏览器都是基于es3.0 的 + es5.0 的新增方法 使用的;</p><p>如果他俩产生冲突就会以es5.0为准, 否则使用es3.0， 定义为 “es5.0严格模式”</p></li></ul><p>  启动开关：”use strict”;  必须写在逻辑的最顶端；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee) <span class="comment">// 报错如下 caller一样</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them</span></span><br></pre></td></tr></table></figure><ul><li><p>两种用法：</p><p>全局严格模式</p><p>局部函数内部严格模式</p></li><li><p>必须要在支持es5的浏览器上才可以</p></li><li><p>不支持with () {}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span> : <span class="string">"obj"</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'window'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'scope'</span>;</span><br><span class="line">    width(obj) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// with里面的代码会按照正常顺序执行，</span></span><br><span class="line">    <span class="comment">// 但是当with传一个对象后就发生了大变化，</span></span><br><span class="line">    <span class="comment">// 它会把这个对象当做with要执行的代码体的作用域链的最顶端；</span></span><br><span class="line">    <span class="comment">// 也就是会作用域链改变</span></span><br><span class="line">    <span class="comment">// with跟命名空间配合使用，可以发挥很大的功效</span></span><br><span class="line">    width (<span class="built_in">document</span>) &#123;</span><br><span class="line">        write (<span class="string">'a'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 但是with 会更改作用域链，使代码运行效率变得非常慢</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure></li><li><p>变量赋值前必须声明</p></li><li><p>局部的this必须被赋值或者外部new，而且赋什么就是什么，否则指向空（undefined）</p><p>（可以使用call / apply）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">funciton test() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br><span class="line">test.call(<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p>在非严格模式下，<code>test.call(原始值)</code>是坚决不行的，会给你包装成包装类Number {123}</p><p>全局下的<code>console.log(this)</code>; 指向window；</p></li><li><p>拒绝重复的属性和参数，重复属性不报错，重复参数报错</p></li><li><p>不允许使用eval（）;</p><p>可以把字符串当成代码执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">'console.log(123)'</span>); <span class="comment">// 123</span></span><br></pre></td></tr></table></figure></li></ul><p>  可以改变作用域</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;try-catch-e&quot;&gt;&lt;a href=&quot;#try-catch-e&quot; class=&quot;headerlink&quot; title=&quot;try {} catch (e) {}&quot;&gt;&lt;/a&gt;try {} catch (e) {}&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;防止部分的代码出错
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="try{}catch(e){}" scheme="http://www.hsiliver.space/tags/try-catch-e/"/>
    
      <category term="es5严格模式" scheme="http://www.hsiliver.space/tags/es5%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>数组</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E6%95%B0%E7%BB%84/"/>
    <id>http://www.hsiliver.space/2019/07/08/数组/</id>
    <published>2019-07-08T13:58:58.000Z</published>
    <updated>2019-07-09T02:10:03.743Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li><code>var arr = [];</code></li><li><code>var arr = new Array()</code></li></ul><p>这两种都是系统定义的，所以说数组能用的一切方法都来源于<code>Array.prototype</code></p><p>这俩的唯一区别</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>]; <span class="comment">// [10] 推荐这种使用方法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>); <span class="comment">// [undefined*10] 长度为10的空数组，但是千万不能填小数</span></span><br></pre></td></tr></table></figure><h4 id="数组的读和写"><a href="#数组的读和写" class="headerlink" title="数组的读和写"></a>数组的读和写</h4><p>可以溢出读，溢出写</p><h4 id="数组常用的方法"><a href="#数组常用的方法" class="headerlink" title="数组常用的方法"></a>数组常用的方法</h4><h5 id="改变原数组"><a href="#改变原数组" class="headerlink" title="改变原数组"></a>改变原数组</h5><ul><li><p>push —— 在数组最后一位添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i ++) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="keyword">this</span>.length] = <span class="built_in">arguments</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>pop —— 从最后一位剪切出来（传参也没用）</p></li><li><p>shift —— 从第一位添加</p></li><li><p>unshift —— 从第一位开始剪切（传参也没用）</p></li><li><p>sort()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line">arr.sort(); <span class="comment">// [1, 10, 5, 7] 按照ASCll码排序（降序）</span></span><br></pre></td></tr></table></figure><p>由于sort很大可能满足不了我们的开发需求，所以开发者特地给我们留了一个接口</p><p>供我们自己编写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 必须写俩形参</span></span><br><span class="line"><span class="comment">// 2 看返回值</span></span><br><span class="line"><span class="comment">//  1) 当返回值为负数时， 那么前面的数放在前面 小 - 大 &lt; 0</span></span><br><span class="line"><span class="comment">//  2) 为正数时， 后面的数在前 大 - 小 &gt; 0</span></span><br><span class="line"><span class="comment">//  3) 为0， 不动</span></span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// return b - a;降序</span></span><br><span class="line">    <span class="keyword">return</span> a - b; <span class="comment">// 升序</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给一个有序的数组乱序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random() - <span class="number">0.5</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>reverse ——原数组逆转</p></li><li><p>splice —— 切片</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="comment">// arr.splice(从地位开始, 截取多少长度, 在切口出添加新的数据) 还会返回截取出的数据</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.splice(<span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>)) <span class="comment">// (2)[1, 2]   (3)[1, 5, 4]</span></span><br><span class="line">arr.splice(<span class="number">3</span>, <span class="number">0</span>, <span class="string">'haha'</span>) <span class="comment">// []  (4) [1, 5, 4, "haha"]</span></span><br><span class="line">arr.splice(<span class="number">-1</span>, <span class="number">1</span>) <span class="comment">// 截取的是倒数第一位</span></span><br><span class="line"><span class="comment">// 就是 -1 + arr.length</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="不改变原数组"><a href="#不改变原数组" class="headerlink" title="不改变原数组"></a>不改变原数组</h5><ul><li><p>concat ——连接</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line">arr.concat(arr1); <span class="comment">// [1, 2, 3, 6, 7, 8]</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>join</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.join(<span class="string">"-"</span>); <span class="comment">// "1-2-3"; 最好还是填字符串，当然原始值都可以</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>split</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"1-2-3-4-5"</span>;</span><br><span class="line">str.split(<span class="string">"-"</span>);</span><br><span class="line"><span class="comment">// ["1", "2", "3", "4", "5"];</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>toString</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr.toString(); <span class="comment">// "1, 2, 3"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>slice</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> newArr= arr.slice(<span class="number">1</span>, <span class="number">3</span>); <span class="comment">// [3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice(从该位开始截取，截取到该位), 不写参数就全截取</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="类数组"><a href="#类数组" class="headerlink" title="类数组"></a>类数组</h2><ul><li><p>属相为索引（数字）属性</p></li><li><p>必须要有lenngth属性</p></li><li><p>最好加上push</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="string">"0"</span> : <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">"1"</span> : <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">"2"</span> : <span class="string">'c'</span>,</span><br><span class="line">    <span class="string">"length"</span> : <span class="number">3</span>,</span><br><span class="line">    <span class="string">"push"</span> : <span class="built_in">Array</span>.prototype.push,</span><br><span class="line">    <span class="string">"splice"</span> : <span class="built_in">Array</span>.prototype.splice</span><br><span class="line">    <span class="comment">// 当我们加上splice后   ["a", "b", "c", push: ƒ, splice: ƒ] 就变成这样了</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 里面的push会有这样一个操作</span></span><br><span class="line"><span class="built_in">Array</span>.prototype.push = <span class="function"><span class="keyword">function</span> (<span class="params">target</span>) </span>&#123;</span><br><span class="line">    obj[obj.length] = target;</span><br><span class="line">    obj.length ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="string">"2"</span> : <span class="string">'a'</span>,</span><br><span class="line">    <span class="string">"3"</span> : <span class="string">'b'</span>,</span><br><span class="line">    <span class="string">"length"</span> : <span class="number">2</span>,</span><br><span class="line">    <span class="string">"push"</span> : <span class="built_in">Array</span>.prototype.push</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;2: "a", 3: "b", length: 2, push: ƒ&#125;</span></span><br><span class="line">obj.push(<span class="string">'c'</span>);</span><br><span class="line">obj.push(<span class="string">'d'</span>); </span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;2: "c", 3: "d", length: 4, push: ƒ&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">arguments</span>);  <span class="comment">// object</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h = <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">23</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a());</span><br><span class="line"><span class="comment">// error : a is not defined</span></span><br></pre></td></tr></table></figure></li><li><p>判断引用值的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 分两类 原始值 引用值</span></span><br><span class="line"><span class="comment">// 2. 区分引用值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ret = <span class="keyword">typeof</span>(target);</span><br><span class="line"><span class="keyword">var</span> template = &#123;</span><br><span class="line"><span class="string">"[object Array]"</span>:<span class="string">"array"</span>,</span><br><span class="line"><span class="string">"[object Object]"</span>:<span class="string">"object"</span>,</span><br><span class="line"><span class="string">"[object Number]"</span>:<span class="string">"number-object"</span>,</span><br><span class="line"><span class="string">"[object Boolean]"</span>:<span class="string">"boolean-object"</span>,</span><br><span class="line"><span class="string">"[object String]"</span>:<span class="string">"string-object"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(target === <span class="literal">null</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span>(ret == <span class="string">"object"</span>)&#123;</span><br><span class="line">        <span class="comment">// 数组  对象  包装类（Object.prototype.toString）</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="built_in">Object</span>.prototype.toString.call(target);</span><br><span class="line"><span class="keyword">return</span> template[str];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>数组去重</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.unique = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp = &#123;&#125;,</span><br><span class="line">arr = [],</span><br><span class="line">len = <span class="keyword">this</span>.length;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i ++) &#123;</span><br><span class="line"><span class="keyword">if</span>(!temp[<span class="keyword">this</span>[i]])&#123;</span><br><span class="line">temp[<span class="keyword">this</span>[i]] = <span class="string">"abc"</span>;</span><br><span class="line">arr.push(<span class="keyword">this</span>[i])</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>  优化以下代码</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDay</span>(<span class="params">day</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"Monday"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"Tuesday"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"Wednesday"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"Thursday"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span> :</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"Friday"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span> :</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"Saturday"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span> :</span><br><span class="line">            <span class="built_in">document</span>.write(<span class="string">"Sunday"</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retDay</span>(<span class="params">day</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">'Monday'</span>, <span class="string">'Tuesday'</span>, <span class="string">'Wednesday'</span>, <span class="string">'Thursday'</span>, <span class="string">'Friday'</span>, <span class="string">'Saturday'</span>, <span class="string">'Sunday'</span>];</span><br><span class="line">    <span class="keyword">var</span> ret = arr[day - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span>(ret === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'error'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line">retDay(<span class="number">7</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;var arr = [];&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;var arr = new Array()&lt;
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="数组" scheme="http://www.hsiliver.space/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="类数组" scheme="http://www.hsiliver.space/tags/%E7%B1%BB%E6%95%B0%E7%BB%84/"/>
    
      <category term="数组去重" scheme="http://www.hsiliver.space/tags/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D/"/>
    
  </entry>
  
  <entry>
    <title>剖析this</title>
    <link href="http://www.hsiliver.space/2019/07/08/this/"/>
    <id>http://www.hsiliver.space/2019/07/08/this/</id>
    <published>2019-07-08T13:57:58.000Z</published>
    <updated>2019-07-09T02:15:00.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="剖析this"><a href="#剖析this" class="headerlink" title="剖析this"></a>剖析this</h1><h3 id="this的指向有哪几种情况？"><a href="#this的指向有哪几种情况？" class="headerlink" title="this的指向有哪几种情况？"></a>this的指向有哪几种情况？</h3><p>this代表函数调用相关联的对象，通常页称之为执行上下文。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1. 作为函数直接调用，非严格模式下，this指向window，全局作用域的this指向window。严格模式下，this指向undefined。</span><br><span class="line"></span><br><span class="line">2. 函数预编译过程中，this指向window。</span><br><span class="line"></span><br><span class="line">3. 作为某对象的方法调用，this通常指向调用的对象。</span><br><span class="line"></span><br><span class="line">4. 使用apply、call、bind 可以绑定this的指向。</span><br><span class="line"></span><br><span class="line">5. 在构造函数中，this指向新创建的对象</span><br><span class="line"></span><br><span class="line">6. 箭头函数没有单独的this值，this在箭头函数创建时确定，它与声明所在的上下文相同。</span><br></pre></td></tr></table></figure><h3 id="如果对一个函数进行多次-bind，那么上下文会是什么呢？"><a href="#如果对一个函数进行多次-bind，那么上下文会是什么呢？" class="headerlink" title="如果对一个函数进行多次 bind，那么上下文会是什么呢？"></a>如果对一个函数进行多次 bind，那么上下文会是什么呢？</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>) &#125;</span><br><span class="line">fn.bind().bind(a)() <span class="comment">// =&gt; window</span></span><br></pre></td></tr></table></figure><p>不管我们给函数 bind 几次，fn 中的 this 永远由第一次 bind 决定，所以结果永远是 window。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fn.bind().bind(a) 等于</span></span><br><span class="line"><span class="keyword">let</span> fn2 = <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn.apply()</span><br><span class="line">  &#125;.apply(a)</span><br><span class="line">&#125;</span><br><span class="line">fn2()</span><br></pre></td></tr></table></figure><h3 id="多个this规则出现时，this最终指向哪里？"><a href="#多个this规则出现时，this最终指向哪里？" class="headerlink" title="多个this规则出现时，this最终指向哪里？"></a>多个this规则出现时，this最终指向哪里？</h3><p>首先，new 的方式优先级最高，接下来是 bind 这些函数，然后是 obj.foo() 这种调用方式，最后是 foo 这种调用方式，同时，es6中箭头函数的 this 一旦被绑定，就不会再被任何方式所改变。 </p><h3 id="箭头函数-gt-中this"><a href="#箭头函数-gt-中this" class="headerlink" title="箭头函数 =&gt; 中this"></a>箭头函数 =&gt; 中this</h3><p>箭头函数不会创建自己的this,<strong>它只会从自己的作用域链的上一层继承this</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"222"</span>;</span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">    name : <span class="string">"111"</span>,</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = a.say;</span><br><span class="line">fun();               <span class="comment">// "222" 在全局window上执行</span></span><br><span class="line">a.say();             <span class="comment">// "111"</span></span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    name : <span class="string">"333"</span>,</span><br><span class="line">    say : <span class="function"><span class="keyword">function</span> (<span class="params">fun</span>) </span>&#123;</span><br><span class="line">        fun(); <span class="comment">// 没人调用，走预编译环节，在window执行</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        say : function () &#123;</span></span><br><span class="line"><span class="comment">            console.log(this.name);</span></span><br><span class="line"><span class="comment">        &#125;执行</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">b.say(a.say);        <span class="comment">// "222"</span></span><br><span class="line">b.say = a.say;</span><br><span class="line">b.say();             <span class="comment">// "333"</span></span><br></pre></td></tr></table></figure><h3 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h3><p>在”use strict”中这俩家伙不让用</p><ul><li><p>arguments.callee </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">arguments</span>.callee) <span class="comment">// ƒ () &#123;console.log(arguments.callee)&#125;</span></span><br><span class="line">    <span class="comment">// 指向函数自身引用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num = (<span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n * <span class="built_in">arguments</span>.callee(n - <span class="number">1</span>);</span><br><span class="line">&#125;(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>fun.caller( 函数自己的属性 )</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// arguments上只有 callee 和length, symbol, __proto__ </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">demo();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); <span class="comment">// 如下图</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">demo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(demo.caller);<span class="comment">// demo 被调用的那个环境</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    打印结果：</span></span><br><span class="line"><span class="comment">    ƒ test() &#123;</span></span><br><span class="line"><span class="comment">        demo();</span></span><br><span class="line"><span class="comment">        console.log(arguments);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line">test();</span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/this/callee.PNG" alt></p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">"123"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="string">"456"</span>;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="string">"789"</span></span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">&#125;</span><br><span class="line">print(); <span class="comment">// 456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">123</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.foo = <span class="number">234</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// print &#123;foo: 234&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print(); // 234</span></span><br><span class="line"><span class="keyword">new</span> print(); <span class="comment">// 123</span></span><br><span class="line"><span class="comment">// var this = Object.creat(print.prototype); this里面没有foo属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var this = &#123;</span></span><br><span class="line">    <span class="comment">//   里面没a</span></span><br><span class="line">    <span class="comment">// __proto__ : test.prototype</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    </span><br><span class="line">    a = <span class="number">0</span>;</span><br><span class="line">    alert(a);</span><br><span class="line">    alert(<span class="keyword">this</span>.a);</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    alert(a);</span><br><span class="line">&#125;</span><br><span class="line">test();<span class="comment">// 0 5 0</span></span><br><span class="line"><span class="keyword">new</span> test(); <span class="comment">// 0 undefined 0</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">AO &#123;</span></span><br><span class="line"><span class="comment">a : 0,</span></span><br><span class="line"><span class="comment">this : &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><p>  2.</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);<span class="comment">//undefined</span></span><br><span class="line">    <span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(foo);<span class="comment">//2</span></span><br><span class="line">    <span class="built_in">console</span>.log(hello);<span class="comment">//报错：hello is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  3.</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> test; <span class="comment">// 被覆盖</span></span><br><span class="line">    test();</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>  4 .</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="string">"1"</span>) &#123;<span class="built_in">console</span>.log(<span class="string">"one"</span>)&#125;;</span><br><span class="line">    <span class="keyword">if</span> (x === <span class="string">"2"</span>) &#123;<span class="built_in">console</span>.log(<span class="string">"two"</span>)&#125;;</span><br><span class="line">&#125;</span><br><span class="line">print();<span class="comment">//one</span></span><br></pre></td></tr></table></figure><p>  5.</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> marty = &#123;</span><br><span class="line">        name : <span class="string">"marty"</span>,</span><br><span class="line">        printName : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="keyword">this</span>.name)&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> test1 = &#123;<span class="attr">name</span> : <span class="string">"test1"</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> test2 = &#123;<span class="attr">name</span> : <span class="string">"test2"</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> test3 = &#123;<span class="attr">name</span> : <span class="string">"test3"</span>&#125;;</span><br><span class="line">    test3.printName = marty.printName;</span><br><span class="line">    <span class="keyword">var</span> printName2 = marty.printName.bind(&#123;<span class="attr">name</span> : <span class="number">123</span>&#125;);</span><br><span class="line">    marty.printName.call(test1); <span class="comment">// test1</span></span><br><span class="line">    marty.printName.apply(test2); <span class="comment">// test2</span></span><br><span class="line">    marty.printName(); <span class="comment">// marty</span></span><br><span class="line">    printName2();<span class="comment">// 123</span></span><br><span class="line">    test3.printName(); <span class="comment">// test3</span></span><br><span class="line">&#125;</span><br><span class="line">print();</span><br></pre></td></tr></table></figure><p>  6 .</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var bar = &#123;a : &quot;002&quot;&#125;;</span><br><span class="line">function print() &#123;</span><br><span class="line">    bar.a = &apos;a&apos;; // 覆盖002</span><br><span class="line">    Object.prototype.b = &apos;b&apos;; </span><br><span class="line">    return function inner() &#123;</span><br><span class="line">        console.log(bar.a);</span><br><span class="line">        console.log(bar.b);// 上原型链找</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print()(); // a b</span><br></pre></td></tr></table></figure><h3 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h3><ul><li><p>浅层</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'abc'</span>,</span><br><span class="line">    age : <span class="number">123</span>,</span><br><span class="line">    sex : <span class="string">'male'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = target || &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> origin) &#123;</span><br><span class="line">        target[prop] = origin[prop]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">clone(obj, obj1);</span><br></pre></td></tr></table></figure></li><li><p>深层(只考虑数组、对象)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">name : <span class="string">"huang"</span>,</span><br><span class="line">age : <span class="number">123</span>,</span><br><span class="line">card : [<span class="string">'visa'</span>,<span class="string">'master'</span>,<span class="number">123</span>],</span><br><span class="line">wife : &#123;</span><br><span class="line">name : <span class="string">"bcd"</span></span><br><span class="line">        son : &#123;</span><br><span class="line">        name : <span class="string">'faf'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="comment">// 1遍历对象 for (var prop in obj)</span></span><br><span class="line"><span class="comment">// 2判断是否原始值typeof() object instanceof toString(万无一失) constructor</span></span><br><span class="line"><span class="comment">// 3判断是数组还是对象</span></span><br><span class="line"><span class="comment">// 4建立相应的数组和对象</span></span><br><span class="line"><span class="comment">// 5递归</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">origin, target</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = target || &#123;&#125;,</span><br><span class="line">toStr = <span class="built_in">Object</span>.prototype.toString,</span><br><span class="line">arrStr = <span class="string">"[object Array]"</span>; <span class="comment">// "[object Object]" 反正俩个其中一个</span></span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> prop <span class="keyword">in</span> origin)&#123;</span><br><span class="line">        <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">if</span>(origin.hasOwnProperty(prop)) &#123;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span>(origin[prop] !== <span class="string">"null"</span> &amp;&amp; <span class="keyword">typeof</span>(origin[prop]) == <span class="string">'object'</span>) &#123;</span><br><span class="line">                </span><br><span class="line">target[prop] = toStr.call(origin[prop]) == arrStr ? [] : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">                deepClone(origin[prop],target[prop]); <span class="comment">// 如果里面还有引用值，再来</span></span><br><span class="line">                <span class="comment">// 引用值处理</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">target[prop] = origin[prop]; <span class="comment">// 原始值处理</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">deepClone(obj, obj1)</span><br></pre></td></tr></table></figure></li><li><p>三目运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span> &gt; <span class="number">0</span> ? (<span class="string">"10"</span> &gt; <span class="string">"9"</span> ? <span class="number">1</span> : <span class="number">0</span>) : <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> = num;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">"10"</span> &gt; <span class="string">"9"</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> num = <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num = <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;剖析this&quot;&gt;&lt;a href=&quot;#剖析this&quot; class=&quot;headerlink&quot; title=&quot;剖析this&quot;&gt;&lt;/a&gt;剖析this&lt;/h1&gt;&lt;h3 id=&quot;this的指向有哪几种情况？&quot;&gt;&lt;a href=&quot;#this的指向有哪几种情况？&quot; class=&quot;
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="this" scheme="http://www.hsiliver.space/tags/this/"/>
    
      <category term="克隆" scheme="http://www.hsiliver.space/tags/%E5%85%8B%E9%9A%86/"/>
    
      <category term="三目运算符" scheme="http://www.hsiliver.space/tags/%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="arguments" scheme="http://www.hsiliver.space/tags/arguments/"/>
    
  </entry>
  
  <entry>
    <title>继承模式，命名空间，对象枚举</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F%EF%BC%8C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>http://www.hsiliver.space/2019/07/08/继承模式，命名空间/</id>
    <published>2019-07-08T13:56:58.000Z</published>
    <updated>2019-07-09T02:11:25.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承模式，命名空间，对象枚举"><a href="#继承模式，命名空间，对象枚举" class="headerlink" title="继承模式，命名空间，对象枚举"></a>继承模式，命名空间，对象枚举</h2><h3 id="继承模式"><a href="#继承模式" class="headerlink" title="继承模式"></a>继承模式</h3><ul><li><p>传统模式——&gt; 原型链（prototype）</p><p>过多的继承了没用的属性</p></li><li><p>借用构造函数（call / apply）</p><p>不能继承借用构造函数的原型</p><p>每次构造函数夺多走一个函数</p></li><li><p>共享原型（）</p><p>不能随意改动自己的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Father.prototype.lastname = <span class="string">"huang"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Son.prototype = Father.prototype</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="built_in">console</span>.log(son.lastname); <span class="comment">// huang</span></span><br><span class="line"><span class="comment">// extend inherit（继承）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 封装继承方法</span></span><br><span class="line">Father.prototype.lastname = <span class="string">"huang"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    Target.prototype = Origin.prototype;</span><br><span class="line">&#125;</span><br><span class="line">inherit(Son, Father);</span><br><span class="line"><span class="comment">// 这样不好，因为如果要给son单独添加一个属性的时候，将会同时给Father加上属性</span></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="comment">// 于是就出现了圣杯模式</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>圣杯模式（加一个中介）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Father.prototype.lastname = <span class="string">"huang"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inherit</span>(<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constuctor = Target;<span class="comment">// *让constuctor指向目标对象</span></span><br><span class="line">    Target.prototype.uber = Origin.prototype; <span class="comment">//*找到自己的超级父级，最终继承自谁</span></span><br><span class="line">&#125;</span><br><span class="line">inherit(Son, Father);</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line">Son.prototype.sex = <span class="string">"male"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(son.sex, father.ser); <span class="comment">// male undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们还可以在丰满一下</span></span><br><span class="line"><span class="comment">son.__proto__ --&gt; new F().__proto__ --&gt; Father.prototype</span></span><br><span class="line"><span class="comment">让constuctor指向目标对象(如上面注释的有*两行)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 雅虎YUI3库的圣杯模式</span></span><br><span class="line"><span class="keyword">var</span> inherit = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> F = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Target, Origin</span>) </span>&#123;</span><br><span class="line">        F.prototype = Origin.prototype;</span><br><span class="line">    Target.prototype = <span class="keyword">new</span> F();</span><br><span class="line">    Target.prototype.constuctor = Target;</span><br><span class="line">    Target.prototype.uber = Origin.prototype;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br><span class="line"><span class="comment">// 闭包的第三作用：函数封装私有化</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">F 被储存在return的函数的执行期上下文里面，被有私有化了（隐藏了），</span></span><br><span class="line"><span class="comment">因为F是过度的函数，所以这个私有化是很好的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><ul><li><p>管理变量，防止污染全局，适用于模块化开发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包第四点：模块化开发，防止变量污染全局</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'hhh'</span>;</span><br><span class="line"><span class="keyword">var</span> init = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="comment">// 约定俗成的初始化函数 'init'</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="comment">// 里面的name与外边的name不会有任何关系</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        callName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;())</span><br></pre></td></tr></table></figure></li><li><p>jquery链式调用原理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hobby = &#123;</span><br><span class="line">smoking : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'爽'</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">// hobby</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    drinking : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'更爽'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    perming : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'走烫头去'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">hobby.smoking().drinking().perming();</span><br></pre></td></tr></table></figure></li><li><p>属性的表示方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span> : <span class="string">'a'</span>&#125;</span><br><span class="line"><span class="comment">// 访问name属性： obj.name === obj['name'],</span></span><br><span class="line"><span class="comment">// 事实上我们 obj.name 的时候 系统会隐式调用 obj['name']</span></span><br><span class="line"><span class="keyword">var</span> hobby = &#123;</span><br><span class="line">    hobby1 : <span class="string">'喝酒'</span>,</span><br><span class="line">    hobby2 : <span class="string">'烫头'</span>,</span><br><span class="line">    hobby3 : <span class="string">'抽烟'</span></span><br><span class="line">    hobbyFun : <span class="function"><span class="keyword">function</span> (<span class="params">num</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>[<span class="string">'hobby'</span> + num]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对象的枚举（遍历）enumeration"><a href="#对象的枚举（遍历）enumeration" class="headerlink" title="对象的枚举（遍历）enumeration"></a>对象的枚举（遍历）enumeration</h3><ul><li><p>for in（for循环的简化版，对象有多少个属性，就循环多少圈）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'hsz'</span>,</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line">    sex : <span class="string">'male'</span>,</span><br><span class="line">    height : <span class="number">170</span>,</span><br><span class="line">    weight : <span class="number">55</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(prop); <span class="comment">// name age sex height weight(打印对象的属性名)</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj.prop); <span class="comment">// 打印对象的属性值？ 结果是undefined</span></span><br><span class="line">    <span class="comment">// 因为会隐式的调用obj['prop']而不是obj[prop]</span></span><br><span class="line">    <span class="built_in">console</span>.log(obj[prop]);<span class="comment">// 打印对象的属性值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>hasOwnProperty</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'hsz'</span>,</span><br><span class="line">    age : <span class="number">20</span>,</span><br><span class="line">    sex : <span class="string">'male'</span>,</span><br><span class="line">    height : <span class="number">170</span>,</span><br><span class="line">    weight : <span class="number">55</span></span><br><span class="line">    __proto__ : &#123;</span><br><span class="line">    lastName : <span class="string">'h'</span></span><br><span class="line">    __proto__ : <span class="built_in">Object</span>.prototype</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> prop <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.hasOwnProperty(prop)) &#123; <span class="comment">// 一般这俩是成套存在的</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        判断是否是自己的属性或者方法（排除原型），但是一旦到了Object.prototype,</span></span><br><span class="line"><span class="comment">        就会放弃遍历了</span></span><br><span class="line"><span class="comment">        */</span> </span><br><span class="line">        <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(obj[prop]);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    但是要注意，但凡是自己设置的属性，prop到哪都能给你遍历出来</span></span><br><span class="line"><span class="comment">    比如 Object.prototype.abc = 'abc', 照样给你遍历出来，</span></span><br><span class="line"><span class="comment">    但凡是系统自带的就遍历不出来</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>in</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in 只能判断 能不能够访问到这个属性，不管这个属性在哪</span></span><br><span class="line"><span class="string">'height'</span> <span class="keyword">in</span> obj <span class="comment">// 控制台中返回true</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>instanceof</p><p><code>A instanceof B</code></p><p>官方解释： A 对象是不是 B 构造函数构造出来的</p><p><em>真正的判断： *</em>A 对象的原型链上** 有没有 <strong>B的原型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log([] <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person <span class="keyword">instanceof</span> <span class="built_in">Array</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="keyword">typeof</span> <span class="number">123</span>; <span class="comment">// "number"</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; <span class="comment">// "function"</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> <span class="keyword">typeof</span> <span class="literal">undefined</span>; <span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="number">4</span> <span class="keyword">typeof</span> &#123;&#125;; <span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>; <span class="comment">//"object"</span></span><br><span class="line"><span class="keyword">typeof</span> []; <span class="comment">//"object"</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="keyword">typeof</span> <span class="literal">true</span>; <span class="comment">// "boolean"</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> <span class="keyword">typeof</span> <span class="string">'123'</span>; <span class="comment">// "string"</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// （）会把function f() &#123;&#125; 变成表达式然后函数名 f 失去效用</span></span><br><span class="line">    x += <span class="keyword">typeof</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// "1undefined"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">'1a'</span>) == <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">parseInt</span>(<span class="string">'1a'</span>) <span class="comment">// "number"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;继承模式，命名空间，对象枚举&quot;&gt;&lt;a href=&quot;#继承模式，命名空间，对象枚举&quot; class=&quot;headerlink&quot; title=&quot;继承模式，命名空间，对象枚举&quot;&gt;&lt;/a&gt;继承模式，命名空间，对象枚举&lt;/h2&gt;&lt;h3 id=&quot;继承模式&quot;&gt;&lt;a href=&quot;#继
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="继承模式" scheme="http://www.hsiliver.space/tags/%E7%BB%A7%E6%89%BF%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="对象枚举" scheme="http://www.hsiliver.space/tags/%E5%AF%B9%E8%B1%A1%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="圣杯模式" scheme="http://www.hsiliver.space/tags/%E5%9C%A3%E6%9D%AF%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>call和apply实现</title>
    <link href="http://www.hsiliver.space/2019/07/08/call-apply/"/>
    <id>http://www.hsiliver.space/2019/07/08/call-apply/</id>
    <published>2019-07-08T13:55:58.000Z</published>
    <updated>2019-07-09T02:19:17.617Z</updated>
    
    <content type="html"><![CDATA[<h1 id="call和apply实现"><a href="#call和apply实现" class="headerlink" title="call和apply实现"></a>call和apply实现</h1><ul><li><p>相同点：*<em>call 和apply *</em>改变this指向</p></li><li><p>差异： 传参列表不同</p><p>call 需要把实参按照形参的个数传进去</p><p>apply 需要传一个arguments</p></li><li><p>优点：借用别人的工厂生产函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call的第一个参数是要改变的目标</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person1</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">person1.call(obj, <span class="string">"hsz"</span>); <span class="comment">// this就指向了obj</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;name: "hsz"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, tel, grade</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var this = &#123;&#125;; 自己隐式地生成</span></span><br><span class="line">    Person.call(<span class="keyword">this</span>, name, age, sex); <span class="comment">// 借用别人的函数，实现自己的功能</span></span><br><span class="line">    <span class="comment">// 再增加自己想要的属性、方法</span></span><br><span class="line">    <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Srudent(<span class="string">"hsz"</span>, <span class="number">123</span>, <span class="string">"male"</span>, <span class="number">139</span>, <span class="number">2019</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newCall = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">arguments</span>[<span class="number">0</span>] || <span class="built_in">window</span>;</span><br><span class="line">ctx.fn = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">var</span> args = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">args.push(<span class="string">`arguments[<span class="subst">$&#123;i&#125;</span>]`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result = <span class="built_in">eval</span>(<span class="string">`ctx.fn(<span class="subst">$&#123;args.join(<span class="string">','</span>)&#125;</span>)`</span>);</span><br><span class="line"><span class="keyword">delete</span> ctx.fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>eval();——会改变作用域，不好，但是这里为了实现 call功能，并没有其他影响<br>join() 方法用于把数组中的所有元素放入一个字符串</p><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.newApply = <span class="function"><span class="keyword">function</span> (<span class="params">ctx, arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> ctx = ctx || <span class="built_in">window</span>;</span><br><span class="line">ctx.fn = <span class="keyword">this</span>;</span><br><span class="line"><span class="keyword">if</span> (!arr) &#123;</span><br><span class="line"><span class="keyword">return</span> result = ctx.fn();</span><br><span class="line"><span class="keyword">delete</span> ctx.fn;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> args = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">args.push(<span class="string">`arr[<span class="subst">$&#123;i&#125;</span>]`</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result = <span class="built_in">eval</span>(<span class="string">`ctx.fn(<span class="subst">$&#123;args.join(<span class="string">','</span>)&#125;</span>)`</span>);</span><br><span class="line"><span class="keyword">delete</span> ctx.fn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;call和apply实现&quot;&gt;&lt;a href=&quot;#call和apply实现&quot; class=&quot;headerlink&quot; title=&quot;call和apply实现&quot;&gt;&lt;/a&gt;call和apply实现&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;相同点：*&lt;em&gt;call 和apply 
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="call" scheme="http://www.hsiliver.space/tags/call/"/>
    
      <category term="apply" scheme="http://www.hsiliver.space/tags/apply/"/>
    
  </entry>
  
  <entry>
    <title>原型，原型链</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E5%8E%9F%E5%9E%8B%EF%BC%8C%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://www.hsiliver.space/2019/07/08/原型，原型链/</id>
    <published>2019-07-08T13:54:58.000Z</published>
    <updated>2019-07-09T02:09:26.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><ul><li><p>定义： 原型是 function 对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。原型也是对象。(类似遗传)</p><p><code>obj.prototype  ————  原型</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.name = <span class="string">"hsz"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person1.name);  <span class="comment">// "hsz"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>利用原型特点和概念，可以提取共有属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Car.prototype.name = <span class="string">"BMW"</span>;</span><br><span class="line">Car.prototype.height = <span class="number">1400</span>;</span><br><span class="line">Car.prototype.lang = <span class="number">4900</span>;</span><br><span class="line"><span class="comment">// 这样的目的是消除代码耦合， 因为如果我new的次数多了，就会造成耦合度很高</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">owner, color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.owner = owner;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Car(<span class="string">'red'</span>, <span class="string">'prof.huang'</span>);</span><br><span class="line">car.name = <span class="string">'zjx'</span>; </span><br><span class="line"><span class="comment">// Car &#123;owner: "red", color: "prof.huang", name: "zjx"&#125;</span></span><br><span class="line"><span class="comment">// 想要改变原型链上的name属性只有 Car.prototype.name = "zjx";</span></span><br><span class="line"><span class="comment">// 通过后代是改不了祖先的属性的</span></span><br><span class="line"><span class="comment">// 增加属性也是要通过prototype</span></span><br><span class="line"><span class="comment">// 删除属性： delate， 如果要删除祖先的属性一样要通过prototype去删除</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>对象如何查看原型 ——&gt; 隐式属性 __ proto __</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 尽量别修改的属性</span></span><br><span class="line">Person.prototype.name = <span class="string">'abc'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    每一个对象都有一个proto指向本身的prototype</span></span><br><span class="line"><span class="comment">    比如找一个属性，如果自身找不到的话就会沿着__proto__ 的指向找</span></span><br><span class="line"><span class="comment">    var this = &#123;</span></span><br><span class="line"><span class="comment">    __proto__ : Person.prototype</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    这个__proto__ 也是可以修改的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span> : <span class="string">"happy"</span>&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.__proto__ = obj;</span><br><span class="line"><span class="comment">// 这是后person.__proto__ 就指向了 obj 而不是 Person</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>对象如何查看对象的构造函数 ——&gt; constructor</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">owner, color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.owner = owner;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car2 = <span class="keyword">new</span> Car();</span><br><span class="line"></span><br><span class="line">Car.prototype.constructor</span><br><span class="line">car2.constructor</span><br><span class="line"><span class="comment">// 控制台中是这样的</span></span><br><span class="line">ƒ Car(owner, color) &#123;</span><br><span class="line">    <span class="keyword">this</span>.owner = owner;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个constructor是可以人为改变的</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Car.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span> : Person</span><br><span class="line">&#125;</span><br><span class="line">var car2 = new Car();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">car2.<span class="keyword">constructor</span></span><br><span class="line">// 控制台中是这样的</span><br><span class="line">ƒ Person() &#123;&#125;</span><br></pre></td></tr></table></figure><p>脑经急转弯</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype.name = <span class="string">'happy'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// var this = &#123;__proto__ : Person.prototype&#125;</span></span><br><span class="line">    <span class="comment">// 现在__proto__ 和 Person.prototype 指向一个空间;</span></span><br><span class="line">    <span class="comment">// 即使 Person.prototype 指向了另一个空间, __proto__ 依然指向 "happy"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// happy</span></span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'hsz'</span> <span class="comment">// 覆盖了原来的name</span></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : <span class="string">'xiuxiu'</span></span><br><span class="line">    <span class="comment">// 这相当于存到了另一个堆里面，相当于换血了</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    同理如下：</span></span><br><span class="line"><span class="comment">    var obj = &#123;name : "a"&#125;;</span></span><br><span class="line"><span class="comment">    var obj1 = obj;</span></span><br><span class="line"><span class="comment">    obj = &#123;name : "b"&#125;</span></span><br><span class="line"><span class="comment">    obj1.name == "a"</span></span><br><span class="line"><span class="comment">    obj.name == "b"</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    obj1 ==&gt; obj ==&gt; name: "a"</span></span><br><span class="line"><span class="comment">    然后：obj1 ==&gt; name : "a", obj ==&gt; name : "b"</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    __proto__ ==&gt; Person.prototype ==&gt; "hsz"</span></span><br><span class="line"><span class="comment">    同理然后：__proto__ ==&gt; "hsz", Person.prototype ==&gt; "xiuxiu"</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// hsz</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 那么我们再来看另一种情况</span></span><br><span class="line">Person.prototype.name = <span class="string">'happy'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person2</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : <span class="string">'xiuxiu'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person2();</span><br><span class="line"><span class="built_in">console</span>.log(person2.name);   <span class="comment">// xiuxiu</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这就需要考虑预编译环节了</span></span><br><span class="line"><span class="comment">function Person2() &#123;&#125;   首先函数声明提升</span></span><br><span class="line"><span class="comment">    Person.prototype.name = 'happy'; 然后执行这一句</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Person.prototype = &#123;</span></span><br><span class="line"><span class="comment">        name : 'xiuxiu'    然后执行这一句</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    var person2 = new Person2();  </span></span><br><span class="line"><span class="comment">    当new的时候，函数才发生改变，这个时候name已经被覆盖了</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    上一次是应为函数已经new了，才改变name的，所以两次结果不一样。顺序有时候也很关键</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><ul><li><p>原型链的连接点就是 __ proto__</p></li><li><p>原型链的访问方式跟作用域链的访问方式雷同，都是先往内部找，找不到再找远处</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Grand.prototype.name = <span class="string">"hsz"</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Grand.prototype.__proto__ = Object.prototype</span></span><br><span class="line"><span class="comment">Object.prototype 是所有原型链的终端</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>原型链上的增、删、改、查</p><p>只能通过自己增、删、改、查，后代是无法进行这些操作的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">    name : <span class="string">"a"</span>,</span><br><span class="line">    num : <span class="number">10</span>,</span><br><span class="line">    sayname : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"b"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.num++</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">当调用person.num++后，就有了num属性</span></span><br><span class="line"><span class="comment">Person &#123;name: "b", num: 12&#125;</span></span><br><span class="line"><span class="comment">就像复制了一样，后面会说克隆，有异曲同工的效果</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>Object.create(原型)——更加灵活的创建对象的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">name</span> : <span class="string">"hsz"</span>, <span class="attr">age</span> : <span class="number">123</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.create(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">"hsz"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="built_in">Object</span>.create(Person.prototype);</span><br></pre></td></tr></table></figure></li><li><p>绝大多数的对象的最终都会继承自Object.prototype</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(<span class="literal">null</span>);  <span class="comment">// 这个就没原型 only object and null</span></span><br><span class="line"><span class="comment">// 即使人为的加了__proto__, 系统一样读不了</span></span><br><span class="line">obj.__proto__ = &#123;<span class="attr">name</span> : <span class="string">"hsz"</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// undefined and null 没有原型所以 .toString(); 会报错</span></span><br><span class="line"></span><br><span class="line"><span class="number">123.</span>toString(); <span class="comment">// 报错，因为 123. 会被系统认为是浮点型</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line">num.toStrng(); <span class="comment">// "123"</span></span><br><span class="line"><span class="comment">// 在Number的prototype上有很多方法其中有toString</span></span><br><span class="line"><span class="built_in">Number</span>.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 这就叫方法的重写</span></span><br><span class="line"><span class="comment">// 所以事实上我们调用的是Number.prototype上它自己重写的toString方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果我们调用的是Object.prototype.toString方法的话，结果就不是"123"了</span></span><br><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">123</span>); <span class="comment">// "[Object Number]"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString(); <span class="comment">// "[object Object]"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line"><span class="built_in">document</span>.write(obj); <span class="comment">// 报错</span></span><br><span class="line"><span class="comment">// 事实上我们打印的是这个： document.write(obj.toString()),</span></span><br><span class="line"><span class="comment">// 下面我们来验证是否真的调用了toString方法</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="built_in">Object</span>.create(<span class="literal">null</span>);</span><br><span class="line">obj1.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"哈哈哈"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.write(obj1); <span class="comment">// "哈哈哈"</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>小bug</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">javascript的小数多少有些偏差</span><br><span class="line"><span class="number">0.14</span> * <span class="number">100</span>  <span class="comment">// 14.000000000000002</span></span><br><span class="line"><span class="comment">// 所以尽量别用toFix()</span></span><br><span class="line"><span class="comment">// 小数点后可以操作18位以上了，已经会用科学计数法表示了</span></span><br><span class="line"><span class="comment">// 可以正常计算的范围内： 小数点前16位，后16位 是可以计算准确的</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型&quot;&gt;&lt;a href=&quot;#原型&quot; class=&quot;headerlink&quot; title=&quot;原型&quot;&gt;&lt;/a&gt;原型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义： 原型是 function 对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="原型" scheme="http://www.hsiliver.space/tags/%E5%8E%9F%E5%9E%8B/"/>
    
      <category term="原型链" scheme="http://www.hsiliver.space/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>对象_包装类</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E5%AF%B9%E8%B1%A1_%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    <id>http://www.hsiliver.space/2019/07/08/对象_包装类/</id>
    <published>2019-07-08T13:53:58.000Z</published>
    <updated>2019-07-09T02:13:05.342Z</updated>
    
    <content type="html"><![CDATA[<h2 id="对象、包装类"><a href="#对象、包装类" class="headerlink" title="对象、包装类"></a>对象、包装类</h2><ul><li><h3 id="对象可以放属性，函数，需要设置属性名，属性值"><a href="#对象可以放属性，函数，需要设置属性名，属性值" class="headerlink" title="对象可以放属性，函数，需要设置属性名，属性值"></a>对象可以放属性，函数，需要设置属性名，属性值</h3></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hsz = &#123;</span><br><span class="line">    name: <span class="string">"hsz"</span>,</span><br><span class="line">    age: <span class="number">23</span>,</span><br><span class="line">    sex: <span class="string">"male"</span>,</span><br><span class="line">    smoke: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"cool!!!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.health --;</span><br><span class="line">    &#125;,</span><br><span class="line">    drink: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"so cool!!"</span>);</span><br><span class="line">        <span class="keyword">this</span>.health ++;</span><br><span class="line">    &#125;,</span><br><span class="line">    health: <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里的函数与普通的函数一样可以传参数等操作</span></span><br><span class="line"><span class="comment">// 如果把一个对象当成一个人的话，health 会称为这个人的健康（this），而不是hsz的health</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="属性的增、删、改、查"><a href="#属性的增、删、改、查" class="headerlink" title="属性的增、删、改、查"></a>属性的增、删、改、查</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hsz.girlFriend = <span class="string">"xiangZhang"</span>; <span class="comment">// 增</span></span><br><span class="line">hsz.girlFriend;   <span class="comment">// 查</span></span><br><span class="line">hsz.girlFriend = <span class="string">"xiuxiu"</span>   <span class="comment">// 改</span></span><br><span class="line">delate hsz.health   <span class="comment">// 删</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当一个变量未声明就输出会报错，但是一个对象里的属性没添加，不会报错，打印undefined</span></span><br></pre></td></tr></table></figure></li><li><h3 id="对象的创建方法"><a href="#对象的创建方法" class="headerlink" title="对象的创建方法"></a>对象的创建方法</h3><ol><li><p>var obj = {}    plainObject    对象字面量、对象直接量</p></li><li><p>构造函数</p><p>1) 系统自带构造函数  Object()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="comment">// 这两者是没有任何区别的，除了视觉上</span></span><br></pre></td></tr></table></figure><p>2) <strong>自定义( 构造函数 )</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">由于函数与构造函数视觉上没有区别，为了小伙伴们更好的区分，就产生了大驼峰式命名</span></span><br><span class="line"><span class="comment">即首字母大写</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.color = color, <span class="comment">// 通过参数改变颜色，让构造函数变得更强大</span></span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"BMW"</span>,</span><br><span class="line">    <span class="keyword">this</span>.height = <span class="string">"1400"</span>,</span><br><span class="line">    <span class="keyword">this</span>.lang = <span class="string">"4900"</span>,</span><br><span class="line">    <span class="keyword">this</span>.width = <span class="number">1000</span>,</span><br><span class="line">    <span class="keyword">this</span>.health = <span class="number">100</span>,</span><br><span class="line">    <span class="keyword">this</span>.run = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.health --;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 将所有需要批量制造的事物定义好，</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是必须借助一个工具 new</span></span><br><span class="line"><span class="keyword">var</span> car1 = <span class="keyword">new</span> Car(<span class="string">'red'</span>); <span class="comment">// 这就生产出来了一辆与 原始Car 一样的 car1 了</span></span><br><span class="line">car.name = <span class="string">"Maserati"</span> <span class="comment">// 然后再改变成自己想要的 玛莎拉蒂</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.在new的过程中，内部会隐式地：</span></span><br><span class="line"><span class="comment">    var this = &#123; &#125;;</span></span><br><span class="line"><span class="comment">    2.往this这个对象添加属性</span></span><br><span class="line"><span class="comment">    this = &#123;</span></span><br><span class="line"><span class="comment">    name: "",</span></span><br><span class="line"><span class="comment">    age:</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">this</span>.name = name,</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    3.最后：</span></span><br><span class="line"><span class="comment">    return this;</span></span><br><span class="line"><span class="comment">    只能return 一个对象，其他的都不行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'hsz'</span>, <span class="number">18</span>)</span><br></pre></td></tr></table></figure></li></ol></li></ul><pre><code>### 包装类<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);  <span class="comment">// Number 型对象</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>);<span class="comment">// String 型对象</span></span><br><span class="line"><span class="keyword">var</span> bol = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'true'</span>)<span class="comment">// Boolean 型对象 </span></span><br><span class="line"><span class="comment">// 事实上也就是个对象</span></span><br></pre></td></tr></table></figure>##### 原始值是坚决不能有属性和方法的，但是为什么这种操作，又不报错呢<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">4</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(隐式地) new Number(4)</span></span><br><span class="line"><span class="comment">（然后） Number(4).len = 3</span></span><br><span class="line"><span class="comment">(再然后) delate —— 销毁 new Number(4).len = 3;</span></span><br><span class="line"><span class="comment">(再然后) new Number(4).len ———— 这是一个系统给你新new的Number</span></span><br><span class="line"><span class="comment">(最后打印) undefined</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">num.len = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num.len); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 4 —— num依然存在，销毁的不是num</span></span><br></pre></td></tr></table></figure>##### 我们再来看这个特殊的家伙<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'abcd'</span>;</span><br><span class="line">str.length = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 'abcd'</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length);  <span class="comment">// 4 ———— 蒙了吧</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(隐式地) new String('abcd')</span></span><br><span class="line"><span class="comment">（然后） String('abcd').len = 3</span></span><br><span class="line"><span class="comment">(再然后) delate —— 销毁 new String('abcd').len = 3;</span></span><br><span class="line"><span class="comment">(最后打印) str == 'abcd', str.length == 4;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">new String('abcd').length 是系统自带的 ———— 这是一个很特殊的</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>##### Boolean 和 string new 完了后可以像object一样添加自己的属性<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abcd'</span>);</span><br><span class="line">str.a = <span class="string">'bcd'</span>;</span><br><span class="line">str.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.a) &#125;</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// String &#123;"abcd", a: "bcd", b: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.length) <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> boo = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="string">'abcd'</span>);</span><br><span class="line">boo.a = <span class="string">'bcd'</span>;</span><br><span class="line">boo.b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.a) &#125;</span><br><span class="line"><span class="built_in">console</span>.log(boo); <span class="comment">//Boolean &#123;true, a: "bcd", b: ƒ&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Boolean</span>.length) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>##### 例子<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abc"</span>;</span><br><span class="line">str += <span class="number">1</span>;               <span class="comment">// "abc1"</span></span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">typeof</span>(str); <span class="comment">// "string"</span></span><br><span class="line"><span class="keyword">if</span> (test.length == <span class="number">6</span>) &#123;</span><br><span class="line">    test.sign = <span class="string">"typeof的返回结果可能是String"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test.sign);<span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 这出题人真会折磨人</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>, y = z = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n = n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">y = add (x);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n = n + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">z = add(x)</span><br><span class="line"><span class="comment">// x = 1, y = 4, z = 4; </span></span><br><span class="line"><span class="comment">// 函数声明提升， add覆盖（视觉上懵人）</span></span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li><p>Object.create()</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="built_in">Object</span>.create(<span class="literal">null</span>) <span class="comment">// 返回为null的空对象，啥都没有</span></span><br></pre></td></tr></table></figure></li></ol><pre><code>除此之外，没啥区别了</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;对象、包装类&quot;&gt;&lt;a href=&quot;#对象、包装类&quot; class=&quot;headerlink&quot; title=&quot;对象、包装类&quot;&gt;&lt;/a&gt;对象、包装类&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;对象可以放属性，函数，需要设置属性名，属性值&quot;&gt;&lt;a href=&quot;#对象可以放属
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="对象" scheme="http://www.hsiliver.space/tags/%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="包装类" scheme="http://www.hsiliver.space/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>函数_作用域链</title>
    <link href="http://www.hsiliver.space/2019/07/08/%E5%87%BD%E6%95%B0_%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    <id>http://www.hsiliver.space/2019/07/08/函数_作用域链/</id>
    <published>2019-07-08T08:18:49.000Z</published>
    <updated>2019-07-09T02:12:31.094Z</updated>
    
    <content type="html"><![CDATA[<p>函数作用域链</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h3><pre><code>高内聚， 低耦合</code></pre><ul><li><h4 id="命名规范：小驼峰式命名"><a href="#命名规范：小驼峰式命名" class="headerlink" title="命名规范：小驼峰式命名"></a>命名规范：小驼峰式命名</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 命名函数表达式</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">theFirstFun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'abc'</span>);</span><br><span class="line">&#125;</span><br><span class="line">theFirstFun.name <span class="comment">// theFirstFun</span></span><br></pre></td></tr></table></figure><p>​        </p><ul><li><h4 id="表达式类函数，忽略函数名-此时-abc-被忽略"><a href="#表达式类函数，忽略函数名-此时-abc-被忽略" class="headerlink" title="表达式类函数，忽略函数名, 此时 abc 被忽略"></a>表达式类函数，忽略函数名, 此时 <strong><em>abc</em></strong> 被忽略</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span> 匿名函数表达式 ———— 后来叫做函数表达式</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'abc'</span>)</span><br><span class="line">&#125;</span><br><span class="line">test();</span><br><span class="line">test.name <span class="comment">// abc</span></span><br></pre></td></tr></table></figure><ul><li><h4 id="函数传参"><a href="#函数传参" class="headerlink" title="函数传参"></a>函数传参</h4></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 形参  ———— delete 删除不了</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(sum.length) <span class="comment">// 2 形参长度</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length) <span class="comment">// 3 实参长度</span></span><br><span class="line">    <span class="comment">// 等同于在函数内部声明了 a, b</span></span><br><span class="line"><span class="keyword">var</span> c = a + b;</span><br><span class="line">coonsole.log(c)</span><br><span class="line">    <span class="comment">// 每个函数在出生的时候系统就会隐式地创建一个arguments（类数组）来装实参——实参列表</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实参</span></span><br><span class="line">sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum1</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 现在的情况是</span></span><br><span class="line">    <span class="comment">// var a = 1;</span></span><br><span class="line">    <span class="comment">// var b = 2; </span></span><br><span class="line">    <span class="comment">// var c; </span></span><br><span class="line">    <span class="comment">// arguments =&gt; [1, 2] 实参只有 2 位</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 然后我们改变规则</span></span><br><span class="line">    a = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]);  <span class="comment">// 10</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们再改变一次</span></span><br><span class="line">    <span class="built_in">arguments</span>[<span class="number">0</span>] = <span class="number">20</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// 20</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们会发现这中间存在映射规则 实参的每一位对应形参的每一位</span></span><br><span class="line">    c = <span class="number">30</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">2</span>]);   <span class="comment">// undifined;</span></span><br><span class="line">    <span class="comment">// 所以得出 实参出生的时候有几个 就是几个</span></span><br><span class="line">&#125;</span><br><span class="line">sum1(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure><ul><li><h4 id="函数的-return-值"><a href="#函数的-return-值" class="headerlink" title="函数的 return 值"></a>函数的 return 值</h4><p>函数的结束条件 + 返回值</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'123'</span>; <span class="comment">// 有中断 并且 返回值 结束的功能, 不会打印下面的20</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">20</span>);</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">sum(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 123 倒叙且变中文</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="built_in">window</span>.prompt(<span class="string">'input'</span>);</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = num.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123; <span class="comment">// 倒着加 2 =》 1 =》 0</span></span><br><span class="line">        str += transfer(num[i]); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (target) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"1"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"壹"</span>；</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"2"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"俩"</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"3"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"仨"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 阶乘</span></span><br><span class="line"><span class="comment">// 递归 —— 唯一好处，简洁代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jc</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">0</span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// 出口， 不然就在无穷死循环 </span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> n * jc(n<span class="number">-1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 找规律</span></span><br><span class="line"><span class="comment">// 2. 找出口</span></span><br><span class="line"><span class="comment">// 斐波那契数列 fn(n) == fb(n - 1) + fb(n -2)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fb</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fb(n - <span class="number">1</span>) + fb(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用域初探"><a href="#作用域初探" class="headerlink" title="作用域初探"></a>作用域初探</h3><h4 id="JS运行分三步："><a href="#JS运行分三步：" class="headerlink" title="JS运行分三步："></a>JS运行分三步：</h4><p>语法分析（通篇扫描是否有语法错误），预编译（发生在函数执行的前一刻），解释执行（一行行执行）。</p><pre><code>全局变量：在函数外声明的变量局部变量：在一个区域内声明的变量</code></pre><h4 id="预编译"><a href="#预编译" class="headerlink" title="预编译"></a>预编译</h4><ul><li><p>imply global 暗示全局变量：即任何变量，如果变量未经声明就赋值，此变量归全局所有。</p><p> <code>a = 123;</code></p></li><li><p>一切声明的全局变量，全是window的属性。window就是全局的域</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 123</span></span><br><span class="line"><span class="comment">// 等同于：</span></span><br><span class="line"><span class="built_in">window</span> &#123;<span class="attr">a</span> : <span class="number">123</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数预编译四部曲</p></li></ul>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">fn(<span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// ƒ a() &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> a = <span class="number">123</span>;  <span class="comment">// 提升到第 2 位 覆盖第一个 a</span></span><br><span class="line">   <span class="built_in">console</span>.log(a);       <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;;      <span class="comment">// 提升到第 1 位</span></span><br><span class="line">   <span class="built_in">console</span>.log(a);       <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;<span class="comment">// 提升到第 2 位</span></span><br><span class="line">   <span class="built_in">console</span>.log(b);  <span class="comment">// ƒ () &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;  <span class="comment">// 提升到第 1 位</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>创建AO对象 (action object 由于这个函数而产生的存储空间库)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>找形参和变量声明，将变量和形参名作为AO的属性名，值为undefined</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">    <span class="comment">// arguments : [1],</span></span><br><span class="line">    <span class="comment">// this : window,</span></span><br><span class="line">    <span class="comment">// 这里还有两步，这里为了方便，先注释，不考虑。</span></span><br><span class="line">    </span><br><span class="line">a : <span class="literal">undefined</span>,</span><br><span class="line">b : <span class="literal">undefined</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>将实参值和形参统一</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">a: <span class="number">1</span>,</span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    <span class="comment">// 形参没有对应的实参就不用管</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>在函数体里面找函数声明， 值赋予函数体 <strong>*（函数表达式提升不了，它是表达式）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AO &#123;</span><br><span class="line">a: <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;,<span class="comment">// 覆盖了形参的a</span></span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    d: <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">=====&gt;</span><br><span class="line">AO &#123;</span><br><span class="line">a: <span class="number">123</span>, <span class="comment">// 执行完第一个console.log后，a再度覆盖fn</span></span><br><span class="line">    b: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    d: <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 一句一句执行</span></span><br></pre></td></tr></table></figure><p>例子2：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line">    c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">var</span> c;</span><br><span class="line">    a = <span class="number">3</span>;</span><br><span class="line">    b = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">d</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    <span class="built_in">console</span>.log(b);</span><br><span class="line">&#125;</span><br><span class="line">test(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1. AO &#123;&#125;</span></span><br><span class="line"><span class="comment">2. AO &#123;</span></span><br><span class="line"><span class="comment">a: undefined,</span></span><br><span class="line"><span class="comment">b: undefined,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3. AO &#123;</span></span><br><span class="line"><span class="comment">a: 1,</span></span><br><span class="line"><span class="comment">b: undefined,</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">4. AO &#123;</span></span><br><span class="line"><span class="comment">a: 1,</span></span><br><span class="line"><span class="comment">b: function b() &#123;&#125;,</span></span><br><span class="line"><span class="comment">d: function d() &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">所以第一个console.log(a) =&gt; 1</span></span><br><span class="line"><span class="comment">然后继续</span></span><br><span class="line"><span class="comment">AO &#123;</span></span><br><span class="line"><span class="comment">a: 3,</span></span><br><span class="line"><span class="comment">b: 2,</span></span><br><span class="line"><span class="comment">c: 0,</span></span><br><span class="line"><span class="comment">d: function d() &#123;&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">所以后面两个console.log(b) 都是 2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">(<span class="built_in">window</span>.foo || (<span class="built_in">window</span>.foo = <span class="string">'bar'</span>));</span><br><span class="line"><span class="comment">// bar</span></span><br></pre></td></tr></table></figure><p>全局：global object( GO )</p><p>GO === window</p></li></ol><h3 id="作用域，作用域链"><a href="#作用域，作用域链" class="headerlink" title="作用域，作用域链"></a>作用域，作用域链</h3><h4 id="函数作用域-scope"><a href="#函数作用域-scope" class="headerlink" title="函数作用域[[scope]]"></a>函数作用域[[scope]]</h4><ul><li><strong>[[scope]]</strong> : 每个javascript函数都是一个对象，对象中有的属性可以访问，有的不能，这些属性仅供javascript引擎存取，[[scope]] 就是其中一个。[[scope]] 指的就是函数的作用域，其中存储了执行期上下文的集合。</li></ul><ul><li><strong>执行期上下文</strong>： 当函数执行前一刻，会创建一个称为执行期上下文的内部对象（AO）。一个执行期上下文定义了一个函数执行时的环境，函数每次执行时对应的执行期上下文都是独一无二的，所以多次调用一个函数会导致创建多个执行期上下文，当函数执行完毕，它所产生的执行上下文被销毁。</li></ul><h4 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h4><ul><li><code>[[scope]]</code>中所存储的执行期上下文对象的集合，这个集合呈链式链接，我们称这种链式链接为作用域链。查找变量时，要从作用域链的顶部开始查找。Activation Object（AO）到Global Object（GO）。</li><li>查找变量： 从作用域链的顶端依次向下查找</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> bb =<span class="number">234</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aa = <span class="number">123</span>;</span><br><span class="line">    b();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> glob = <span class="number">100</span>;</span><br><span class="line">a();</span><br><span class="line"><span class="comment">// a defined(定义) a.[[scope]] --&gt; 0 : GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// a doing(执行)   a.[[scope]] --&gt; 0 : a-AO</span></span><br><span class="line"><span class="comment">//   1 : GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b defined(定义) b.[[scope]] --&gt; 0 : a-AO</span></span><br><span class="line"><span class="comment">//   1 : GO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// b doing(执行)   b.[[scope]] --&gt; 0 : b-AO</span></span><br><span class="line"><span class="comment">//    1 : a-AO</span></span><br><span class="line"><span class="comment">//   2 : GO</span></span><br></pre></td></tr></table></figure><p><img src="/2019/07/08/函数_作用域链/a.scope.PNG" alt></p><p><img src="/2019/07/08/函数_作用域链/doing.PNG" alt></p><p><img src="/2019/07/08/函数_作用域链/b_defined.PNG" alt></p><p><img src="/2019/07/08/函数_作用域链/b_doing.PNG" alt></p><h3 id="闭包1"><a href="#闭包1" class="headerlink" title="闭包1"></a>闭包1</h3><ul><li><p>当内部函数被保存到外部时，将会生成闭包。生成闭包后，内部函数依旧可以访问其所在的外部函数的变量。</p></li><li><p>危害：闭包会导致原有作用于连不释放，造成内存泄漏（占的多了，剩的就少了）</p><p>闭包问题的解决方法：立即执行函数、let</p><ul><li><p>详细解释：</p><p>当函数执行时，会创建一个称为<strong>执行期上下文的内部对象（AO）</strong>，执行期上下文定义了一个函数执行时的环境。</p><p>函数还会获得它所在作用域的<strong>作用域链</strong>，是存储函数能够访问的所有执行期上下文对象的集合，即这个函数中能够访问到的东西都是沿着作用域链向上查找直到全局作用域。</p><p>函数每次执行时对应的执行期上下文都是独一无二的，当函数执行完毕，函数都会失去对这个作用域链的引用，JS的垃圾回收机制是采用引用计数策略，如果一块内存不再被引用了那么这块内存就会被释放。</p><p>但是，当闭包存在时，即内部函数保留了对外部变量的引用时，这个作用域链就不会被销毁，此时内部函数依旧可以访问其所在的外部函数的变量，这就是闭包。</p></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> bbb = <span class="number">234</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(aaa);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> aaa = <span class="number">123</span>;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> glob = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> demo = a();</span><br><span class="line">demo();        <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">f b() &#123;&#125; 被保存出来了并且赋给了demo</span></span><br><span class="line"><span class="comment">虽然return后 a 的执行期上下文被销毁，但是b函数[[scope]]=&gt; aAO, bAO, GO</span></span><br><span class="line"><span class="comment">所以顺着链找就可以找到 ‘var aaa = 123;'</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包作用于累加</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> demo = a();</span><br><span class="line">demo(); <span class="comment">// 101</span></span><br><span class="line">demo(); <span class="comment">// 102</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第二个为啥是102 呢？</span></span><br><span class="line"><span class="comment">第一次demo执行完了后，a的AO依然被销毁，但是b的[[scope]]里面存的是第一次demo();后的aAO，事实上就是a斩断了aAO的线，想要销毁，但是b的手里撰着aAO，所以第一次执行产生的aAO，GO被永远当成了基础来用了;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 闭包作用于缓存（储存结构）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        cosole.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        num --;</span><br><span class="line">        <span class="built_in">console</span>.log(num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> [a, b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line">myArr[<span class="number">0</span>]();<span class="comment">// 101</span></span><br><span class="line">myArr[<span class="number">1</span>](); <span class="comment">// 100</span></span><br><span class="line"><span class="comment">// 被保存出来的f a() &#123;&#125; 和 f b() &#123;&#125; 共用一个testAO</span></span><br></pre></td></tr></table></figure><h3 id="立即执行函数"><a href="#立即执行函数" class="headerlink" title="立即执行函数"></a>立即执行函数</h3><ul><li><p>函数出生的时候都是等待被执行的，这个过程是很占内存的，尤其是那些只被执行一次就销毁的函数,</p></li><li><p>所以有了立即执行函数，执行完就被销毁，这是跟普通函数的唯一区别，其他一样，有执行期上下文，可以传参等等</p></li><li><p>针对初始化功能的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;()); <span class="comment">// W3C 建议第一种</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;)();</span><br><span class="line"><span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">123</span>);</span><br><span class="line">&#125;();</span><br><span class="line">+ <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">- <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line">! <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;&#125;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 陷阱</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b, c, d</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c, d)</span><br><span class="line">&#125;(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 比报错也不执行</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="闭包2"><a href="#闭包2" class="headerlink" title="闭包2"></a>闭包2</h3><ul><li><p>针对for循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 10个10</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">我们只看第一个for循环， 因为第二个只是为了执行</span></span><br><span class="line"><span class="comment">在for循环中 i 是不停在变的，我们要知道，函数只有在执行的时候才会被读取语句，当return完的时候，test函数才执行结束，而此时所有return出来的函数用的都是 test的AO，并且这个testAO里面for循环出来的i已经变成 10 了，当我们执行 myArr 的时候，用的就是 i = 10</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>解决办法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// (es6) let</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.write(i + <span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++) &#123;</span><br><span class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span><br><span class="line">            arr[j] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">document</span>.write(j + <span class="string">" "</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;(i))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myArr = test();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j ++) &#123;</span><br><span class="line">    myArr[j]();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在for循环中：</span></span><br><span class="line"><span class="comment">(function (0) &#123;</span></span><br><span class="line"><span class="comment">// j = 0</span></span><br><span class="line"><span class="comment">    arr[0] = function () &#123;</span></span><br><span class="line"><span class="comment">        document.write(j + " ");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;(0)) </span></span><br><span class="line"><span class="comment">// ———— 马上执行，然后将arr[0]丢到test的arr里面，等待被return出去,</span></span><br><span class="line"><span class="comment">// 此时立即执行函数的AO依然被arr[0]这个函数保存在arr[0]的[[scope]]里</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">(function (1) &#123;</span></span><br><span class="line"><span class="comment">// j = 1</span></span><br><span class="line"><span class="comment">    arr[1] = function () &#123;</span></span><br><span class="line"><span class="comment">        document.write(j + " ");</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;(1)) // ———— 马上执行，然后将arr[1]丢到test的arr里面，等待被return出去</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">........</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> food = <span class="string">"apple"</span>;</span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">        eatFood : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (food != <span class="string">""</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"I am eating "</span> + food);</span><br><span class="line">                food = <span class="string">""</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"There is nothing!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        pushFood: <span class="function"><span class="keyword">function</span> (<span class="params">myFood</span>) </span>&#123;</span><br><span class="line">            food = myFood</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = test();</span><br><span class="line">person.eatFood(); <span class="comment">// I am eating apple</span></span><br><span class="line">person.eatFood(); <span class="comment">// There is nothing!</span></span><br><span class="line">person.pushFood(<span class="string">'banana'</span>); </span><br><span class="line">person.eatFood(); <span class="comment">// I am eating banana</span></span><br><span class="line"><span class="comment">// 大家保存的都是同一个域，所以公用food这个变量（缓存）</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里巴巴uc事业社招笔试题 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用原生js，addEventListener，给每个li元素绑定一个click事件，输出他们的顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>a<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ulList = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'ul'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> liList = ulList.getElementsByTagName(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; liList.length; i++) &#123;</span></span><br><span class="line"><span class="javascript">            (<span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                liList[j].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">j</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(j)</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;(i))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="comment">// 同样可以用let解决</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 腾讯微店</span></span><br><span class="line"><span class="comment">写一个方法，求一个字符串的字节长度</span></span><br><span class="line"><span class="comment">提示： charCodeAt(); 一个中文占两个字节, 一个英文占两个字节, </span></span><br><span class="line"><span class="comment">charCodeAt()方法可返回置顶位置的字符得到Unicode编码，这个返回值是0-65535之间的整数</span></span><br><span class="line"><span class="comment">当返回值是 &lt;= 255时为英文（占1个字节）, 当返回值 &gt; 255 时为中文（占2个字节）</span></span><br><span class="line"><span class="comment">*/</span> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">retByteslen</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> count,</span><br><span class="line">        len;</span><br><span class="line">    count = len = target.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.charCodeAt(i) &gt; <span class="number">255</span>) &#123;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>逗号表达式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="number">1</span> - <span class="number">1</span>, <span class="number">1</span> + <span class="number">1</span>, <span class="number">2</span> + <span class="number">5</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// 一定要用括号括起来， 括号里面需要计算的先计算，，最后返回最后一个的计算结果</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"1"</span>;</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span> <span class="title">g</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(f))  <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// (function f() &#123;&#125;) ==&gt; 被括号变成了表达式，函数名被忽略了</span></span><br><span class="line">    x += <span class="keyword">typeof</span> f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// "1undefined"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 阿里巴巴UC社招笔试题： body 插入 一个div（原生js）</span></span><br><span class="line"><span class="keyword">var</span> oDiv = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">body.appendChild(oDiv);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;函数作用域链&lt;/p&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;h3 id=&quot;函数声明&quot;&gt;&lt;a href=&quot;#函数声明&quot; class=&quot;headerlink&quot; title=&quot;函数声
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="函数" scheme="http://www.hsiliver.space/tags/%E5%87%BD%E6%95%B0/"/>
    
      <category term="预编译" scheme="http://www.hsiliver.space/tags/%E9%A2%84%E7%BC%96%E8%AF%91/"/>
    
      <category term="作用域链" scheme="http://www.hsiliver.space/tags/%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
    
      <category term="闭包" scheme="http://www.hsiliver.space/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>js简介</title>
    <link href="http://www.hsiliver.space/2019/07/08/js%E7%AE%80%E4%BB%8B/"/>
    <id>http://www.hsiliver.space/2019/07/08/js简介/</id>
    <published>2019-07-08T06:45:09.000Z</published>
    <updated>2019-07-09T02:17:34.024Z</updated>
    
    <content type="html"><![CDATA[<p>js —— Javascript：解释性语言</p><h2 id="js-——JavaScript：解释性语言"><a href="#js-——JavaScript：解释性语言" class="headerlink" title="js ——JavaScript：解释性语言"></a>js ——JavaScript：解释性语言</h2><p>同时也叫  ECMAScript</p><ul><li><p><strong>编译</strong>    C，C++等</p><p>​    优点：快</p><p>​    不足：移植性不好，(不跨平台)</p></li></ul><ul><li><strong>解释</strong>    javascrip， php等</li></ul><p>​        优点：跨平台（不需要编译成文件）</p><p>​        不足：稍慢</p><ul><li><strong>混合型</strong>    Java</li></ul><p>​        .java –&gt;javac –&gt; 编译 –&gt; .class —-&gt; jvm —-&gt; 解释执行（两个都不是）</p><p>生活中的异步就是js的同步</p><p>单线程，同一时间处理一件事</p><h4 id="那是怎么模拟成多线程呢？"><a href="#那是怎么模拟成多线程呢？" class="headerlink" title="那是怎么模拟成多线程呢？"></a>那是怎么模拟成多线程呢？</h4><p>处理事件足够快的情况下，就可以做到看起来同时在做同一时间在做多件事</p><p>专业术语： 轮转时间片（争抢时间）</p><ol><li><p><strong>主流浏览器</strong>：</p><p>​    IE —————— trident</p><p>​    Chrom ———— webkit / blink</p><p>​    Firefox ———— Gecko</p><p>​    Opera ————  presto</p><p>​    Safari ————   webkit</p></li><li><p><strong>引入js</strong></p><p>​    页面嵌入<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</code></p><p>​    外部js文件<code>&lt;script type=&quot;text/javascript&quot; src=&quot;./***.js&quot;&gt;&lt;/script&gt;</code></p><p>​    为符合W3C标准 结构(html)    行为(js)     样式(css)    相分离</p><p>​    编程语言特点： 有变量( variable )</p><p>​    html，css属于脚本语言，计算机语言( 依然不影响它们的强大 )</p></li><li><p><strong>变量声明</strong></p><p>​    <code>var a;</code>—— 向window申请一个地方叫a</p><p>​    多个变量时尽量单一 var</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a,</span><br><span class="line">b,</span><br><span class="line">c;</span><br></pre></td></tr></table></figure></li><li><p><strong>变量赋值</strong></p><p>​    <code>a = 100;</code>—— 把100给a</p><p>​    再次赋值111给 a ，则原来100会被替换</p></li><li><p><strong>变量命名规则</strong></p><ul><li>变量名必须以包括 英文字母，_  ,  $ 开头 </li><li>变量名可以包括     英文字母， _  , $ 数字 </li><li>不可以用系统关键字(var new break else等)， 保留字作为变量名  (float int long class等)</li></ul></li><li><p><strong>运算优先级 &gt; 赋值</strong></p></li><li><p><strong>值的类型</strong></p><p>原始值 （stack）栈内存 first in, last out （不可改变性）</p><p>​    Number ———— 数字（1, 2, 3, 4）</p><p>​    Boolean ———— 布尔（true / false）</p><p>​    String ————— 字符串（’ 123 ‘， “ 123 “）</p><p>​    undefined ——— 没有定义的（undefined）</p><p>​    null —————— 空—–占位（null）</p><p>引用值（heap）堆内存</p><p>​    Array ————— 数组（[1, 2, 3, 4]）</p><p>​    Object ————  对象（{a: 1, b: 2}）</p><p>​    function ———   函数（function () {}）</p><p>​    Data ————— Data（）</p><p>​    RegExp ———— 正则（//）</p></li></ol><ul><li><p>Number、Stirng、Boolean、Null、Underfined这些基本数据类型，他们的值直接保存在栈中;</p><p><code>栈内存与栈内存之间是复制的关系var b = a;</code></p><p><img src="/2019/07/08/js简介/zhan2.PNG" alt></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> num1 = num;</span><br><span class="line">num = <span class="number">200</span>；</span><br><span class="line"></span><br><span class="line">事实上 —— <span class="number">100</span> 依然存在，只是剪断了 num 与 <span class="number">100</span> 的关系</span><br><span class="line">然后重新在 <span class="built_in">window</span> 弄了个 num1 </span><br><span class="line">再然后将原来的 num值（<span class="number">100</span>）赋给 num1，</span><br><span class="line">最后又重新找<span class="built_in">window</span>要了个地方叫num，将原来的num地方抹去变量名，再把<span class="number">200</span>赋值给num</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>Object、Function、Array、Date、RegExp这些引用类型，他们的引用变量（地址）储存在栈中，通过指针（这个地址）指向储存在堆中的实际对象</p><table><thead><tr><th align="left">对象</th><th align="left">操作</th></tr></thead><tbody><tr><td align="left">Array</td><td align="left">将 Array 的元素转换为字符串。结果字符串由逗号分隔，且连接起来。</td></tr><tr><td align="left">Boolean</td><td align="left">如果 Boolean 值是 true，则返回 “true”。否则，返回 “false”。</td></tr><tr><td align="left">Date</td><td align="left">返回日期的文字表示法。</td></tr><tr><td align="left">Error</td><td align="left">返回一个包含相关错误信息的字符串。</td></tr><tr><td align="left">Function</td><td align="left">返回如下格式的字符串，其中 functionname 是被调用 toString 方法函数的名称：function functionname( ) { [native code] }</td></tr><tr><td align="left">Number</td><td align="left">返回数字的文字表示。</td></tr><tr><td align="left">String</td><td align="left">返回 String 对象的值。</td></tr><tr><td align="left">默认</td><td align="left">返回 “[object objectname]”，其中 objectname 是对象类型的名称。</td></tr></tbody></table></li></ul>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr;</span><br><span class="line">arr.push(<span class="number">3</span>);</span><br></pre></td></tr></table></figure><p>   <img src="/2019/07/08/js简介/zhan.PNG" alt></p>   <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> arr1 = arr;</span><br><span class="line">arr = [<span class="number">1</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>   <img src="/2019/07/08/js简介/zhan3.PNG" alt></p><ul><li><h4 id="js语句基本规则"><a href="#js语句基本规则" class="headerlink" title="js语句基本规则"></a>js语句基本规则</h4><ul><li><p>语句后面加分号结束 “ ; “</p></li><li><p>js语法错误会引发后续代码终止，但不会影响其他<strong>js代码块</strong></p><p>低级错误：（语法解析错误）出现中文符号等</p><p>逻辑错误：（标准错误， 情有可原）没有定义变量等</p><p>一个<code>&lt;script type=&quot;text/javascript&quot;&gt;&lt;script/&gt;</code>就是一个js代码块</p></li><li><p>书写格式要规范， “ = + / - “ 两遍呢都应该有空格</p></li></ul></li><li><h4 id="运算操作符"><a href="#运算操作符" class="headerlink" title="运算操作符"></a>运算操作符</h4><ul><li><p>数学运算，字符串连接</p></li><li><p>任何数据类型加字符串都等于字符串</p></li><li><p>“ + “ , “ - “ , “ * “, “ / “ , “ % “ , “ () “</p></li><li><p>优先级 “ = “ 最弱， “ () “ 最强</p></li><li><p>“ ++ “ , “ – “ , “ += “ , “-=” , “ /=” , “ *= “, “ %= “</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a++  ——&gt; a = a + 1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a++ ); <span class="comment">// 先打印a，再 ++   10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log( ++b ); <span class="comment">// 先 ++ ，再打印a  21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = ++num1 - <span class="number">1</span> + num1++; <span class="comment">// 但是工作这样写是不行的，要新人都可以看懂才好</span></span><br><span class="line"><span class="built_in">console</span>.log(num2 + <span class="string">' '</span> + num1); <span class="comment">// 21 12 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// num += 10;  ——&gt; num = num + 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交换 n 和 m 的值</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> m = <span class="number">234</span>;</span><br><span class="line"><span class="number">1.</span> </span><br><span class="line"><span class="keyword">var</span> c = n;</span><br><span class="line">n = m;</span><br><span class="line">m = c;</span><br><span class="line"><span class="number">2.</span> </span><br><span class="line">a = a + b;</span><br><span class="line">b = a - b;</span><br><span class="line">a = a - b;</span><br><span class="line"><span class="number">3.</span> </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> + <span class="string">'a'</span>; <span class="comment">// 1a</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0</span> / <span class="number">0</span>;   <span class="comment">// NaN</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span> / <span class="number">0</span>;   <span class="comment">// infinity</span></span><br><span class="line"><span class="number">4.</span> </span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = ++a + <span class="number">1</span>; <span class="comment">// 3 '++'第一运算</span></span><br><span class="line"><span class="keyword">var</span> c = a++ + <span class="number">1</span>; <span class="comment">// 2 '++'最后才运算</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><ul><li><p>“ &lt; “ , “ &gt; “ , “ = “ , “ &gt;= “ , “ &lt;= “ , “==” , “ != “ , “ === “ </p></li><li><p>字符串比较的是 ASCLL 码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'10'</span> &gt; <span class="string">'8'</span>; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;&#125; == &#123;&#125;; <span class="comment">// false</span></span><br><span class="line">[] == []; <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>; <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li><li><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li><p>“ <code>&amp;&amp;</code> “ , “ <code>||</code> “ , “ <code>!</code>“ —— 运算的结果为真实值</p></li><li><p>“ <code>&amp;&amp;</code> “ —— 表达式转换成布尔值的结果，如果结果为真，那么它会看第二个表达式转换为布尔值的结果，然后如果只有两个表达式的话，只要看到第二个表达式，就返回表达式的值了，简单来说：<strong>遇到为<code>false</code>的值返回 这个值，遇到全为<code>true</code>的值就返回 最后一个值, 有中断的作用，所以可以作为”如果，那么”:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span> &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">document</span>.write(<span class="string">'aaa'</span>)</span><br></pre></td></tr></table></figure></li><li><p>“ <code>||</code> “ —— 遇到为<code>true</code>的值返回 这个值，遇到全为<code>false</code>的值就返回 最后一个值</p></li><li><p>“<code>!</code> “ —— 转换为布尔值再取反，   <code>!!NaN</code>转换为布尔值, 调用<code>Boolean()</code></p></li><li><p>undefined, null, NaN, “”, 0 —— 这五个值返回的布尔值都是FALSE</p></li></ul></li></ul><h3 id="条件语句循环语句"><a href="#条件语句循环语句" class="headerlink" title="条件语句循环语句"></a>条件语句循环语句</h3><ul><li><h4 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h4><p> —— 括号里的条件为true就运行 “{}” 里面的</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="number">1</span> &gt; <span class="number">0</span> &amp;&amp; <span class="number">2</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> () &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> () &#123;</span><br><span class="line">     <span class="comment">// 类似排除法</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ ) &#123;</span><br><span class="line">    <span class="comment">// (1) —————（2）—————（3）</span></span><br><span class="line"><span class="comment">// 减少我们的重复</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>) <span class="comment">// 打印10个a</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">for 循环执行顺序：</span></span><br><span class="line"><span class="comment">先执行一遍（1）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">判断（2）执行语句</span></span><br><span class="line"><span class="comment">执行（3）</span></span><br><span class="line"><span class="comment">直到（2）有一次条件不成立，立马停止</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">1. var i = 0;</span></span><br><span class="line"><span class="comment">2. if (i &lt; 10) &#123;</span></span><br><span class="line"><span class="comment">console.log('a')</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">3. i++; ---&gt; i = 1;</span></span><br><span class="line"><span class="comment">4. if (i &lt; 10) &#123;</span></span><br><span class="line"><span class="comment">console.log('a')</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">5. …………</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="while循环（简化版的for循环）"><a href="#while循环（简化版的for循环）" class="headerlink" title="while循环（简化版的for循环）"></a>while循环（简化版的for循环）</h4> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">for (;i &lt; 10;) &#123;</span></span><br><span class="line"><span class="comment">console.log(i);</span></span><br><span class="line"><span class="comment">i++;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 两个一样的效果</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="练习："><a href="#练习：" class="headerlink" title="练习："></a>练习：</h5><ol><li><p>计算2的n次幂，n可输入，n为自然数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">    mul *= <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mul)</span><br><span class="line"><span class="comment">// 先找规律，在写</span></span><br></pre></td></tr></table></figure></li><li><p>计算n的阶乘，n可输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="comment">// parseInt() 函数可解析一个字符串，并返回一个整数。</span></span><br><span class="line"><span class="keyword">var</span> mul = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</span><br><span class="line">mul *= i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(mul);</span><br></pre></td></tr></table></figure></li><li><p>著名的斐波那契数列， 输出第n项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="keyword">var</span> first = <span class="number">1</span>,</span><br><span class="line">    secend = <span class="number">2</span>,</span><br><span class="line">    third;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n<span class="number">-2</span>; i ++) &#123;</span><br><span class="line">        third = first + secend;</span><br><span class="line">        first = secend;</span><br><span class="line">        secend = third;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(third);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>编写程序， 输入一个三位数的正整数， 输出时反向输出。如：456 —&gt; 654</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> </span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>输入a, b, c三个数字，打印出最大的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> n = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.prompt(<span class="string">'input'</span>));</span><br><span class="line"><span class="keyword">if</span> (a &gt; b) &#123;</span><br><span class="line">    <span class="keyword">if</span> (a &gt; c) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; c) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(b)</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(c)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>打印出100以内的质数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">1</span>; j &lt;= <span class="built_in">Math</span>.sqrt(i); j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % j == <span class="number">0</span>) &#123;</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(i + <span class="string">"  "</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    count = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ul><li><h4 id="switch-case，-break，-continue"><a href="#switch-case，-break，-continue" class="headerlink" title="switch case， break， continue"></a>switch case， break， continue</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = <span class="built_in">window</span>.prompt(<span class="string">'input'</span>);</span><br><span class="line"><span class="keyword">switch</span> (data) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"monday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"wednesday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"thursday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"friday"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'wroking'</span>);</span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">case</span> <span class="string">"saturday"</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">"sunday"</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'relaxing'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>   <strong>break ———— 终止循环（只要是循环就可以用，而且要写在循环里面）</strong></p><p>   <strong>continue ——   终止本次循环，继续下次循环</strong></p><h2 id="typeof-类型转换"><a href="#typeof-类型转换" class="headerlink" title="typeof 类型转换"></a>typeof 类型转换</h2><ul><li><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="literal">undefined</span>, [], &#123;&#125;];</span><br><span class="line"><span class="comment">// 里面可以放很多东西</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">lastname</span>: <span class="string">"huang"</span>, <span class="attr">male</span>: <span class="string">"male"</span>, <span class="attr">number</span>: <span class="number">123</span>&#125;</span><br><span class="line"><span class="comment">// 里面可以放很多东西</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="编程形式的区别"><a href="#编程形式的区别" class="headerlink" title="编程形式的区别"></a>编程形式的区别</h3><ul><li><h4 id="面向过程（分步骤，能不能做）"><a href="#面向过程（分步骤，能不能做）" class="headerlink" title="面向过程（分步骤，能不能做）"></a>面向过程（分步骤，能不能做）</h4></li><li><h4 id="面向对象（谁来做）"><a href="#面向对象（谁来做）" class="headerlink" title="面向对象（谁来做）"></a>面向对象（谁来做）</h4></li></ul><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>typeof可以给我们返回6个值</p><p>*<em>Number  String   boolean  object  undefined  function *</em></p><p>两种写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span>(<span class="string">'123'</span>);</span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>); <span class="comment">// object—— 历史遗留问题</span></span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="显式类型转换"><a href="#显式类型转换" class="headerlink" title="显式类型转换"></a>显式类型转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'a'</span>); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">/*那些看起来不是数字的，就转不了*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>() <span class="comment">// 函数可解析一个字符串，并返回一个整数。相当于Number的小弟</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">parseInt(’10‘, 16) ——&gt; 16  16为基底，转化为10进制的数</span></span><br><span class="line"><span class="comment">parseInt(string, radix) ---&gt; radio取值范围[2, 32]</span></span><br><span class="line"><span class="comment">parseInt(’10abc‘)  ————&gt; 返回数值10</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseFloat</span>(<span class="number">1222.22</span>); <span class="comment">// 1222.22 类似parseInt(), 但是只有一个参数，转化为浮点型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>(<span class="number">123</span>) <span class="comment">// '123' String(mix)转换为字符串类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Boolean</span>(value); </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">转换为布尔类型如果省略 value 参数，或者设置为 0、-0、null、""、false、undefined 或 NaN，则该对象设置为 false。否则设置为 true（即使 value 参数是字符串 "false"）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">toString()</span><br><span class="line"><span class="keyword">var</span> demo = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> num = demo.toString(); <span class="comment">// undefined 和 NaN 用不了这个方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">demo.toString(redix); 把123转换为目标进制的数，跟 parseInt(string, radix) 配合用，可以转来转去</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="隐式类型转换"><a href="#隐式类型转换" class="headerlink" title="隐式类型转换"></a>隐式类型转换</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="literal">NaN</span>));   <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"NaN"</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(abc));   <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="number">123</span>));   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">isNaN</span>(<span class="string">"abc"</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">为啥会这样子呢？</span></span><br><span class="line"><span class="comment">因为调用 isNaN() 的时候会隐式调用 Number("abc"),然后再跟 NaN 比对</span></span><br><span class="line"><span class="comment">isNaN(null) ——&gt; Number(null) -&gt; 0 ——&gt; NaN 所以结果是false</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ++ 、-- 、+/- 、* 、/ 、% 、|| 、&amp;&amp; 、! 、&gt; 、&lt; 、&gt;= 、&lt;= 、== 、!=</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">null</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>        <span class="comment">// false</span></span><br><span class="line"><span class="keyword">typeof</span> (+<span class="string">'abc'</span>)  <span class="comment">// number</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typeof</span>(a);         <span class="comment">// undefined  未定义的变量在typeof里面不报错</span></span><br><span class="line"><span class="keyword">typeof</span>(<span class="keyword">typeof</span>(a))  <span class="comment">// "undefined"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myIsNaN</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="built_in">Number</span>(num);</span><br><span class="line">    ret += <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">if</span> (ret == <span class="string">"NaN"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="literal">false</span> + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str);  <span class="comment">// 1 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> demo = <span class="literal">false</span> == <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(demo);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>(a) &amp;&amp; -<span class="literal">true</span> + (+<span class="literal">undefined</span>) + <span class="string">""</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"基础扎实"</span>);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    typeof(a) == "undefined"</span></span><br><span class="line"><span class="comment">    -true == -1</span></span><br><span class="line"><span class="comment">    +undefined == NaN</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">11</span> + <span class="string">"11"</span> * <span class="number">2</span> == <span class="number">33</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"基础扎实"</span>)</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    "11" * 2 == 22, "11" - 2 == 9, "10" / 2 == 5, "11" + 2 = "112"</span></span><br><span class="line"><span class="comment">    "11" % 2 == 1, +"11" + 2 = 13</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!!<span class="string">" "</span> + !!<span class="string">""</span> - !!<span class="literal">false</span> || <span class="built_in">console</span>.log(<span class="string">'能打印，猪都能上树'</span>);</span><br><span class="line"><span class="comment">// true + false - false == 1</span></span><br></pre></td></tr></table></figure><h3 id="不发生类型转换的"><a href="#不发生类型转换的" class="headerlink" title="不发生类型转换的"></a>不发生类型转换的</h3><p><code>=== 、!==</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;js —— Javascript：解释性语言&lt;/p&gt;
&lt;h2 id=&quot;js-——JavaScript：解释性语言&quot;&gt;&lt;a href=&quot;#js-——JavaScript：解释性语言&quot; class=&quot;headerlink&quot; title=&quot;js ——JavaScript：解释性语
      
    
    </summary>
    
      <category term="web前端" scheme="http://www.hsiliver.space/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://www.hsiliver.space/tags/javascript/"/>
    
      <category term="js简介" scheme="http://www.hsiliver.space/tags/js%E7%AE%80%E4%BB%8B/"/>
    
      <category term="变量声明" scheme="http://www.hsiliver.space/tags/%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/"/>
    
      <category term="浏览器内核" scheme="http://www.hsiliver.space/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8/"/>
    
      <category term="堆栈数据" scheme="http://www.hsiliver.space/tags/%E5%A0%86%E6%A0%88%E6%95%B0%E6%8D%AE/"/>
    
      <category term="if语句" scheme="http://www.hsiliver.space/tags/if%E8%AF%AD%E5%8F%A5/"/>
    
      <category term="for循环" scheme="http://www.hsiliver.space/tags/for%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="运算符" scheme="http://www.hsiliver.space/tags/%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    
      <category term="类型转换" scheme="http://www.hsiliver.space/tags/%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
</feed>
